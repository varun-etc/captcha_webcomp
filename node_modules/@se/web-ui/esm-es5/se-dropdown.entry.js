var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-8c7316b3.js';
var dropdownCss = ".se-dropdown{display:-ms-inline-flexbox;display:inline-flex;position:relative}.se-dropdown[hidden]{display:none}.se-dropdown.left .dropdown-content{left:0}.se-dropdown.right .dropdown-content{right:0}.se-dropdown.top .dropdown-content{bottom:calc(100% + 4px)}.se-dropdown.bottom .dropdown-content{top:calc(100% + 4px)}.dropdown-toggle ::slotted(*){cursor:pointer}.dropdown-content{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);min-width:100px;-webkit-box-shadow:0px 8px 16px 0px rgba(0, 0, 0, 0.2);box-shadow:0px 8px 16px 0px rgba(0, 0, 0, 0.2);visibility:hidden;opacity:0;position:absolute;overflow:auto;border-radius:2px;z-index:-1}.dropdown-content.show{visibility:visible;opacity:1;z-index:5}";
var DropdownComponent = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines how to align the dropdown container.
         * `right`: Position the container with respect to the right side of the trigger element.
         * `left`: Position the container with respect to the left side of the trigger element.
         */
        this.alignment = 'left';
        /**
         * Defines how to vertically align the dropdown container.
         * `top`: Position the container with respect to the top side of the trigger element.
         * `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        this.verticalAlignment = 'bottom';
        /**
         * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        this.maxWidth = "200px";
        /**
         * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        this.maxHeight = "400px";
        this.opened = false;
        this.didOpen = createEvent(this, "didOpen", 7);
        this.didClose = createEvent(this, "didClose", 7);
        this.cancelAllDropdown = createEvent(this, "cancelAllDropdown", 5);
    }
    /**
     * Method to open the dropdown from outside its parent element.
     */
    class_1.prototype.open = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.opened = true;
                this.didOpen.emit();
                return [2 /*return*/];
            });
        });
    };
    /**
     * Method to close the dropdown from outside its parent element.
     */
    class_1.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.opened = false;
                this.didClose.emit();
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.handleClick = function () {
        if (this.opened) {
            this.close();
        }
    };
    class_1.prototype.handleTouchstart = function () {
        if (this.opened) {
            this.close();
        }
    };
    class_1.prototype.handleCancelAllDropdown = function () {
        if (!this.isActive && this.opened) {
            this.close();
        }
    };
    class_1.prototype._toggle = function (ev) {
        ev.stopPropagation();
        this.isActive = true;
        if (this.opened) {
            this.close();
        }
        else {
            // close others only when trying to open one
            this.cancelAllDropdown.emit();
            this.open();
        }
        this.isActive = false;
        // console.log(ev)
    };
    class_1.prototype.render = function () {
        var _this = this;
        return (h("div", { class: ['se-dropdown', this.alignment, this.verticalAlignment].join(' ') }, h("div", { "aria-haspopup": "true", "aria-expanded": this.opened, onClick: function (ev) { return _this._toggle(ev); } }, h("slot", { name: "trigger" })), h("div", { class: (this.opened ? 'show' : '') + " dropdown-content", style: { maxWidth: this.maxWidth, maxHeight: this.maxHeight } }, h("slot", null))));
    };
    Object.defineProperty(class_1.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
DropdownComponent.style = dropdownCss;
export { DropdownComponent as se_dropdown };
