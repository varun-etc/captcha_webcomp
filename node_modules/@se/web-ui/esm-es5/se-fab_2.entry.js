var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, h, c as createEvent, g as getElement } from './index-8c7316b3.js';
import { a as arrow4Top } from './arrow4_top-2ebcb424.js';
var notificationError = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1024 1024\"><path d=\"M542 512l113 113c8 8 8 22 0 30-5 4-10 6-15 6-6 0-11-2-16-6L512 542 399 655c-5 4-10 6-15 6-6 0-11-2-16-6-8-8-8-22 0-30l113-113-113-113c-8-8-8-22 0-30 9-8 22-8 31 0l113 112 112-112c9-8 22-8 31 0 8 8 8 22 0 30z\"/></svg>";
var fabCss = ".se-fab{position:fixed}.se-fab.pos-top{top:76px;right:17px}.se-fab.pos-top .mini-action-button{top:70px;left:12px;text-align:center}.se-fab.pos-bottom{bottom:17px;right:17px}.se-fab.pos-bottom .mini-action-button{bottom:55px;left:12px;text-align:center}.se-fab .mini-action-button{cursor:pointer;position:absolute;display:none}.se-fab se-icon{margin-right:0}.se-fab .show{display:block}";
var SHOW_FAB = 'show';
var FabComponent = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.error_icon = notificationError;
        this.arrow_up = arrow4Top;
        /**
         * Property that determines the functionality of the FAB.
         * The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB.
         * The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB.
         */
        this.option = 'speeddial';
        /**
         *  Property that determines the position of the component.
         *  The default setting is `bottom`, rendering a FAB at the bottom right corner.
         *  The `top` setting renders the FAB at the top right corner.
         */
        this.position = 'bottom';
        /**
        * Indicates the color of your main action button .
        * The Default setting is `primary`, rendering a green background.
        * The `alternative` setting renders a white background.
        */
        this.color = 'primary';
        this.toggleIcon = true;
    }
    /**
     * Use this method to toggle (show/hide) the mini action buttons.
     */
    class_1.prototype.toggleAction = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.option == 'speeddial') {
                    this.toggleIcon = !this.toggleIcon;
                }
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.getIcon = function () {
        var icon;
        switch (this.option) {
            case 'speeddial':
                icon = this.toggleIcon ? this.icon : this.error_icon;
                break;
            case 'backtotop':
                icon = this.arrow_up;
        }
        return icon;
    };
    class_1.prototype.render = function () {
        var _this = this;
        return (h("div", { class: ['se-fab', "pos-" + this.position].join(' ') }, h("se-button", { color: this.color, "icon-only": "true", class: this.option == 'backtotop' ? 'backtotop' : '', option: 'fab', onClick: function () { return _this.toggleAction(); } }, h("se-icon", { slot: "icon", size: "medium" }, h("span", { innerHTML: this.getIcon() }))), this.option === 'speeddial' ?
            h("div", { class: ['mini-action-button', !this.toggleIcon ? SHOW_FAB : ''].join(' ') }, h("slot", null)) : ''));
    };
    return class_1;
}());
FabComponent.style = fabCss;
var fabItemCss = ".se-fab-item{width:40px;height:40px;font-size:24px;border-radius:50%;padding:0;margin:0 0 15px 0;-ms-flex-align:center;align-items:center;position:relative;display:-ms-flexbox;display:flex;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}.se-fab-item:hover,.se-fab-item:focus{-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.se-fab-item:active{background-color:#626469;background-color:var(--se-selected, #626469);color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF)}.se-fab-item:after{content:\"\";display:block;position:absolute;top:0;right:0;bottom:0;left:0}.se-fab-item .description{font-weight:300;line-height:1;border-radius:23.27px;font-size:12px;padding:5px 7px;margin-right:12px;position:absolute;right:100%;overflow:visible;white-space:nowrap;color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}.se-fab-item se-icon{font-family:\"se-icon\";padding:0 8px}::slotted(se-icon[slot=icon]){font-family:\"se-icon\";padding:0 8px}@media all and (-ms-high-contrast: none){.description{top:10px}}";
var FabItemComponent = /** @class */ (function () {
    function FabItemComponent(hostRef) {
        registerInstance(this, hostRef);
        this.didClick = createEvent(this, "didClick", 7);
    }
    FabItemComponent.prototype.toggle = function () {
        this.didClick.emit(this.el.innerText);
    };
    FabItemComponent.prototype.render = function () {
        var _this = this;
        return (h("div", { class: "se-fab-item", onClick: function () { return _this.toggle(); } }, h("span", { class: "description" }, h("slot", null)), this.icon ? h("se-icon", null, this.icon) : h("slot", { name: "icon" })));
    };
    Object.defineProperty(FabItemComponent.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    return FabItemComponent;
}());
FabItemComponent.style = fabItemCss;
export { FabComponent as se_fab, FabItemComponent as se_fab_item };
