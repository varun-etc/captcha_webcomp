import { r as registerInstance, h, H as Host, g as getElement } from './index-8c7316b3.js';
var appCss = ":host{width:100%}:root{--se-standard:#EDEDED;--se-alternative:#FFFFFF;--se-primary:#3DCD58;--se-secondary:#42B4E6;--se-success:#3DCD58;--se-warning:#E47F00;--se-error:#DC0A0A;--se-standard-contrast:#0F0F0F;--se-alternative-contrast:#0F0F0F;--se-primary-contrast:#FFFFFF;--se-secondary-contrast:#FFFFFF;--se-success-contrast:#FFFFFF;--se-warning-contrast:#0F0F0F;--se-error-contrast:#FFFFFF;--se-hover-standard:#CBCBCB;--se-hover-alternative:#CBCBCB;--se-hover-primary:#32AD3C;--se-hover-secondary:#0087CD;--se-hover-standard-contrast:#0F0F0F;--se-hover-alternative-contrast:#0F0F0F;--se-hover-primary-contrast:#FFFFFF;--se-hover-secondary-contrast:#FFFFFF;--se-selected:#626469;--se-selected-contrast:#FFFFFF;--se-focus:#434343;--se-focus-contrast:#FFFFFF;--se-background:#F7F7F7}.se-app-body{overflow:hidden;margin:0 !important;padding:0;position:absolute;top:0;bottom:0;left:0;right:0;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}body{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}.color-standard{color:#EDEDED;color:var(--se-standard, #EDEDED)}.bg-standard{background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}.color-alternative{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}.bg-alternative{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}.color-primary{color:#3DCD58;color:var(--se-primary, #3DCD58)}.bg-primary{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}.color-secondary{color:#42B4E6;color:var(--se-secondary, #42B4E6)}.bg-secondary{background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6)}.color-success{color:#3DCD58;color:var(--se-success, #3DCD58)}.bg-success{background-color:#3DCD58;background-color:var(--se-success, #3DCD58)}.color-warning{color:#E47F00;color:var(--se-warning, #E47F00)}.bg-warning{background-color:#E47F00;background-color:var(--se-warning, #E47F00)}.color-error{color:#DC0A0A;color:var(--se-error, #DC0A0A)}.bg-error{background-color:#DC0A0A;background-color:var(--se-error, #DC0A0A)}.color-standard-contrast{color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F)}.bg-standard-contrast{background-color:#0F0F0F;background-color:var(--se-standard-contrast, #0F0F0F)}.color-alternative-contrast{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}.bg-alternative-contrast{background-color:#0F0F0F;background-color:var(--se-alternative-contrast, #0F0F0F)}.color-primary-contrast{color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}.bg-primary-contrast{background-color:#FFFFFF;background-color:var(--se-primary-contrast, #FFFFFF)}.color-secondary-contrast{color:#FFFFFF;color:var(--se-secondary-contrast, #FFFFFF)}.bg-secondary-contrast{background-color:#FFFFFF;background-color:var(--se-secondary-contrast, #FFFFFF)}.color-success-contrast{color:#FFFFFF;color:var(--se-success-contrast, #FFFFFF)}.bg-success-contrast{background-color:#FFFFFF;background-color:var(--se-success-contrast, #FFFFFF)}.color-warning-contrast{color:#0F0F0F;color:var(--se-warning-contrast, #0F0F0F)}.bg-warning-contrast{background-color:#0F0F0F;background-color:var(--se-warning-contrast, #0F0F0F)}.color-error-contrast{color:#FFFFFF;color:var(--se-error-contrast, #FFFFFF)}.bg-error-contrast{background-color:#FFFFFF;background-color:var(--se-error-contrast, #FFFFFF)}.color-background{color:#F7F7F7;color:var(--se-background, #F7F7F7)}.bg-background{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:\"\";content:none}table{border-collapse:collapse;border-spacing:0}a{text-decoration:none}body,html{font-weight:300;font-size:16px;color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}body strong,body .bold,html strong,html .bold{font-weight:bold}body.small,body small,html.small,html small{line-height:1.2 !important;font-size:14px}body.nano,html.nano{font-size:12px}body.large,html.large{font-size:18px}body h1 a,body h2 a,body h3 a,body h4 a,body h5 a,body h6 a,html h1 a,html h2 a,html h3 a,html h4 a,html h5 a,html h6 a{font-weight:inherit}body h1,html h1{font-weight:300;line-height:50px;font-size:42px}body h2,html h2{font-weight:300;line-height:45px;font-size:37px}body h3,html h3{font-weight:300;line-height:40px;font-size:30px}body h4,html h4{font-weight:300;line-height:30px;font-size:22px}body h5,html h5{font-weight:300;line-height:25px;font-size:16px;font-weight:bold}body h6,html h6{font-weight:300;line-height:20px;font-size:14px;font-weight:bold}body p,html p{font-weight:300;font-size:16px}body p strong,body p .bold,html p strong,html p .bold{font-weight:bold}body p.small,body p small,html p.small,html p small{line-height:1.2 !important;font-size:14px}body p.nano,html p.nano{font-size:12px}body p.large,html p.large{font-size:18px}body em,html em{font-style:italic}strong,.bold{font-weight:500}small{font-size:75%}.light{font-weight:300}.thin{font-weight:200}@media only screen and (min-width: 360px){.flow-text{font-size:1.2rem}}@media only screen and (min-width: 390px){.flow-text{font-size:1.224rem}}@media only screen and (min-width: 420px){.flow-text{font-size:1.248rem}}@media only screen and (min-width: 450px){.flow-text{font-size:1.272rem}}@media only screen and (min-width: 480px){.flow-text{font-size:1.296rem}}@media only screen and (min-width: 510px){.flow-text{font-size:1.32rem}}@media only screen and (min-width: 540px){.flow-text{font-size:1.344rem}}@media only screen and (min-width: 570px){.flow-text{font-size:1.368rem}}@media only screen and (min-width: 600px){.flow-text{font-size:1.392rem}}@media only screen and (min-width: 630px){.flow-text{font-size:1.416rem}}@media only screen and (min-width: 660px){.flow-text{font-size:1.44rem}}@media only screen and (min-width: 690px){.flow-text{font-size:1.464rem}}@media only screen and (min-width: 720px){.flow-text{font-size:1.488rem}}@media only screen and (min-width: 750px){.flow-text{font-size:1.512rem}}@media only screen and (min-width: 780px){.flow-text{font-size:1.536rem}}@media only screen and (min-width: 810px){.flow-text{font-size:1.56rem}}@media only screen and (min-width: 840px){.flow-text{font-size:1.584rem}}@media only screen and (min-width: 870px){.flow-text{font-size:1.608rem}}@media only screen and (min-width: 900px){.flow-text{font-size:1.632rem}}@media only screen and (min-width: 930px){.flow-text{font-size:1.656rem}}@media only screen and (min-width: 960px){.flow-text{font-size:1.68rem}}@media only screen and (max-width: 360px){.flow-text{font-size:1.2rem}}.uppercase{text-transform:uppercase}body ::-webkit-scrollbar,html ::-webkit-scrollbar{height:12px;width:12px}body ::-webkit-scrollbar-track,body ::-webkit-scrollbar-thumb,html ::-webkit-scrollbar-track,html ::-webkit-scrollbar-thumb{border:4px solid transparent;background-clip:padding-box;border-radius:16px}body ::-webkit-scrollbar-track,html ::-webkit-scrollbar-track{background-color:#F7F7F7}body ::-webkit-scrollbar-thumb,html ::-webkit-scrollbar-thumb{background-color:#CBCBCB}body ::-webkit-scrollbar-thumb:hover,html ::-webkit-scrollbar-thumb:hover{background-color:#626469;background-color:var(--se-selected, #626469);border:2px solid transparent}.technical se-block ::slotted(se-block){border:4px solid red}";
var AppComponent = /** @class */ (function () {
    function AppComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Define the type of application. updating the option will impact the font used.
         * - `technical`: For technical application (i.e. EcoStuxure), the font used will be `Nunito`.
         * - `website` or `dcx`: For `se.com` application, the font used will be `Arial Rounded`.
         */
        this.option = 'technical';
    }
    AppComponent.prototype.updateBodyClass = function (newClass) {
        // Update the body class to make sure all component affected by the framework are affected by the font family
        if (document && document.body) {
            // Remove the class if already there
            ['se-font-technical', 'se-font-website'].forEach(function (classItem) {
                document.body.classList.remove(classItem);
            });
            // Add the new class
            document.body.classList.add(newClass);
        }
    };
    AppComponent.prototype.render = function () {
        var bodyClass = this.option === "technical" ? 'se-font-technical' : 'se-font-website';
        this.updateBodyClass(bodyClass);
        return h(Host, { class: ['se-app-body', this.option, bodyClass].join(' ') }, h("slot", null));
    };
    return AppComponent;
}());
AppComponent.style = appCss;
var blockCss = ":host{position:relative;display:-ms-flexbox;display:flex}:host(.block-flex){width:100%;height:100%;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}:host(.block-block){width:auto;height:auto}:host(.block-block) .block-body{overflow:unset}:host(.block-grid){width:100%;height:100%}:host(.block-grid) .block-body{overflow:unset}:host(.grid-large){grid-column:span 2;grid-row:span 2}:host(.grid-vertical){grid-row:span 2}:host(.grid-horizontal){grid-column:span 2}:host(a *:not(a)){color:initial;text-decoration:none}.clickable,.clickable-nobar{position:relative}.clickable:hover,.clickable-nobar:hover{cursor:pointer;-webkit-box-shadow:0 0 16px 2px rgba(0, 0, 0, 0.15);box-shadow:0 0 16px 2px rgba(0, 0, 0, 0.15)}.clickable:not(-nobar):hover:before{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);height:3px}.clickable:not(-nobar):before{content:\"\";background:rgba(255, 255, 255, 0);position:absolute;top:0;left:0;width:calc(100%);max-width:calc(100%);text-align:center;-webkit-transition:0.2s;transition:0.2s}.clickable.corner-none:before{border-radius:0 0 0 0}.clickable.corner-nano:before{border-radius:2px 2px 0 0}.clickable.corner-small:before{border-radius:4px 4px 0 0}.block-body{-webkit-transition:0.2s;transition:0.2s;overflow:auto;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}.block-body.basic{margin:0}.block-body.widget{margin:8px}.block-body.card{border-radius:4px;margin:16px;border:1px solid;border-color:#E6E6E6}.block-body.card-old{border-radius:4px;margin:16px;-webkit-box-shadow:0 0 1px 0 rgba(51, 51, 51, 0.14), 0 2px 7px 0 rgba(51, 51, 51, 0.2);box-shadow:0 0 1px 0 rgba(51, 51, 51, 0.14), 0 2px 7px 0 rgba(51, 51, 51, 0.2)}.block-body.corner-none{border-radius:0}.block-body.corner-nano{border-radius:2px}.block-body.corner-small{border-radius:4px}.block-body.margin-none{margin:0}.block-body.margin-small{margin:4px}.block-body.margin-medium{margin:8px}.block-body.margin-large{margin:16px}.block-body.margin-xlarge{margin:32px}.block-body.outline-standard{border:1px solid;border-color:#E6E6E6}.block-body.outline-primary{border:1px solid;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}.block-body.outline-secondary{border:1px solid;border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}.block-body.block-bg-standard{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}.block-body.block-bg-none{background-color:transparent}";
var BlockComponent = /** @class */ (function () {
    function BlockComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines whether or not a divider will be applied to the se-block header and footer.
         * `true` will add a divider to the se-block-header and se-block-footer, if they are present.
         * `false` will remove dividers on the se-block header and se-block-footer, if they are present.
         */
        this.divider = false;
        /**
         * Defines the se-block outline.
         * Default setting is `false`.
         * Setting this property to `true` will add a 1px border.
         */
        this.outline = false;
        /**
         * Defines the se-block outline color.
         * Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color.
         * `primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected.
         * `secondary` defines the outline color as `$se-sky-blue`.
         */
        this.outlineColor = "standard";
        /**
         * Defines the se-block item's ability to appear clickable / selectable.
         * Default setting is `false`, resulting in no hover effects on the block level.
         * `true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block.
         */
        this.clickable = false;
        /**
         * Defines clickable se-block item's bar on hover.
         * Default setting is `false`.
         * `true` renders a `$se-life-green` colored bar on a hover.
         */
        this.clickableBar = false;
        /**
         * Defines how to display the element.
         * `flex` is the default display.
         * `block` helps in specific cases. Make sure you know what you are doing.
         */
        this.display = "flex";
        /**
         * Optional property that defines the background color of the block.
         * Default setting is `alternative`, rendering the "alternative" theme background.
         * `none` has no background.
         * `standard` renders the "standard" theme background.
         */
        this.color = "alternative";
        /**
         * When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item.
         * Default setting is `false`, spanning 1 row and 1 column (1/1).
         * `true` spans 2 rows and 2 columns (2/2).
         * `vertical` spans 2 rows (2/1).
         * `horizontal` spans 2 columns (1/2).
         */
        this.enlarged = false;
        /**
         * Displays the loading icon if set to `true`.  Default setting is `false`.
         */
        this.loading = false;
        /**
         * Defines the visual appearance of a block.
         * Default setting is `basic`, which will remove any spacing.
         * `widget` will create a flat widget look and feel with a `medium` margin around it.
         * `card` will create a card look and feel with rounded corners, and with a `large` margin around it.
         * Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         */
        this.option = "basic";
    }
    BlockComponent.prototype.dividerDidChange = function () {
        this.updateItem();
    };
    BlockComponent.prototype.widthDidChange = function () {
        this.updateSize();
    };
    BlockComponent.prototype.heightDidChange = function () {
        this.updateSize();
    };
    BlockComponent.prototype.optionDidChange = function () {
        this.updateItem();
    };
    BlockComponent.prototype.componentWillLoad = function () {
        this.updateSize();
        this.updateItem();
    };
    BlockComponent.prototype.updateItem = function () {
        var _this = this;
        if (this.option !== undefined && this.divider === undefined) {
            if (this.option === "card" || this.option === "card-old") {
                this.divider = false;
            }
            else
                this.divider = true;
        }
        var childElms = "se-block-header, se-block-content, se-block-footer";
        Array.from(this.el.querySelectorAll(childElms)).forEach(function (item) {
            // have to do this because otherwise blocks inside other blocks get settings overridden by higher ancestors
            // Using "closest" function in case the current element is wrapped inside another one
            if (item.closest('se-block') === _this.el) {
                item.divider = _this.divider;
                !item.option ? item.option = _this.option : '';
            }
        });
    };
    BlockComponent.prototype.updateSize = function () {
        // reset all sizes first
        this.el.style.width = '';
        this.el.style.minWidth = '';
        this.el.style.height = '';
        this.el.style.minHeight = '';
        if (this.width) {
            this.el.style.width = this.width;
            this.el.style.minWidth = this.width;
        }
        if (this.height) {
            this.el.style.height = this.height;
            this.el.style.minHeight = this.width;
        }
    };
    BlockComponent.prototype.render = function () {
        var outlineColor = this.outlineColor ? "-" + this.outlineColor : '';
        var outline = this.outline === true ? "outline" + outlineColor : 'outline-false';
        var enlargedClass = "";
        if (this.display === "grid") {
            switch (this.enlarged) {
                case false:
                    break;
                case "vertical":
                    enlargedClass = "grid-vertical";
                    break;
                case "horizontal":
                    enlargedClass = "grid-horizontal";
                    break;
                default:
                    enlargedClass = "grid-large";
                    break;
            }
        }
        return (h(Host, { class: [
                this.display ? "block-" + this.display : '',
                enlargedClass,
                "block-bg-" + this.color
            ].join(' ') }, h("div", { class: [
                'block-body',
                this.clickable === true ? "" + (this.clickableBar !== false ? "clickable" : "clickable-nobar") : '',
                this.option,
                this.outline !== undefined ? outline : '',
                this.corner !== undefined ? "corner-" + this.corner : '',
                this.margin !== undefined ? "margin-" + this.margin : '',
                this.color !== undefined ? "block-bg-" + this.color : 'block-bg-alternative'
            ].join(' ') }, this.loading ? h("se-loading", { loading: this.loading }) : '', h("slot", null))));
    };
    Object.defineProperty(BlockComponent.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BlockComponent, "watchers", {
        get: function () {
            return {
                "divider": ["dividerDidChange"],
                "width": ["widthDidChange"],
                "height": ["heightDidChange"],
                "option": ["optionDidChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return BlockComponent;
}());
BlockComponent.style = blockCss;
var blockContentCss = ":host{overflow-x:hidden;position:relative;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}.se-block-content{padding:8px 16px}.fill-content{padding:0}";
var BlockContent = /** @class */ (function () {
    function BlockContent(hostRef) {
        registerInstance(this, hostRef);
    }
    BlockContent.prototype.render = function () {
        return (h("div", { class: ['se-block-content', this.option ? this.option + "-content" : ''].join(' ') }, h("slot", null)));
    };
    Object.defineProperty(BlockContent.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    return BlockContent;
}());
BlockContent.style = blockContentCss;
var blockFooterCss = ".se-block-footer{position:relative;padding:4px;min-height:40px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.flex{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}.card{border-top:none}.column{-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}";
var BlockFooter = /** @class */ (function () {
    function BlockFooter(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the direction of the flex element.
         * Default setting is `row`. This is perfect to use with flex content.
         * `column` is useful in specific cases. Make sure you know what you are doing.
         */
        this.direction = "row";
    }
    BlockFooter.prototype.render = function () {
        return (h(Host, null, this.divider ? h("se-divider", null) : null, h("div", { class: ['se-block-footer', this.option, this.direction].join(' ') }, h("div", { class: "flex" }, h("slot", { name: "start" })), h("slot", null))));
    };
    Object.defineProperty(BlockFooter.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    return BlockFooter;
}());
BlockFooter.style = blockFooterCss;
var blockHeaderCss = ".se-block-header{position:relative;padding:4px 4px 2px 8px;font-size:20px;min-height:40px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.flex{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}div.middle{font-weight:300;line-height:30px;font-size:22px;margin:8px}.card{padding-bottom:4px}.fill{padding:0}.fill div.middle{margin:0;max-width:100%}::slotted(h1),::slotted(h2),::slotted(h3),::slotted(h4),::slotted(h5),::slotted(h6){margin-top:0 !important;margin-bottom:0 !important}";
var BlockHeader = /** @class */ (function () {
    function BlockHeader(hostRef) {
        registerInstance(this, hostRef);
    }
    BlockHeader.prototype.render = function () {
        return (h(Host, null, h("div", { class: ['se-block-header', this.option].join(' ') }, h("slot", { name: "start" }), h("div", { class: "flex middle" }, h("slot", null)), h("slot", { name: "end" })), this.divider ? h("se-divider", null) : null));
    };
    Object.defineProperty(BlockHeader.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    return BlockHeader;
}());
BlockHeader.style = blockHeaderCss;
var containerCss = ":host{-webkit-box-sizing:border-box;box-sizing:border-box;overflow:auto}:host(.absolute){position:absolute;top:0;bottom:0;left:0;right:0}:host(.relative){position:relative}:host(.column-dir){-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}:host(.row-dir){-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}:host(.flex-display){-ms-flex-wrap:nowrap;flex-wrap:nowrap;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex}:host(.block-display){display:block !important;width:100%}:host(.grid-display){display:grid;width:100%;width:-webkit-fill-available}:host(.fill-content:not(.block-display)){padding:0;height:100%}:host(.card-content:not(.block-display)){padding:8px}:host(.ct-padding-none),:host(.ct-padding-none.card-content:not(.block-display)),:host(.ct-padding-none.fill-content:not(.block-display)),:host(.ct-padding-none.widget-content:not(.block-display)){padding:0}:host(.ct-padding-small),:host(.ct-padding-small.card-content:not(.block-display)),:host(.ct-padding-small.fill-content:not(.block-display)),:host(.widget-content:not(.block-display)){padding:4px}:host(.ct-padding-medium),:host(.ct-padding-medium.card-content:not(.block-display)),:host(.ct-padding-medium.fill-content:not(.block-display)),:host(.ct-padding-medium.widget-content:not(.block-display)){padding:8px}:host(.ct-padding-large),:host(.ct-padding-large.card-content:not(.block-display)),:host(.ct-padding-large.fill-content:not(.block-display)),:host(.ct-padding-large.widget-content:not(.block-display)){padding:16px}:host(.ct-padding-xlarge),:host(.ct-padding-xlarge.card-content:not(.block-display)),:host(.ct-padding-xlarge.fill-content:not(.block-display)),:host(.ct-padding-xlarge.widget-content:not(.block-display)){padding:32px}:host(.centered-content){display:block}:host(.centered-content) .wrapper-center{padding-right:16px;padding-left:16px;margin-right:auto;margin-left:auto}@media (min-width: 1100px){:host(.centered-content) .wrapper-center{max-width:1180px}}:host(.ct-bg-standard){background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}:host(.ct-bg-alternative){color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}";
var ContainerComponent = /** @class */ (function () {
    function ContainerComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the inner appearance of a container.
         * `fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set.
         * `widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set.
         * `centered` centers the container so the content does not exceed a maximum width.
         * `card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set.
         * Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         * `inherited` will insure that no specific style is applied to the container.
         */
        this.option = "fill";
        /**
         * In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box.
         * `relative` is the default position. This is perfect to use with flex content.
         * `absolute` is useful in specific cases. Make sure you know what you are doing.
         */
        this.position = "relative";
        /**
         * Defines the direction of the flex element.
         * `row` is the default direction. This is perfect to use with flex content.
         * `column` is useful in specific cases. Make sure you know what you are doing.
         */
        this.direction = "row";
        /**
         * Defines how to display the element.
         * `flex` is the default display.
         * `block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block".
         */
        this.display = "flex";
        /**
         * When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there.
         * Default is `350px`.
         */
        this.columnSize = '350px';
        /**
         * When in `display="grid"`, defines the height of each container.  Default is `300px`.
         */
        this.rowSize = '300px';
    }
    ContainerComponent.prototype.optionDidChange = function () {
        if (this.color === undefined || this.color === null) {
            if (this.option === "widget") {
                this.color = "standard";
                this.setProps();
            }
            else if (this.option === "card") {
                this.color = "alternative";
                this.setProps();
            }
        }
    };
    ContainerComponent.prototype.displayDidChange = function () {
        var _this = this;
        // Only direct children will be impacted by the display property
        Array.from(this.el.querySelectorAll("se-container > se-block")).forEach(function (item) {
            item.display = _this.display;
        });
    };
    ContainerComponent.prototype.columnSizeDidChange = function () {
        if (this.display === 'grid') {
            this.el.style.gridTemplateColumns = "repeat(auto-fit, minmax(" + this.columnSize + ", 1fr))";
        }
    };
    ContainerComponent.prototype.rowSizeDidChange = function () {
        if (this.display === 'grid') {
            this.el.style.gridAutoRows = this.rowSize;
        }
    };
    ContainerComponent.prototype.setProps = function () {
        var _this = this;
        Array.from(this.el.querySelectorAll("se-container > se-block")).forEach(function (item) {
            if (_this.option === "widget" || _this.option === "card" || _this.option === "card-old")
                item.option = _this.option;
        });
    };
    ContainerComponent.prototype.componentWillLoad = function () {
        this.setProps(); // not having this called here makes the original/new function not actually work as expected. the original function would return this.option as undefined.
        this.optionDidChange();
        this.displayDidChange();
        this.columnSizeDidChange();
        this.rowSizeDidChange();
    };
    ContainerComponent.prototype.render = function () {
        return (h(Host, { class: [
                this.option !== "card-old" ? this.option + "-content" : "card-content",
                this.position,
                this.color ? "ct-bg-" + this.color : '',
                this.direction + "-dir",
                this.display + "-display",
                this.padding ? "ct-padding-" + this.padding : ''
            ]
                .join(' ') }, this.option === "centered" ? h("div", { class: "wrapper-center" }, h("slot", null)) : h("slot", null)));
    };
    Object.defineProperty(ContainerComponent.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerComponent, "watchers", {
        get: function () {
            return {
                "option": ["optionDidChange"],
                "display": ["displayDidChange"],
                "columnSize": ["columnSizeDidChange"],
                "rowSize": ["rowSizeDidChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return ContainerComponent;
}());
ContainerComponent.style = containerCss;
var dividerCss = ".se-divider{display:block;margin:0}.se-divider.horizontal{width:100%;border-top:1px solid}.se-divider.vertical,.se-divider.inset{height:100%;border-right:1px solid}.se-divider.standard{border-color:#E6E6E6}.se-divider.alternative{border-color:#FFFFFF;border-color:var(--se-alternative, #FFFFFF)}";
var DividerComponent = /** @class */ (function () {
    function DividerComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
         */
        this.option = "horizontal";
        /**
         * Indicates the color schema of your divider line.
         * Default setting is `standard`, rendering a light gray colored line.
         * The `alternative` property sets a white colored divider line.
         */
        this.color = "standard";
    }
    DividerComponent.prototype.render = function () {
        return h("div", { class: ['se-divider', this.option, this.color].join(' ') });
    };
    return DividerComponent;
}());
DividerComponent.style = dividerCss;
export { AppComponent as se_app, BlockComponent as se_block, BlockContent as se_block_content, BlockFooter as se_block_footer, BlockHeader as se_block_header, ContainerComponent as se_container, DividerComponent as se_divider };
