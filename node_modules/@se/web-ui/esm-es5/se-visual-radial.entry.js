import { r as registerInstance, h, H as Host } from './index-8c7316b3.js';
var visualRadialCss = ".visual-radial-wrapper{position:relative}.se-visual-radial,.radial-data{position:absolute;top:0;bottom:0;left:0;right:0}.se-visual-radial{-webkit-transform:rotate(-90deg);transform:rotate(-90deg);border-radius:100%}.radial-data{color:#333333;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;width:100%;height:100%}.radial-value{-ms-flex-item-align:center;align-self:center}.radial-label{font-size:12px;-ms-flex-item-align:center;align-self:center}.small.visual-radial-wrapper{width:82px;height:82px}.small .se-visual-radial{stroke-dasharray:208 208}.small .radial-value{font-size:26px}.large.visual-radial-wrapper{width:164px;height:164px}.large .se-visual-radial{stroke-dasharray:415 415}.large .radial-value{font-size:52px}";
var VisualRadialComponent = /** @class */ (function () {
    function VisualRadialComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Determines the visual size of your circular progress bar.  The default setting is `large`.
         */
        this.size = 'large';
        /**
         * Sets the color of the visual "progress bar".
         * The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58).
         * By default, the progress bar will have a green color.
         */
        this.secolor = 'primary';
        this.isHexColor = false;
    }
    VisualRadialComponent.prototype.sizeDidChange = function () {
        this.svgSize = (this.size == 'small') ? 82 : 164;
        this.circleDimensions = (this.size == 'small') ? 41 : 82;
        this.circleRadius = (this.size == 'small') ? 33 : 66;
        var circumference = (this.size == 'small') ? 66 * Math.PI : 132 * Math.PI;
        this.offset = circumference - this.percentage / 100 * circumference;
    };
    VisualRadialComponent.prototype.colorDidChange = function () {
        this.isHexColor = (this.secolor && this.secolor.indexOf('#') !== -1) ? true : false;
    };
    VisualRadialComponent.prototype.componentDidLoad = function () {
        this.colorDidChange();
        this.sizeDidChange();
    };
    VisualRadialComponent.prototype.render = function () {
        return (h(Host, { class: !this.isHexColor ? "color-" + this.secolor : '' }, h("div", { class: ["visual-radial-wrapper", this.size].join(' ') }, h("svg", { class: "se-visual-radial", height: this.svgSize, width: this.svgSize }, h("circle", { cx: this.circleDimensions, cy: this.circleDimensions, r: this.circleRadius, stroke: "#f7f7f7", "stroke-width": "8", fill: "transparent" }), h("circle", { cx: this.circleDimensions, cy: this.circleDimensions, r: this.circleRadius, stroke: this.isHexColor ? this.secolor : 'currentColor', "stroke-width": "8", fill: "transparent", style: { strokeDashoffset: String(this.offset) } }), "Sorry, your browser does not support inline SVG."), h("svg", { height: this.svgSize, width: this.svgSize }, h("text", null, this.value ? h("tspan", { class: "radial-value", x: "50%", y: "50%", "text-anchor": "middle" }, this.value) : '', h("tspan", { class: "radial-label", x: "50%", y: this.value ? "70%" : "53%", "text-anchor": "middle" }, this.label))))));
    };
    Object.defineProperty(VisualRadialComponent, "watchers", {
        get: function () {
            return {
                "size": ["sizeDidChange"],
                "secolor": ["colorDidChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return VisualRadialComponent;
}());
VisualRadialComponent.style = visualRadialCss;
export { VisualRadialComponent as se_visual_radial };
