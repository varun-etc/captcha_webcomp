var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, h, g as getElement, c as createEvent, H as Host } from './index-8c7316b3.js';
var stepperCss = "nav{color:#3DCD58;color:var(--se-primary, #3DCD58)}ol{display:-ms-flexbox;display:flex;padding:16px;margin-bottom:0;height:24px}.stepper-item-wrapper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}.indicator{text-align:center;font-size:14px;line-height:24px;font-weight:700;width:24px;height:24px;border-radius:100%;color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.indicator.se-icon{font-family:\"se-icon\";font-size:24px;font-weight:400}.indicator.se-icon:after{content:\"notification_ok\";font-size:32px;position:relative;right:28px}@supports (-ms-ime-align: auto){.indicator.se-icon:after{top:1px}}@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){.indicator.se-icon:after{top:1px}}.stepper-item{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;white-space:nowrap}.stepper-item:hover{cursor:pointer}.stepper-item.disabled{pointer-events:none}.stepper-item-label{display:inline;color:#CBCBCB;color:var(--se-hover-standard, #CBCBCB);font-size:16px;font-weight:700;line-height:19px;margin:0 8px}.stepper-item-label:hover{font-weight:400}se-divider{width:25px;margin-right:8px}.primary .selected .indicator{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}.primary .selected .stepper-item-label{color:#434343;color:var(--se-focus, #434343)}.alternative .selected .indicator{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#3DCD58;color:var(--se-primary, #3DCD58)}.alternative .selected .stepper-item-label{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}";
var StepperComponent = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.stepperItems = [];
        /**
         * Sets the background color of your stepper.
         * The default setting is `primary`, implementing a green background for the stepper visual items.
         * The `alternative` setting implements a white background for the stepper visual items.  This setting is best used against a gray background.
         */
        this.color = 'primary';
        /**
         * Defines if the stepper items must be completed sequentially.
         * The default setting is `true`, each stepper item must be validated before advancing to the next step.
         * `false` allows each step to be selected in any order.
         */
        this.linear = true;
    }
    /**
     * Call the `reset` method to reset the stepper to the indicated step.  This also invalidates any validated steps.
     * It no step parameter is provided, it will reset to the first stepper item.
     */
    class_1.prototype.reset = function (step) {
        if (step === void 0) { step = 1; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (step >= this.getItemStep(this.selectedItem)) {
                    return [2 /*return*/]; // don't advance the stepper when clicking the reset button
                }
                this.stepperItems.forEach(function (item) {
                    if (_this.getItemStep(item) >= step) {
                        item.validated = false;
                    }
                });
                this.selectStep(this.stepperItems[step - 1]);
                return [2 /*return*/];
            });
        });
    };
    /**
     * Call the `previous` method to navigate to the previous step from the step that is currently selected.
     */
    class_1.prototype.previous = function () {
        return __awaiter(this, void 0, void 0, function () {
            var index;
            return __generator(this, function (_a) {
                // do not trigger this method when the first stepper item is the active item
                if (this.getItemStep(this.selectedItem) > 1) {
                    index = this.stepperItems.indexOf(this.selectedItem);
                    this.selectStep(this.stepperItems[index - 1]);
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Call the `next` method to navigate to the next step from the step that is currently selected.
     * This will not work in linear mode if the next step is not validated.
     */
    class_1.prototype.next = function (validate) {
        return __awaiter(this, void 0, void 0, function () {
            var index;
            return __generator(this, function (_a) {
                if (validate) {
                    this.selectedItem.validated = true;
                }
                if (!this.linear || this.selectedItem.validated) {
                    index = this.stepperItems.indexOf(this.selectedItem);
                    this.selectStep(this.stepperItems[index + 1]);
                }
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.selectStep = function (item) {
        this.selectedItem.active = false;
        this.selectedItem = item;
        this.selectedItem.active = true;
    };
    class_1.prototype.itemValidated = function (value) {
        this.validatedChanged = value;
    };
    class_1.prototype.getItemStep = function (item) {
        return this.stepperItems.indexOf(item) + 1;
    };
    class_1.prototype.checkIfPreviousItemValidated = function (item) {
        if (this.getItemStep(item) > 1 && this.linear) {
            return !this.stepperItems[this.stepperItems.indexOf(item) - 1].validated;
        }
        return false;
    };
    class_1.prototype.renderList = function () {
        var _this = this;
        return this.stepperItems.map(function (item) {
            return [
                h("li", { class: ["stepper-item-wrapper", (_this.getItemStep(_this.selectedItem) === _this.getItemStep(item) || item.validated) ? "selected" : ''].join(' ') }, h("div", { class: ["stepper-item", _this.checkIfPreviousItemValidated(item) ? "disabled" : ''].join(' '), onClick: function () { return _this.selectStep(item); } }, h("span", { class: ["indicator", item.validated && !item.active ? "se-icon" : ''].join(' ') }, _this.getItemStep(item)), h("span", { class: "stepper-item-label" }, item.label)), _this.getItemStep(item) !== _this.stepperItems.length ? h("se-divider", null) : '')
            ];
        });
    };
    class_1.prototype.componentDidLoad = function () {
        var _this = this;
        this.stepperItems = Array.from(this.el.querySelectorAll('se-stepper-item'));
        this.stepperItems.forEach(function (item) {
            if (_this.linear && !item.validated) {
                item.validated = false;
            }
        });
        this.selectedItem = this.stepperItems[0];
        this.selectedItem.active = true;
    };
    class_1.prototype.render = function () {
        return [
            h("nav", { class: this.color }, h("ol", null, this.renderList())),
            h("slot", null)
        ];
    };
    Object.defineProperty(class_1.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
StepperComponent.style = stepperCss;
var stepperItemCss = ":host(.navitem-hidden){display:none !important}";
var StepperItemComponent = /** @class */ (function () {
    function StepperItemComponent(hostRef) {
        registerInstance(this, hostRef);
        this.didValidate = createEvent(this, "didValidate", 7);
    }
    StepperItemComponent.prototype.validatedDidChange = function () {
        this.didValidate.emit(this.validated);
    };
    StepperItemComponent.prototype.render = function () {
        return (h(Host, { class: [this.active ? 'active' : 'navitem-hidden'].join(' ') }, h("slot", null)));
    };
    Object.defineProperty(StepperItemComponent, "watchers", {
        get: function () {
            return {
                "validated": ["validatedDidChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return StepperItemComponent;
}());
StepperItemComponent.style = stepperItemCss;
export { StepperComponent as se_stepper, StepperItemComponent as se_stepper_item };
