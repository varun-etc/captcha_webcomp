import { r as registerInstance, h, H as Host, g as getElement, c as createEvent } from './index-8c7316b3.js';
import { a as arrow2_right } from './arrow2_right-4a0b22c1.js';
var listCss = ":host{width:100%;height:100%;position:relative;overflow:auto;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}";
var ListComponent = /** @class */ (function () {
    function ListComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the style of the list.  The default setting is `classic`.
         */
        this.option = "classic";
        /**
         * Defines if list groups can be collapsed.  The default setting is `true`.
         */
        this.canCollapse = true;
    }
    ListComponent.prototype.optionDidChange = function () {
        var _this = this;
        Array.from(this.el.querySelectorAll('se-list-item, se-list-group')).forEach(function (item) {
            var closeList = item.closest('se-list');
            // Make sure we only change the style of the current list. Handy if list has a dropdown with a different list style
            if (closeList === _this.el) {
                item.option = _this.option;
            }
        });
    };
    ListComponent.prototype.canCollapseDidChange = function () {
        var _this = this;
        Array.from(this.el.querySelectorAll('se-list-group')).forEach(function (item) {
            item.canCollapse = _this.canCollapse;
        });
    };
    ListComponent.prototype.componentWillLoad = function () {
        this.optionDidChange();
        this.canCollapseDidChange();
    };
    ListComponent.prototype.render = function () {
        return h(Host, { role: "list" }, h("slot", null));
    };
    Object.defineProperty(ListComponent.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListComponent, "watchers", {
        get: function () {
            return {
                "option": ["optionDidChange"],
                "canCollapse": ["canCollapseDidChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return ListComponent;
}());
ListComponent.style = listCss;
var arrow2Down = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1024 1024\"><path d=\"M657 432c8 8 8 22 0 30L527 592c-5 4-10 6-15 6-6 0-11-2-16-6L366 462c-8-8-8-22 0-30 9-8 22-8 30 0l116 115 115-115c8-8 21-8 30 0z\"/></svg>";
var arrow2Up = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1024 1024\"><path d=\"M657 562c8 8 8 22 0 30-4 4-10 6-15 6-6 0-11-2-15-6L512 477 396 592c-4 4-9 6-15 6-5 0-11-2-15-6-8-8-8-22 0-30l130-130c9-8 22-8 31 0z\"/></svg>";
var listGroupCss = ":host{margin:0;font-weight:lighter;display:-ms-flexbox;display:flex}:host(.hide-nav-icon) se-icon{display:none}:host(.sidemenu-list-item) .nav-content{font-weight:500}:host(.sidemenu-list-item) .button{border-bottom:1px solid #E6E6E6}.se-list-item{width:100%;width:-webkit-fill-available;-webkit-transition:0.2s;transition:0.2s}.se-list-item.button.classic,.se-list-item.button.nav{min-height:47px;height:20px;max-width:100%}.se-list-item.classic.selected,.se-list-item.dropdown.selected{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}.se-list-item.classic.selected:hover,.se-list-item.classic.selected:focus,.se-list-item.dropdown.selected:hover,.se-list-item.dropdown.selected:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.se-list-item.nav.selected{color:#3DCD58;color:var(--se-primary, #3DCD58)}.se-list-item.treeview{border-bottom:0;padding:4px 0}.se-list-item.treeview .nav-content{padding-left:12px}.se-list-item.treeview .nav-icon{margin-left:2px;margin-right:-8px}.se-list-item.treeview.selected{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}.se-list-item.treeview.selected:hover,.se-list-item.treeview.selected:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.se-list-item.dropdown{min-height:32px;max-width:100%;border-bottom:none;padding-left:0}.se-list-item.dropdown .nav-content{padding:6px 10px}.se-list-item.dropdown .nav-content .list-item-label{font-size:16px;line-height:20px}.se-list-item.dropdown .nav-icon{margin-right:0;margin-left:4px}.se-list-item.headline{min-height:42px;height:42px}.se-list-item.headline .nav-content small{padding-bottom:2px}.button{-webkit-box-sizing:border-box;box-sizing:border-box;border:none;margin:0;padding:0;overflow:visible;position:relative;outline:none;background:transparent;width:100%;color:inherit;font:inherit;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;text-align:left;text-align:start;border-bottom:1px solid #E6E6E6;text-decoration:none}.button:not([disabled]){cursor:pointer}.button:not([disabled]):hover,.button:not([disabled]):focus{background-color:#EDEDED}.selectedBar{position:absolute;top:0;bottom:0;left:0;width:5px;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}.nav-icon{margin:-1px -12px 0 8px}.nav-content{min-width:0;padding:0 16px;margin:0;overflow:hidden;font-weight:300;font-size:16px;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-moz-align-items:start center;-ms-flex-align:start center;align-items:start center}.nav-content div,.nav-content small{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.nav-content .list-item-label{line-height:24px}.nav-content small{font-size:14px;line-height:14px}se-list-item .nav-icon{margin-left:18px}:host{-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}.group-item{overflow:unset;padding-bottom:0}.se-list-group{list-style-type:none;margin:0;padding:0}.se-list-group.button .list-group-label{line-height:24px}.se-list-group.button.collapsed+.group-item{display:none}.se-list-group.button.selected{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}.se-list-group.button.selected:hover,.se-list-group.button.selected:focus{background-color:#434343}.se-list-group.button.selectedChild{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}.se-list-group.button.selectedChild:hover,.se-list-group.button.selectedChild:focus{background-color:#434343;background-color:var(--se-focus, #434343)}.se-list-group.button.classic,.se-list-group.button.nav{min-height:47px;height:20px;max-width:100%}.se-list-group.button.treeview{border-bottom:0;padding:4px 0}.se-list-group.button.treeview>*:first-child{padding-left:4px}.se-list-group.button.treeview .nav-icon{margin-right:0}.se-list-group.button.treeview .nav-content{padding-left:8px}.se-list-group.button.treeview .treeview-collapse-icon{margin-left:2px}.se-list-group.button.treeview+div se-list-item{padding-left:6px}.se-list-group.button.headline{height:47px;background-color:#F7F7F7}.se-list-group.button.headline .nav-content{font-size:16px}.se-list-group.button.dropdown{margin-top:-1px}";
var ListGroupComponent = /** @class */ (function () {
    function ListGroupComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines if the item group is collapsed/closed. The default setting is `false`.
         */
        this.collapsed = false;
        /**
         * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        this.indentation = 0;
        /**
         * Defines if list groups can be collapsed, true by default.
         */
        this.canCollapse = true;
        this.didGroupClick = createEvent(this, "didGroupClick", 7);
        this.didGroupCollapse = createEvent(this, "didGroupCollapse", 7);
    }
    ListGroupComponent.prototype.collapsedChanged = function () {
        this.checkSelected();
    };
    ListGroupComponent.prototype.ChildUpdated = function () {
        this.checkSelected();
    };
    ListGroupComponent.prototype.checkSelected = function () {
        var _this = this;
        if (!this.collapsed) {
            this.selectedChild = false;
        }
        else {
            Array.from(this.el.querySelectorAll("se-list-item, se-list-group")).forEach(function (item) {
                if (item.selected || item.selectedChild) {
                    _this.selectedChild = true;
                }
            });
        }
    };
    ListGroupComponent.prototype.toggleGroupButton = function () {
        if (this.option !== 'treeview') {
            this.collapsed = !this.collapsed;
            this.didGroupCollapse.emit({ collapsed: this.collapsed });
        }
        this.didGroupClick.emit();
    };
    ListGroupComponent.prototype.toggleCollapseTreeview = function () {
        // called only from treeview
        this.collapsed = !this.collapsed;
        this.didGroupCollapse.emit({ collapsed: this.collapsed });
    };
    ListGroupComponent.prototype.setButtonId = function () {
        var id = this.el.getAttribute('id');
        if (id) {
            this.innerId = "wc-" + id;
        }
    };
    ListGroupComponent.prototype.getClosestParent = function () {
        // get the closest between se-list or se-list-group
        return this.el.parentElement.closest("se-list, se-list-group");
    };
    ListGroupComponent.prototype.getParentConfig = function () {
        var closest = this.getClosestParent() || {};
        var indentation = closest.indentation;
        if (indentation !== null && indentation !== undefined) {
            this.indentation = indentation + 1;
        }
        if (closest.option) {
            this.option = closest.option;
        }
    };
    ListGroupComponent.prototype.componentWillLoad = function () {
        this.getParentConfig();
        this.hasIcon = !!this.icon || !!this.el.querySelector('[slot="icon"]');
    };
    ListGroupComponent.prototype.componentDidLoad = function () {
        this.setButtonId();
    };
    ListGroupComponent.prototype.render = function () {
        var _this = this;
        var title = this.item;
        var myDescription = null;
        if (!!this.description) {
            myDescription = h("small", null, this.description);
            title = title + ", " + this.description;
        }
        // The button section is a copy of the list item. External component cannot be used inside a component (DOM issue)
        return (h(Host, { role: "listitem", option: this.option }, h("button", { "aria-expanded": "" + this.collapsed, title: title, id: this.innerId, class: ['se-list-group', this.option, this.collapsed ? "collapsed" : '', this.option, this.selected ? "selected" : '', this.selectedChild ? "selectedChild" : '', "button"].join(' '), style: { paddingLeft: 20 * this.indentation + "px" }, onClick: function () { return _this.toggleGroupButton(); }, disabled: !this.canCollapse }, this.option === "nav" && this.selected && h("div", { class: "selectedBar" }), this.option === 'treeview' ? h("se-icon", { class: "treeview-collapse-icon", onClick: function (e) { e.stopPropagation(); _this.toggleCollapseTreeview(); }, style: { paddingLeft: "calc(" + 8 * this.indentation + "px)" } }, h("span", { innerHTML: this.collapsed ? arrow2_right : arrow2Down })) : '', this.hasIcon &&
            h("div", { class: "nav-icon" }, this.icon && h("se-icon", { color: this.iconColor }, this.icon), h("slot", { name: "icon" })), h("div", { class: "nav-content" }, h("div", { class: "list-group-label" }, this.item), myDescription), this.option !== "treeview" && this.canCollapse
            ? h("se-icon", { class: "standard-collapse-icon", size: "medium" }, h("span", { innerHTML: this.collapsed ? arrow2Down : arrow2Up }))
            : ''), h("div", { role: "list", class: ["se-list-group", "group-item", this.option].join(' ') }, h("slot", null))));
    };
    Object.defineProperty(ListGroupComponent.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListGroupComponent, "watchers", {
        get: function () {
            return {
                "collapsed": ["collapsedChanged"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return ListGroupComponent;
}());
ListGroupComponent.style = listGroupCss;
var listItemCss = ":host{margin:0;font-weight:lighter;display:-ms-flexbox;display:flex}:host(.hide-nav-icon) se-icon{display:none}:host(.sidemenu-list-item) .nav-content{font-weight:500}:host(.sidemenu-list-item) .button{border-bottom:1px solid #E6E6E6}.se-list-item{width:100%;width:-webkit-fill-available;-webkit-transition:0.2s;transition:0.2s}.se-list-item.button.classic,.se-list-item.button.nav{min-height:47px;height:20px;max-width:100%}.se-list-item.classic.selected,.se-list-item.dropdown.selected{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}.se-list-item.classic.selected:hover,.se-list-item.classic.selected:focus,.se-list-item.dropdown.selected:hover,.se-list-item.dropdown.selected:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.se-list-item.nav.selected{color:#3DCD58;color:var(--se-primary, #3DCD58)}.se-list-item.treeview{border-bottom:0;padding:4px 0}.se-list-item.treeview .nav-content{padding-left:12px}.se-list-item.treeview .nav-icon{margin-left:2px;margin-right:-8px}.se-list-item.treeview.selected{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}.se-list-item.treeview.selected:hover,.se-list-item.treeview.selected:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.se-list-item.dropdown{min-height:32px;max-width:100%;border-bottom:none;padding-left:0}.se-list-item.dropdown .nav-content{padding:6px 10px}.se-list-item.dropdown .nav-content .list-item-label{font-size:16px;line-height:20px}.se-list-item.dropdown .nav-icon{margin-right:0;margin-left:4px}.se-list-item.headline{min-height:42px;height:42px}.se-list-item.headline .nav-content small{padding-bottom:2px}.button{-webkit-box-sizing:border-box;box-sizing:border-box;border:none;margin:0;padding:0;overflow:visible;position:relative;outline:none;background:transparent;width:100%;color:inherit;font:inherit;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;text-align:left;text-align:start;border-bottom:1px solid #E6E6E6;text-decoration:none}.button:not([disabled]){cursor:pointer}.button:not([disabled]):hover,.button:not([disabled]):focus{background-color:#EDEDED}.selectedBar{position:absolute;top:0;bottom:0;left:0;width:5px;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}.nav-icon{margin:-1px -12px 0 8px}.nav-content{min-width:0;padding:0 16px;margin:0;overflow:hidden;font-weight:300;font-size:16px;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-moz-align-items:start center;-ms-flex-align:start center;align-items:start center}.nav-content div,.nav-content small{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.nav-content .list-item-label{line-height:24px}.nav-content small{font-size:14px;line-height:14px}se-list-item .nav-icon{margin-left:18px}";
var ListItemComponent = /** @class */ (function () {
    function ListItemComponent(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        this.indentation = 0;
        this.didSelectedChange = createEvent(this, "didSelectedChange", 7);
    }
    ListItemComponent.prototype.SelectedDidChange = function () {
        this.didSelectedChange.emit();
    };
    ListItemComponent.prototype.setButtonId = function () {
        var id = this.el.getAttribute('id');
        if (id) {
            this.innerId = "wc-" + id;
        }
    };
    ListItemComponent.prototype.getClosestParent = function () {
        // get the closest between se-list or se-list-group
        return this.el.parentElement.closest("se-list, se-list-group");
    };
    ListItemComponent.prototype.getParentConfig = function () {
        var closest = this.getClosestParent() || {};
        var indentation = closest.indentation;
        if (indentation !== null && indentation !== undefined) {
            this.indentation = indentation + 1;
        }
        if (closest.option) {
            this.option = closest.option;
        }
    };
    ListItemComponent.prototype.componentWillLoad = function () {
        this.getParentConfig();
    };
    ListItemComponent.prototype.componentDidLoad = function () {
        this.setButtonId();
    };
    ListItemComponent.prototype.render = function () {
        var _a;
        var myDescription = null;
        var title = this.item;
        if (!!this.description) {
            myDescription = h("small", null, this.description);
            title = title + ", " + this.description;
        }
        var TagType = this.href === undefined ? 'button' : 'a';
        var attrs = (TagType === 'a') ? { href: this.href } : {};
        var icon = this.option !== "treeview" ?
            h("se-icon", { color: this.iconColor }, this.icon)
            :
                this.indentation !== 0 ?
                    h("se-icon", { color: this.iconColor, style: { paddingLeft: "8px" } }, this.icon)
                    :
                        h("se-icon", { color: this.iconColor }, this.icon);
        var padding = this.option !== "treeview" ? 20 : 24;
        return (h(Host, { role: "listitem" }, h(TagType, Object.assign({}, attrs, { title: title, class: (_a = { "selected": this.selected }, _a["button"] = true, _a[this.option] = true, _a["se-list-item"] = true, _a), style: { paddingLeft: padding * this.indentation + "px" }, id: this.innerId }), (this.option === "nav" && this.selected) ? h("div", { class: "selectedBar" }) : '', h("div", { class: "nav-icon" }, !!this.icon ? icon : '', h("slot", { name: "icon" })), h("div", { class: "nav-content" }, h("div", { class: "list-item-label" }, this.item), myDescription), h("slot", null), this.option === "nav" ? h("se-icon", { size: "medium" }, h("span", { innerHTML: arrow2_right })) : '')));
    };
    Object.defineProperty(ListItemComponent.prototype, "el", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItemComponent, "watchers", {
        get: function () {
            return {
                "selected": ["SelectedDidChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return ListItemComponent;
}());
ListItemComponent.style = listItemCss;
export { ListComponent as se_list, ListGroupComponent as se_list_group, ListItemComponent as se_list_item };
