import { Component, h, State, Method, Event, Element, Listen, Prop } from "@stencil/core";
export class TooltipComponent {
    constructor() {
        /**
         * Indicates the position of your tooltip.
         * The default setting is `bottom`, rendering the tooltip below its parent.
         */
        this.position = "bottom";
        /**
         * Indicates the action of your tooltip.
         * The default setting is `hover`, triggering the tooltip when hovering over the parent element.
         * The `click` action triggers the tooltip when you click on the parent element.
         */
        this.action = "hover";
        this.opened = false;
    }
    /**
     * Method to open the tooltip separate from hovering or clicking the parent element.
     */
    async open() {
        this.opened = true;
    }
    /**
     * Method to close the tooltip separate from hovering or clicking the parent element.
     */
    async close() {
        this.opened = false;
    }
    handleTouchstart(ev) {
        this._toggle(ev);
    }
    handleTouchEnd(ev) {
        this._toggle(ev);
    }
    handleMouseOver(ev) {
        if (this.action === "hover") {
            this._toggle(ev);
        }
    }
    handleMouseLeave(ev) {
        if (this.action === "hover" && this.opened) {
            this._toggle(ev);
        }
    }
    handleMouseClick(ev) {
        if (this.action === "click" && this.opened) {
            this._toggle(ev);
        }
    }
    handleCloseTooltip() {
        this.close();
    }
    _toggle(ev) {
        ev.stopPropagation();
        if (this.opened) {
            this.close();
            this.didClose.emit(ev);
        }
        else {
            this.closeTooltips.emit(); // close other tooltips before opening target tooltip
            this.open();
            this.didOpen.emit(ev);
        }
    }
    render() {
        const containsFab = this.el.querySelector("se-fab");
        const tooltipPosition = this.el.getAttribute("position");
        if (!!this.el.shadowRoot.querySelector("div .tooltip") && containsFab && containsFab.getAttribute("position") === "top") {
            const fabButtonHeight = this.el.querySelector("se-fab").shadowRoot.querySelector("se-button").shadowRoot.querySelector("button");
            const fabHeight = this.el.querySelector("se-fab").shadowRoot.querySelector("div").offsetTop;
            if (!!tooltipPosition && tooltipPosition === "left") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `top: calc(${fabHeight}px + ${fabButtonHeight.offsetTop}px + (${fabButtonHeight.offsetHeight}px / 2))`);
            }
            else if (!!tooltipPosition && tooltipPosition === "top") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `bottom: calc(100vh - ${fabHeight}px - 8px `);
            }
            else if (tooltipPosition === null || tooltipPosition === "bottom") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `top: calc(${fabHeight}px + ${fabButtonHeight.offsetHeight}px + 8px`);
            }
        }
        return (h("div", { class: [
                this.position ? `tooltip-${this.position}` : 'tooltip-bottom',
                containsFab ? `tooltip-fab${containsFab.getAttribute("position") === "top" ? '-top' : ''}` : ''
            ]
                .join(' ') },
            h("div", { onClick: this.action == "click" ? ev => { this._toggle(ev); } : () => { } },
                h("slot", { name: "tooltip" })),
            h("div", { class: `${this.opened ? "show" : ""} tooltip` },
                h("slot", null))));
    }
    static get is() { return "se-tooltip"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["tooltip.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["tooltip.css"]
    }; }
    static get properties() { return {
        "position": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the position of your tooltip.\nThe default setting is `bottom`, rendering the tooltip below its parent."
            },
            "attribute": "position",
            "reflect": false,
            "defaultValue": "\"bottom\""
        },
        "action": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"click\" | \"hover\"",
                "resolved": "\"click\" | \"hover\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the action of your tooltip.\nThe default setting is `hover`, triggering the tooltip when hovering over the parent element.\nThe `click` action triggers the tooltip when you click on the parent element."
            },
            "attribute": "action",
            "reflect": false,
            "defaultValue": "\"hover\""
        }
    }; }
    static get states() { return {
        "opened": {}
    }; }
    static get events() { return [{
            "method": "didOpen",
            "name": "didOpen",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event emitted when the tooltip has been opened."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "didClose",
            "name": "didClose",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event emitted when the tooltip has been closed."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "closeTooltips",
            "name": "closeTooltips",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Closes the tooltip when another tooltip is opened."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "open": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Method to open the tooltip separate from hovering or clicking the parent element.",
                "tags": []
            }
        },
        "close": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Method to close the tooltip separate from hovering or clicking the parent element.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "touchstart",
            "method": "handleTouchstart",
            "target": "window",
            "capture": false,
            "passive": true
        }, {
            "name": "touchend",
            "method": "handleTouchEnd",
            "target": "window",
            "capture": false,
            "passive": true
        }, {
            "name": "mouseover",
            "method": "handleMouseOver",
            "target": undefined,
            "capture": false,
            "passive": true
        }, {
            "name": "mouseleave",
            "method": "handleMouseLeave",
            "target": undefined,
            "capture": false,
            "passive": true
        }, {
            "name": "click",
            "method": "handleMouseClick",
            "target": "window",
            "capture": false,
            "passive": false
        }, {
            "name": "closeTooltips",
            "method": "handleCloseTooltip",
            "target": "document",
            "capture": false,
            "passive": false
        }]; }
}
