import { Component, Host, h, Prop, Watch, Element } from "@stencil/core";
export class ListComponent {
    constructor() {
        /**
         * Defines the style of the list.  The default setting is `classic`.
         */
        this.option = "classic";
        /**
         * Defines if list groups can be collapsed.  The default setting is `true`.
         */
        this.canCollapse = true;
    }
    optionDidChange() {
        Array.from(this.el.querySelectorAll('se-list-item, se-list-group')).forEach((item) => {
            const closeList = item.closest('se-list');
            // Make sure we only change the style of the current list. Handy if list has a dropdown with a different list style
            if (closeList === this.el) {
                item.option = this.option;
            }
        });
    }
    canCollapseDidChange() {
        Array.from(this.el.querySelectorAll('se-list-group')).forEach((item) => {
            item.canCollapse = this.canCollapse;
        });
    }
    componentWillLoad() {
        this.optionDidChange();
        this.canCollapseDidChange();
    }
    render() {
        return h(Host, { role: "list" },
            h("slot", null));
    }
    static get is() { return "se-list"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["list.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["list.css"]
    }; }
    static get properties() { return {
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"nav\" | \"classic\" | \"dropdown\" | \"treeview\" | \"headline\"",
                "resolved": "\"classic\" | \"dropdown\" | \"headline\" | \"nav\" | \"treeview\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the style of the list.  The default setting is `classic`."
            },
            "attribute": "option",
            "reflect": false,
            "defaultValue": "\"classic\""
        },
        "canCollapse": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines if list groups can be collapsed.  The default setting is `true`."
            },
            "attribute": "can-collapse",
            "reflect": false,
            "defaultValue": "true"
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "option",
            "methodName": "optionDidChange"
        }, {
            "propName": "canCollapse",
            "methodName": "canCollapseDidChange"
        }]; }
}
