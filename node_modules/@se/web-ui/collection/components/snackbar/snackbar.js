import { Component, Element, Event, h, Prop, Watch } from "@stencil/core";
import information_circle from "@se/icons/svg/information_circle.svg";
import action_delete_cross from "@se/icons/svg/action_delete_cross.svg";
const SHOW_SNACKBAR = 'show-snackbar';
export class SnackbarComponent {
    constructor() {
        /**
         * Indicates the background color of your snackbar.
         * `success`: green
         * `warning`: orange
         * `error`: red
         * `information`: dark grey, default setting
         */
        this.type = 'information';
        /**
         * The name of the icon you wish to display.  The default icon is an information circle.
         */
        this.icon = 'information_circle';
        /**
         * Displays a "button" to close the snackbar.
         * The default setting is `false`.
         * This will be visible if set to `true`.
         */
        this.canClose = false;
        /**
         * Indicates if the snackbar is open.  Set to `false` (closed) by default.
         */
        this.open = false;
        /**
         * Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false.
         * The default setting is 5000.
         */
        this.duration = 5000;
    }
    openDidChange() {
        if (this.open) {
            this.el.classList.add(SHOW_SNACKBAR);
            setTimeout(() => {
                if (!this.canClose) {
                    this.closeSnackbar();
                }
            }, this.duration);
        }
    }
    closeSnackbar() {
        this.open = false;
        this.el.classList.remove(SHOW_SNACKBAR);
        this.didClose.emit();
    }
    submitData() {
        this.actionClicked.emit();
    }
    componentDidLoad() {
        this.openDidChange();
    }
    render() {
        let renderIcon = this.icon === 'information_circle' ? information_circle : this.icon;
        if (this.icon === "none") {
            renderIcon = false;
        }
        return (h("div", { class: this.type },
            h("div", { class: "snackbar", role: "alert" },
                h("span", { class: "snackbar-icon" },
                    renderIcon && h("se-icon", null,
                        h("span", { innerHTML: renderIcon })),
                    h("slot", { name: "icon" })),
                h("span", { class: "message" },
                    this.message,
                    h("slot", null)),
                this.actionText ? h("span", { class: "action", onClick: () => this.submitData() }, this.actionText) : '',
                this.canClose ? h("span", { class: "close" },
                    h("se-icon", { onClick: () => this.closeSnackbar() },
                        h("span", { innerHTML: action_delete_cross }))) : '')));
    }
    static get is() { return "se-snackbar"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["snackbar.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["snackbar.css"]
    }; }
    static get properties() { return {
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'success' | 'error' | 'warning' | 'information'",
                "resolved": "\"error\" | \"information\" | \"success\" | \"warning\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the background color of your snackbar.\n`success`: green\n`warning`: orange\n`error`: red\n`information`: dark grey, default setting"
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "'information'"
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string | \"none\"",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The name of the icon you wish to display.  The default icon is an information circle."
            },
            "attribute": "icon",
            "reflect": false,
            "defaultValue": "'information_circle'"
        },
        "message": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The content of the message you want the snackbar to display."
            },
            "attribute": "message",
            "reflect": false
        },
        "canClose": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Displays a \"button\" to close the snackbar.\nThe default setting is `false`.\nThis will be visible if set to `true`."
            },
            "attribute": "can-close",
            "reflect": false,
            "defaultValue": "false"
        },
        "actionText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the text you want your custom action button to read."
            },
            "attribute": "action-text",
            "reflect": false
        },
        "open": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates if the snackbar is open.  Set to `false` (closed) by default."
            },
            "attribute": "open",
            "reflect": false,
            "defaultValue": "false"
        },
        "duration": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false.\nThe default setting is 5000."
            },
            "attribute": "duration",
            "reflect": false,
            "defaultValue": "5000"
        }
    }; }
    static get events() { return [{
            "method": "didClose",
            "name": "didClose",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Sends information to the parent component when closing the snackbar."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "actionClicked",
            "name": "actionClicked",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Sends information to the parent component when clicking a custom action button."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "open",
            "methodName": "openDidChange"
        }]; }
}
