import { Component, Element, Event, h, Host, Prop, State, Method, Watch, Listen } from '@stencil/core';
export class ButtonComponent {
    constructor() {
        /**
         * Defines the visual appearance of the button.
         * `flat` is the default option, which includes a gray background.
         * `raised` adds a box shadow to the button.
         * `outline` adds a border to the button.
         * `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application.
         */
        this.option = 'flat';
        /**
         * Defines the size of the button.
         * `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component.
         * `small` is the default option, with a 14px font and a 32px height.
         * `medium` sets the font to 16px and the height to 40px.
         * `large` sets the font to 18px and the height to 48px.
         */
        this.size = 'small';
        /**
         * Defines the background color of the button. The default setting is `standard`.
         */
        this.color = 'standard';
        /**
         * Property to specify if the button should only display an icon (no extra spacing).
         */
        this.iconOnly = false;
        /**
        * Optional property.
        * `button`	is the default setting, creating a clickable button.
        * `submit`	creates a "submit" button (useful to submit form-data).
        * `reset`	creates a reset button (useful to reset form-data to its initial values).
        */
        this.type = 'button';
        /**
        * Optional property that defines if the button is disabled.  Set to `false` by default.
        */
        this.disabled = false;
    }
    optionDidChange() {
        if (this.option === 'login') {
            this.color = 'primary';
            this.block = true;
        }
        if (this.option === 'signup') {
            this.color = 'secondary';
            this.block = true;
        }
    }
    /**
     * Sets the disabled property for your button from the parent component.
     * @param val set to `true` or `false`.
     */
    async setDisabled(val) {
        this.disabled = val;
    }
    /**
     * Indicates if the button is part of a group of buttons within the `se-radio-group` component.
     */
    async setGrouped() {
        this.grouped = true;
    }
    buttonClickedHandler(ev) {
        if (this.type !== 'button') {
            // this button wants to specifically submit a form
            // climb up the dom to see if we're in a <form>
            // and if so, then use JS to submit it
            // https://github.com/ionic-team/ionic/blob/master/core/src/components/button/button.tsx
            const form = this.el.closest('form');
            if (form) {
                ev.preventDefault();
                const fakeButton = window.document.createElement('button');
                fakeButton.type = this.type;
                fakeButton.style.display = 'none';
                form.appendChild(fakeButton);
                fakeButton.click();
                fakeButton.remove();
            }
        }
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    toggle() {
        if (this.disabled)
            return;
        if (this.grouped) {
            this.selected = !this.selected;
            this.didClick.emit({ selected: this.selected, value: this.value });
        }
        if (this.option === 'minifab') {
            this.didClick.emit({ value: this.caption });
        }
    }
    componentWillLoad() {
        this.optionDidChange();
    }
    componentDidLoad() {
        this.setButtonId();
    }
    render() {
        const { color, size, option, icon, iconColor, iconOnly, selected } = this;
        const isIconOnly = iconOnly || option && option.includes('fab');
        return (h(Host, { class: { 'disabled': this.disabled, 'grouped': this.grouped, 'display-block': this.block, 'minifab': this.option === 'minifab' } },
            h("button", { disabled: this.disabled, "data-tooltip": this.caption, type: this.type, id: this.innerId, onClick: () => this.toggle(), class: {
                    [color]: true,
                    [size]: true,
                    [option]: true,
                    'selected': selected,
                    'iconOnly': isIconOnly
                } },
                icon && h("se-icon", { size: this.grouped && this.size !== 'nano' ? 'medium' : 'small', color: iconColor }, icon),
                h("slot", { name: "icon" }),
                !isIconOnly && h("span", { class: "text" },
                    h("slot", null)))));
    }
    static get is() { return "se-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["button.css"]
    }; }
    static get properties() { return {
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'flat' | 'raised' | 'outline' | 'login' | 'signup' | 'inherit' |'fab'| 'minifab'",
                "resolved": "\"fab\" | \"flat\" | \"inherit\" | \"login\" | \"minifab\" | \"outline\" | \"raised\" | \"signup\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the visual appearance of the button.\n`flat` is the default option, which includes a gray background.\n`raised` adds a box shadow to the button.\n`outline` adds a border to the button.\n`login` and `signup` are specific options for \"Login\" and \"Sign Up\" buttons in your application."
            },
            "attribute": "option",
            "reflect": false,
            "defaultValue": "'flat'"
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'nano' | 'small' | 'medium' | 'large'",
                "resolved": "\"large\" | \"medium\" | \"nano\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the size of the button.\n`nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component.\n`small` is the default option, with a 14px font and a 32px height.\n`medium` sets the font to 16px and the height to 40px.\n`large` sets the font to 18px and the height to 48px."
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "'small'"
        },
        "color": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "'standard' | 'alternative' | 'primary' | 'secondary'",
                "resolved": "\"alternative\" | \"primary\" | \"secondary\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the background color of the button. The default setting is `standard`."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'standard'"
        },
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines the value of your button, which gets passed to the parent component when clicking the button."
            },
            "attribute": "value",
            "reflect": false
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that determines if your button includes an icon."
            },
            "attribute": "icon",
            "reflect": false
        },
        "iconColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'standard' | 'alternative' | 'primary' | 'secondary'",
                "resolved": "\"alternative\" | \"primary\" | \"secondary\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property to change the color of the icon when needed. For example, the user dropdown in the header component."
            },
            "attribute": "icon-color",
            "reflect": false
        },
        "iconOnly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Property to specify if the button should only display an icon (no extra spacing)."
            },
            "attribute": "icon-only",
            "reflect": false,
            "defaultValue": "false"
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'button' | 'submit' |'reset'",
                "resolved": "\"button\" | \"reset\" | \"submit\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property.\n`button`\tis the default setting, creating a clickable button.\n`submit`\tcreates a \"submit\" button (useful to submit form-data).\n`reset`\tcreates a reset button (useful to reset form-data to its initial values)."
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "'button'"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the button is disabled.  Set to `false` by default."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "selected": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the button should be shown as selected. Used with the `se-radio-group` component."
            },
            "attribute": "selected",
            "reflect": false
        },
        "caption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the button has a caption or tooltip text."
            },
            "attribute": "caption",
            "reflect": false
        },
        "block": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the button displays as a block in it's container.\nWhen set to true, the button will be as wide as its container."
            },
            "attribute": "block",
            "reflect": false
        }
    }; }
    static get states() { return {
        "grouped": {},
        "innerId": {}
    }; }
    static get events() { return [{
            "method": "didClick",
            "name": "didClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Passes button data to the parent component on a click."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setDisabled": {
            "complexType": {
                "signature": "(val: boolean) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "val set to `true` or `false`.",
                                "name": "param"
                            }],
                        "text": "set to `true` or `false`."
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the disabled property for your button from the parent component.",
                "tags": [{
                        "name": "param",
                        "text": "val set to `true` or `false`."
                    }]
            }
        },
        "setGrouped": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Indicates if the button is part of a group of buttons within the `se-radio-group` component.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "option",
            "methodName": "optionDidChange"
        }]; }
    static get listeners() { return [{
            "name": "click",
            "method": "buttonClickedHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
