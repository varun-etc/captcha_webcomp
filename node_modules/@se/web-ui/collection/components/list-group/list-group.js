import { Component, Event, h, Prop, Watch, Element, Listen, Host, State } from "@stencil/core";
import arrow2Down from "@se/icons/svg/arrow2_down.svg";
import arrow2Up from "@se/icons/svg/arrow2_up.svg";
import arrow2Right from "@se/icons/svg/arrow2_right.svg";
export class ListGroupComponent {
    constructor() {
        /**
         * Defines if the item group is collapsed/closed. The default setting is `false`.
         */
        this.collapsed = false;
        /**
         * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        this.indentation = 0;
        /**
         * Defines if list groups can be collapsed, true by default.
         */
        this.canCollapse = true;
    }
    collapsedChanged() {
        this.checkSelected();
    }
    ChildUpdated() {
        this.checkSelected();
    }
    checkSelected() {
        if (!this.collapsed) {
            this.selectedChild = false;
        }
        else {
            Array.from(this.el.querySelectorAll("se-list-item, se-list-group")).forEach((item) => {
                if (item.selected || item.selectedChild) {
                    this.selectedChild = true;
                }
            });
        }
    }
    toggleGroupButton() {
        if (this.option !== 'treeview') {
            this.collapsed = !this.collapsed;
            this.didGroupCollapse.emit({ collapsed: this.collapsed });
        }
        this.didGroupClick.emit();
    }
    toggleCollapseTreeview() {
        // called only from treeview
        this.collapsed = !this.collapsed;
        this.didGroupCollapse.emit({ collapsed: this.collapsed });
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    getClosestParent() {
        // get the closest between se-list or se-list-group
        return this.el.parentElement.closest("se-list, se-list-group");
    }
    getParentConfig() {
        const closest = this.getClosestParent() || {};
        const indentation = closest.indentation;
        if (indentation !== null && indentation !== undefined) {
            this.indentation = indentation + 1;
        }
        if (closest.option) {
            this.option = closest.option;
        }
    }
    componentWillLoad() {
        this.getParentConfig();
        this.hasIcon = !!this.icon || !!this.el.querySelector('[slot="icon"]');
    }
    componentDidLoad() {
        this.setButtonId();
    }
    render() {
        let title = this.item;
        let myDescription = null;
        if (!!this.description) {
            myDescription = h("small", null, this.description);
            title = `${title}, ${this.description}`;
        }
        // The button section is a copy of the list item. External component cannot be used inside a component (DOM issue)
        return (h(Host, { role: "listitem", option: this.option },
            h("button", { "aria-expanded": `${this.collapsed}`, title: title, id: this.innerId, class: ['se-list-group', this.option, this.collapsed ? "collapsed" : '', this.option, this.selected ? "selected" : '', this.selectedChild ? "selectedChild" : '', "button"].join(' '), style: { paddingLeft: `${20 * this.indentation}px` }, onClick: () => this.toggleGroupButton(), disabled: !this.canCollapse },
                this.option === "nav" && this.selected && h("div", { class: "selectedBar" }),
                this.option === 'treeview' ? h("se-icon", { class: "treeview-collapse-icon", onClick: (e) => { e.stopPropagation(); this.toggleCollapseTreeview(); }, style: { paddingLeft: `calc(${8 * this.indentation}px)` } },
                    h("span", { innerHTML: this.collapsed ? arrow2Right : arrow2Down })) : '',
                this.hasIcon &&
                    h("div", { class: "nav-icon" },
                        this.icon && h("se-icon", { color: this.iconColor }, this.icon),
                        h("slot", { name: "icon" })),
                h("div", { class: "nav-content" },
                    h("div", { class: "list-group-label" }, this.item),
                    myDescription),
                this.option !== "treeview" && this.canCollapse
                    ? h("se-icon", { class: "standard-collapse-icon", size: "medium" },
                        h("span", { innerHTML: this.collapsed ? arrow2Down : arrow2Up }))
                    : ''),
            h("div", { role: "list", class: ["se-list-group", "group-item", this.option].join(' ') },
                h("slot", null))));
    }
    static get is() { return "se-list-group"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["list-group.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["list-group.css"]
    }; }
    static get properties() { return {
        "item": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the title of the item."
            },
            "attribute": "item",
            "reflect": false
        },
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the description of the item, placed under its title."
            },
            "attribute": "description",
            "reflect": false
        },
        "selected": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines if the list group should be displayed as selected (if one of its child elements is selected when collapsed)."
            },
            "attribute": "selected",
            "reflect": false
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Places an icon on the left side of the item list."
            },
            "attribute": "icon",
            "reflect": false
        },
        "iconColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"primary\" | \"secondary\"",
                "resolved": "\"primary\" | \"secondary\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property to define the color of the icon. The default color will be inherited from it's parent."
            },
            "attribute": "icon-color",
            "reflect": false
        },
        "collapsed": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines if the item group is collapsed/closed. The default setting is `false`."
            },
            "attribute": "collapsed",
            "reflect": false,
            "defaultValue": "false"
        },
        "indentation": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the group indentation to add paddings to the list item (used with multiple list groups)."
            },
            "attribute": "indentation",
            "reflect": false,
            "defaultValue": "0"
        },
        "option": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "\"nav\" | \"classic\" | \"dropdown\" | \"treeview\" | \"headline\"",
                "resolved": "\"classic\" | \"dropdown\" | \"headline\" | \"nav\" | \"treeview\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the style of the list. The default setting is `classic`, and the style will be handled and modified by the parent element."
            },
            "attribute": "option",
            "reflect": false
        },
        "canCollapse": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines if list groups can be collapsed, true by default."
            },
            "attribute": "can-collapse",
            "reflect": false,
            "defaultValue": "true"
        },
        "selectedChild": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "selected-child",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerId": {}
    }; }
    static get events() { return [{
            "method": "didGroupClick",
            "name": "didGroupClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the group item is clicked."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "didGroupCollapse",
            "name": "didGroupCollapse",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the group item is collapsed/uncollapsed."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "collapsed",
            "methodName": "collapsedChanged"
        }]; }
    static get listeners() { return [{
            "name": "didSelectedChange",
            "method": "ChildUpdated",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
