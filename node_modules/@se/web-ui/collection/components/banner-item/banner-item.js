import { Component, Element, Event, h, Host, Prop, Watch } from "@stencil/core";
export class BannerItemComponent {
    constructor() {
        /**
         * Indicates the active banner item in your banner component.
         */
        this.active = false;
    }
    activeDidChange() {
        if (this.active) {
            this.didChange.emit();
        }
    }
    setBlockTransparency() {
        Array.from(this.el.querySelectorAll('se-block')).forEach((item) => {
            item.classList.add('banner-child');
        });
    }
    setButtonClass() {
        Array.from(this.el.querySelectorAll('se-button')).forEach((item) => {
            item.classList.add('banner-child');
        });
    }
    componentWillLoad() {
        this.setBlockTransparency();
        this.setButtonClass();
    }
    componentWillUpdate() {
        this.setBlockTransparency();
        this.setButtonClass();
    }
    render() {
        return (h(Host, { class: { 'active': this.active } },
            h("div", { class: "image-container" },
                h("div", { class: "image-background", style: { backgroundImage: this.imageUrl } }),
                h("div", { class: "background-overlay" })),
            h("div", { class: "banner-section-wrapper" },
                h("slot", null))));
    }
    static get is() { return "se-banner-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["banner-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["banner-item.css"]
    }; }
    static get properties() { return {
        "imageUrl": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the background image for your banner item."
            },
            "attribute": "image-url",
            "reflect": false
        },
        "active": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the active banner item in your banner component."
            },
            "attribute": "active",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "didChange",
            "name": "didChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Send an event when the banner item changes"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "active",
            "methodName": "activeDidChange"
        }]; }
}
