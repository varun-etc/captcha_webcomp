import { Component, h, Host, Prop, Watch, Element } from "@stencil/core";
export class BlockComponent {
    constructor() {
        /**
         * Defines whether or not a divider will be applied to the se-block header and footer.
         * `true` will add a divider to the se-block-header and se-block-footer, if they are present.
         * `false` will remove dividers on the se-block header and se-block-footer, if they are present.
         */
        this.divider = false;
        /**
         * Defines the se-block outline.
         * Default setting is `false`.
         * Setting this property to `true` will add a 1px border.
         */
        this.outline = false;
        /**
         * Defines the se-block outline color.
         * Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color.
         * `primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected.
         * `secondary` defines the outline color as `$se-sky-blue`.
         */
        this.outlineColor = "standard";
        /**
         * Defines the se-block item's ability to appear clickable / selectable.
         * Default setting is `false`, resulting in no hover effects on the block level.
         * `true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block.
         */
        this.clickable = false;
        /**
         * Defines clickable se-block item's bar on hover.
         * Default setting is `false`.
         * `true` renders a `$se-life-green` colored bar on a hover.
         */
        this.clickableBar = false;
        /**
         * Defines how to display the element.
         * `flex` is the default display.
         * `block` helps in specific cases. Make sure you know what you are doing.
         */
        this.display = "flex";
        /**
         * Optional property that defines the background color of the block.
         * Default setting is `alternative`, rendering the "alternative" theme background.
         * `none` has no background.
         * `standard` renders the "standard" theme background.
         */
        this.color = "alternative";
        /**
         * When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item.
         * Default setting is `false`, spanning 1 row and 1 column (1/1).
         * `true` spans 2 rows and 2 columns (2/2).
         * `vertical` spans 2 rows (2/1).
         * `horizontal` spans 2 columns (1/2).
         */
        this.enlarged = false;
        /**
         * Displays the loading icon if set to `true`.  Default setting is `false`.
         */
        this.loading = false;
        /**
         * Defines the visual appearance of a block.
         * Default setting is `basic`, which will remove any spacing.
         * `widget` will create a flat widget look and feel with a `medium` margin around it.
         * `card` will create a card look and feel with rounded corners, and with a `large` margin around it.
         * Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         */
        this.option = "basic";
    }
    dividerDidChange() {
        this.updateItem();
    }
    widthDidChange() {
        this.updateSize();
    }
    heightDidChange() {
        this.updateSize();
    }
    optionDidChange() {
        this.updateItem();
    }
    componentWillLoad() {
        this.updateSize();
        this.updateItem();
    }
    updateItem() {
        if (this.option !== undefined && this.divider === undefined) {
            if (this.option === "card" || this.option === "card-old") {
                this.divider = false;
            }
            else
                this.divider = true;
        }
        const childElms = "se-block-header, se-block-content, se-block-footer";
        Array.from(this.el.querySelectorAll(childElms)).forEach((item) => {
            // have to do this because otherwise blocks inside other blocks get settings overridden by higher ancestors
            // Using "closest" function in case the current element is wrapped inside another one
            if (item.closest('se-block') === this.el) {
                item.divider = this.divider;
                !item.option ? item.option = this.option : '';
            }
        });
    }
    updateSize() {
        // reset all sizes first
        this.el.style.width = '';
        this.el.style.minWidth = '';
        this.el.style.height = '';
        this.el.style.minHeight = '';
        if (this.width) {
            this.el.style.width = this.width;
            this.el.style.minWidth = this.width;
        }
        if (this.height) {
            this.el.style.height = this.height;
            this.el.style.minHeight = this.width;
        }
    }
    render() {
        const outlineColor = this.outlineColor ? `-${this.outlineColor}` : '';
        const outline = this.outline === true ? `outline${outlineColor}` : 'outline-false';
        let enlargedClass = "";
        if (this.display === "grid") {
            switch (this.enlarged) {
                case false:
                    break;
                case "vertical":
                    enlargedClass = "grid-vertical";
                    break;
                case "horizontal":
                    enlargedClass = "grid-horizontal";
                    break;
                default:
                    enlargedClass = "grid-large";
                    break;
            }
        }
        return (h(Host, { class: [
                this.display ? `block-${this.display}` : '',
                enlargedClass,
                `block-bg-${this.color}`
            ].join(' ') },
            h("div", { class: [
                    'block-body',
                    this.clickable === true ? `${this.clickableBar !== false ? "clickable" : "clickable-nobar"}` : '',
                    this.option,
                    this.outline !== undefined ? outline : '',
                    this.corner !== undefined ? `corner-${this.corner}` : '',
                    this.margin !== undefined ? `margin-${this.margin}` : '',
                    this.color !== undefined ? `block-bg-${this.color}` : 'block-bg-alternative'
                ].join(' ') },
                this.loading ? h("se-loading", { loading: this.loading }) : '',
                h("slot", null))));
    }
    static get is() { return "se-block"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["block.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["block.css"]
    }; }
    static get properties() { return {
        "divider": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines whether or not a divider will be applied to the se-block header and footer.\n`true` will add a divider to the se-block-header and se-block-footer, if they are present.\n`false` will remove dividers on the se-block header and se-block-footer, if they are present."
            },
            "attribute": "divider",
            "reflect": false,
            "defaultValue": "false"
        },
        "outline": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the se-block outline.\nDefault setting is `false`.\nSetting this property to `true` will add a 1px border."
            },
            "attribute": "outline",
            "reflect": false,
            "defaultValue": "false"
        },
        "outlineColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"standard\" | \"secondary\" | \"primary\"",
                "resolved": "\"primary\" | \"secondary\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the se-block outline color.\nDefault setting is `standard`, which renders the outline with the `$se-super-light-grey` color.\n`primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected.\n`secondary` defines the outline color as `$se-sky-blue`."
            },
            "attribute": "outline-color",
            "reflect": false,
            "defaultValue": "\"standard\""
        },
        "corner": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"none\" | \"nano\" | \"small\"",
                "resolved": "\"nano\" | \"none\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the se-block corner radius.\nDefault setting is `small`, rendering a rounded, 4px rounded corner.\n`none` is for a sharp, 90 degree corner.\n`nano` is for a slightly rounded, 2px rounded corner."
            },
            "attribute": "corner",
            "reflect": false
        },
        "clickable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the se-block item's ability to appear clickable / selectable.\nDefault setting is `false`, resulting in no hover effects on the block level.\n`true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block."
            },
            "attribute": "clickable",
            "reflect": false,
            "defaultValue": "false"
        },
        "clickableBar": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines clickable se-block item's bar on hover.\nDefault setting is `false`.\n`true` renders a `$se-life-green` colored bar on a hover."
            },
            "attribute": "clickable-bar",
            "reflect": false,
            "defaultValue": "false"
        },
        "margin": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"none\" | \"small\" | \"medium\" | \"large\" | \"xlarge\"",
                "resolved": "\"large\" | \"medium\" | \"none\" | \"small\" | \"xlarge\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the spacing around the outside edge of a block.\nDefault `none` is 0px.\n`small` is 4px.\n`medium` is 8px.\n`large` is 16px.\n`xlarge` is 32px."
            },
            "attribute": "margin",
            "reflect": false
        },
        "display": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"flex\" | \"block\" | \"grid\"",
                "resolved": "\"block\" | \"flex\" | \"grid\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines how to display the element.\n`flex` is the default display.\n`block` helps in specific cases. Make sure you know what you are doing."
            },
            "attribute": "display",
            "reflect": false,
            "defaultValue": "\"flex\""
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"none\" | \"standard\" | \"alternative\"",
                "resolved": "\"alternative\" | \"none\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines the background color of the block.\nDefault setting is `alternative`, rendering the \"alternative\" theme background.\n`none` has no background.\n`standard` renders the \"standard\" theme background."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "\"alternative\""
        },
        "width": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the specific width of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default."
            },
            "attribute": "width",
            "reflect": false
        },
        "height": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the specific height of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default."
            },
            "attribute": "height",
            "reflect": false
        },
        "enlarged": {
            "type": "any",
            "mutable": true,
            "complexType": {
                "original": "\"vertical\" | \"horizontal\" | boolean",
                "resolved": "\"horizontal\" | \"vertical\" | boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item.\nDefault setting is `false`, spanning 1 row and 1 column (1/1).\n`true` spans 2 rows and 2 columns (2/2).\n`vertical` spans 2 rows (2/1).\n`horizontal` spans 2 columns (1/2)."
            },
            "attribute": "enlarged",
            "reflect": false,
            "defaultValue": "false"
        },
        "loading": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Displays the loading icon if set to `true`.  Default setting is `false`."
            },
            "attribute": "loading",
            "reflect": false,
            "defaultValue": "false"
        },
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"basic\" | \"card\" | \"card-old\" | \"widget\"",
                "resolved": "\"basic\" | \"card\" | \"card-old\" | \"widget\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the visual appearance of a block.\nDefault setting is `basic`, which will remove any spacing.\n`widget` will create a flat widget look and feel with a `medium` margin around it.\n`card` will create a card look and feel with rounded corners, and with a `large` margin around it.\nPending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated."
            },
            "attribute": "option",
            "reflect": false,
            "defaultValue": "\"basic\""
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "divider",
            "methodName": "dividerDidChange"
        }, {
            "propName": "width",
            "methodName": "widthDidChange"
        }, {
            "propName": "height",
            "methodName": "heightDidChange"
        }, {
            "propName": "option",
            "methodName": "optionDidChange"
        }]; }
}
