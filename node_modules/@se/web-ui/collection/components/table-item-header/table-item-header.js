import { Component, Host, h, Prop, Element, State } from "@stencil/core";
import arrow4Top from "@se/icons/svg/arrow4_top.svg";
export class TableItemHeaderComponent {
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    componentWillLoad() {
        this.setButtonId();
    }
    render() {
        let ariaLabelSort;
        let disabled = false;
        const isSortable = !!this.sort;
        const displayStyle = {
            flex: this.flex || '',
            maxWidth: this.width || '',
            width: this.width || '',
            minWidth: this.minWidth || ''
        };
        if (isSortable) {
            this.clickable = true;
            if (this.sort === "asc") {
                ariaLabelSort = "sort asc";
            }
            else if (this.sort === "desc") {
                ariaLabelSort = "sort desc";
            }
            else {
                disabled = true;
            }
        }
        else {
            ariaLabelSort = null;
        }
        const TagType = this.clickable || isSortable ? 'button' : 'div';
        return (h(Host, { role: "cell", class: ["se-table-item", isSortable ? `sort-${this.sort}` : ''].join(' '), id: this.innerId, style: displayStyle },
            h(TagType, { class: "table-item-content", "aria-label": ariaLabelSort },
                h("div", { class: "table-item-label" },
                    h("slot", null)),
                isSortable ?
                    h("se-icon", { class: ["sortable", isSortable ? `sort-${this.sort}` : ''].join(' '), "aria-hidden": "true", size: "nano", style: { opacity: disabled ? '.3' : '1' } },
                        h("span", { innerHTML: arrow4Top })) : '')));
    }
    static get is() { return "se-table-item-header"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["table-item-header.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["table-item-header.css"]
    }; }
    static get properties() { return {
        "flex": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the specific flex-basis of a block."
            },
            "attribute": "flex",
            "reflect": false
        },
        "width": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the specific width of a block, for items that should not be flexible."
            },
            "attribute": "width",
            "reflect": false
        },
        "minWidth": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex."
            },
            "attribute": "min-width",
            "reflect": false
        },
        "clickable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property defines the tag type within the `se-table-item`.\nDefault value `false` defines the tag type as `div`.\n`true` defines the tag type as a `button`."
            },
            "attribute": "clickable",
            "reflect": false
        },
        "sort": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"asc\" | \"desc\" | \"none\"",
                "resolved": "\"asc\" | \"desc\" | \"none\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that provides the arrow icon based on which string is provided, and also causes the `clickable` property to `true`.\n`asc` defines the icon as an upwards arrow in black.\n`desc` defines the icon as a downwards arrow in black.\n`none` defines the icon as an upwards arrow in grey."
            },
            "attribute": "sort",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerId": {}
    }; }
    static get elementRef() { return "el"; }
}
