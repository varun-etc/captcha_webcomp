import { Component, Element, Event, h, Method, Prop } from "@stencil/core";
export class RadioComponent {
    constructor() {
        /**
         * Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`.
         */
        this.required = false;
        /**
         * Defines the color of the checkbox.
         * The default setting is `primary`, rendering a green color.
         * The `secondary` setting renders a blue color.
         */
        this.color = 'primary';
        /**
         * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        /**
           * Determines whether or not the checkbox is checked when you initialize it.
         * The default setting is `false`.
         * Checked if set to `true`.
           */
        this.selected = false;
        /**
         * Sets the position of the label for your checkbox component.
         * The default setting is `right`.
         */
        this.labelPos = 'right';
    }
    /**
     * Sets the required property on the radio button element.
     */
    async setRequired() {
        this.required = true;
    }
    setInputId() {
        const id = this.el.getAttribute('id');
        if (id) {
            const input = this.el.shadowRoot.querySelector('input');
            input.setAttribute('id', 'wc-' + id);
        }
    }
    handleClick() {
        this.selected = !this.selected;
        const checkboxObject = { value: this.value, selected: this.selected };
        this.didCheck.emit(checkboxObject);
    }
    componentDidLoad() {
        this.setInputId();
    }
    render() {
        return (h("div", { class: "se-radio" },
            h("label", { class: ["radio-container", `checkdot-label-${this.labelPos}`].join(' '), "data-disabled": this.disabled },
                this.label,
                this.required ? h("span", { class: "required" }, "*") : '',
                h("input", { type: "radio", checked: this.selected, disabled: this.disabled, onClick: () => this.handleClick() }),
                h("span", { class: "checkdot", "data-color": this.color }))));
    }
    static get is() { return "se-radio"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["radio.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["radio.css"]
    }; }
    static get properties() { return {
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the value you want to pass to the parent component when the radio button is checked."
            },
            "attribute": "value",
            "reflect": false
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the label that will display next to the radio button."
            },
            "attribute": "label",
            "reflect": false
        },
        "required": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`."
            },
            "attribute": "required",
            "reflect": false,
            "defaultValue": "false"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'primary' | 'secondary'",
                "resolved": "\"primary\" | \"secondary\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the color of the checkbox.\nThe default setting is `primary`, rendering a green color.\nThe `secondary` setting renders a blue color."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'primary'"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the checkbox is disabled.  Set to `false` by default."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "selected": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Determines whether or not the checkbox is checked when you initialize it.\n The default setting is `false`.\n Checked if set to `true`."
            },
            "attribute": "selected",
            "reflect": false,
            "defaultValue": "false"
        },
        "labelPos": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'left' | 'right'",
                "resolved": "\"left\" | \"right\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the position of the label for your checkbox component.\nThe default setting is `right`."
            },
            "attribute": "label-pos",
            "reflect": false,
            "defaultValue": "'right'"
        }
    }; }
    static get events() { return [{
            "method": "didCheck",
            "name": "didCheck",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Send the checkbox value to the parent component when clicking on the checkbox."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setRequired": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the required property on the radio button element.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
}
