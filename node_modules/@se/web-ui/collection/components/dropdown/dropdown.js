import { Component, h, Prop, State, Method, Element, Event, Listen } from '@stencil/core';
export class DropdownComponent {
    constructor() {
        /**
         * Defines how to align the dropdown container.
         * `right`: Position the container with respect to the right side of the trigger element.
         * `left`: Position the container with respect to the left side of the trigger element.
         */
        this.alignment = 'left';
        /**
         * Defines how to vertically align the dropdown container.
         * `top`: Position the container with respect to the top side of the trigger element.
         * `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        this.verticalAlignment = 'bottom';
        /**
         * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        this.maxWidth = "200px";
        /**
         * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        this.maxHeight = "400px";
        this.opened = false;
    }
    /**
     * Method to open the dropdown from outside its parent element.
     */
    async open() {
        this.opened = true;
        this.didOpen.emit();
    }
    /**
     * Method to close the dropdown from outside its parent element.
     */
    async close() {
        this.opened = false;
        this.didClose.emit();
    }
    handleClick() {
        if (this.opened) {
            this.close();
        }
    }
    handleTouchstart() {
        if (this.opened) {
            this.close();
        }
    }
    handleCancelAllDropdown() {
        if (!this.isActive && this.opened) {
            this.close();
        }
    }
    _toggle(ev) {
        ev.stopPropagation();
        this.isActive = true;
        if (this.opened) {
            this.close();
        }
        else {
            // close others only when trying to open one
            this.cancelAllDropdown.emit();
            this.open();
        }
        this.isActive = false;
        // console.log(ev)
    }
    render() {
        return (h("div", { class: ['se-dropdown', this.alignment, this.verticalAlignment].join(' ') },
            h("div", { "aria-haspopup": "true", "aria-expanded": this.opened, onClick: (ev) => this._toggle(ev) },
                h("slot", { name: "trigger" })),
            h("div", { class: `${this.opened ? 'show' : ''} dropdown-content`, style: { maxWidth: this.maxWidth, maxHeight: this.maxHeight } },
                h("slot", null))));
    }
    static get is() { return "se-dropdown"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["dropdown.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["dropdown.css"]
    }; }
    static get properties() { return {
        "alignment": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'right' | 'left'",
                "resolved": "\"left\" | \"right\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines how to align the dropdown container.\n`right`: Position the container with respect to the right side of the trigger element.\n`left`: Position the container with respect to the left side of the trigger element."
            },
            "attribute": "alignment",
            "reflect": false,
            "defaultValue": "'left'"
        },
        "verticalAlignment": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'top' | 'bottom'",
                "resolved": "\"bottom\" | \"top\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines how to vertically align the dropdown container.\n`top`: Position the container with respect to the top side of the trigger element.\n`bottom`: Position the container with respect to the bottom side of the trigger element."
            },
            "attribute": "vertical-alignment",
            "reflect": false,
            "defaultValue": "'bottom'"
        },
        "maxWidth": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the maximum width of the dropdown.  Default setting is \"200px\"."
            },
            "attribute": "max-width",
            "reflect": false,
            "defaultValue": "\"200px\""
        },
        "maxHeight": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the maximum height of the dropdown.  Default setting is \"400px\"."
            },
            "attribute": "max-height",
            "reflect": false,
            "defaultValue": "\"400px\""
        }
    }; }
    static get states() { return {
        "isActive": {},
        "opened": {}
    }; }
    static get events() { return [{
            "method": "didOpen",
            "name": "didOpen",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event emitted when the dropdown has been opened."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "didClose",
            "name": "didClose",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event emitted when the dropdown has been closed."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "cancelAllDropdown",
            "name": "cancelAllDropdown",
            "bubbles": true,
            "cancelable": true,
            "composed": false,
            "docs": {
                "tags": [],
                "text": "Event emitted when the dropdown has been touched. Every dropdown listen to this event to avoid avoid multiple dropdown open at the same time."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "open": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Method to open the dropdown from outside its parent element.",
                "tags": []
            }
        },
        "close": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Method to close the dropdown from outside its parent element.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "click",
            "method": "handleClick",
            "target": "window",
            "capture": false,
            "passive": false
        }, {
            "name": "touchstart",
            "method": "handleTouchstart",
            "target": "window",
            "capture": false,
            "passive": true
        }, {
            "name": "cancelAllDropdown",
            "method": "handleCancelAllDropdown",
            "target": "window",
            "capture": false,
            "passive": false
        }]; }
}
