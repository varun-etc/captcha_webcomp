import { Component, h, Prop, Element, Host } from "@stencil/core";
export class IconComponent {
    constructor() {
        /**
        * Optional property that defines if the button is disabled.  Set to `false` by default.
        */
        this.disabled = false;
    }
    render() {
        return (h(Host, { class: `icon-${this.size || 'small'}` },
            h("div", { class: {
                    'disabled': this.disabled,
                    'se-icon-wrapper': true,
                    [this.color]: !!this.color,
                    [`icon-${this.option}`]: true
                } },
                h("slot", null))));
    }
    static get is() { return "se-icon"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["icon.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["icon.css"]
    }; }
    static get properties() { return {
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"button\"",
                "resolved": "\"button\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property to define if the icon should act as a button (clickable)."
            },
            "attribute": "option",
            "reflect": false
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"nano\" | \"small\" | \"medium\" | \"large\" | \"xlarge\"",
                "resolved": "\"large\" | \"medium\" | \"nano\" | \"small\" | \"xlarge\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the size of an icon.\n`nano` sets the size to 14px.\n`small` sets the size to 24px.(default setting)\n`medium` sets the size to 32px.\n`large` sets the size to 52px.\n`xlarge` sets the size to 62px."
            },
            "attribute": "size",
            "reflect": false
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"standard\" | \"alternative\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"error\"",
                "resolved": "\"alternative\" | \"error\" | \"primary\" | \"secondary\" | \"standard\" | \"success\" | \"warning\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines the background color of the button.\nThe default color will be inherited from its parent."
            },
            "attribute": "color",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the button is disabled.  Set to `false` by default."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "el"; }
}
