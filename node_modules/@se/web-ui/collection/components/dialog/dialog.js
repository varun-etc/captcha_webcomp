import { Component, h, Prop, Element, Method, Event, Watch, Listen } from "@stencil/core";
const SHOW = "show-dialog";
const HIDE = "hide-dialog";
export class DialogComponent {
    constructor() {
        /**
         * Defines the size of the modal.
         * `small`: used in alerts and messages
         * `medium`: default setting, used by other apps
         * `fill`: takes the full space of the screen
         */
        this.size = "medium";
        /**
         * Defines the color of the dialog header.
         * `alternative`: Alternative background with primary color for the text
         * `primary`: Primary color schema and default setting.
         */
        this.color = 'primary';
        /**
         * Indicates whether or not the dialog is open or closed.  Default setting is `false`.
         */
        this.open = false;
        /**
         * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`.
         */
        this.canBackdrop = true;
    }
    openDidChange() {
        if (this.open) {
            this.addAnimation(null);
        }
        else {
            this.removeAnimation(() => {
                this.didClose.emit();
            });
        }
    }
    /**
     * Emit the `backdrop` event from the dialog's parent component if `canBackdrop=true`. When the event is emitted, the dialog is automatically closed.
     */
    async backdropClicked() {
        if (this.canBackdrop) {
            // Only emit if canBackdrop was clicked
            this.backdrop.emit();
            this.open = false;
        }
    }
    assignDialogHeaderColor() {
        Array.from(this.el.querySelectorAll('se-dialog-header')).forEach((item) => {
            if (!item.color) {
                item.color = this.color;
            }
        });
    }
    /**
     * Emit the `backdrop` event from the dialog's parent component if the escape key is clicked and if `canBackdrop=true`.
     */
    handleKeyDown(ev) {
        if (ev.key === 'Escape' && this.open) {
            this.backdropClicked();
        }
    }
    addAnimation(callback) {
        this.el.classList.add(SHOW);
        if (this.menuInnerEl && this.backdropEl) {
            this.menuInnerEl.classList.add(SHOW);
            this.backdropEl.classList.add(SHOW);
        }
        setTimeout(() => {
            this.menuInnerEl.classList.remove(SHOW);
            this.backdropEl.classList.remove(SHOW);
            callback && callback();
        }, 500);
    }
    removeAnimation(callback) {
        this.menuInnerEl.classList.add(HIDE);
        this.backdropEl.classList.add(HIDE);
        setTimeout(() => {
            this.menuInnerEl.classList.remove(HIDE);
            this.backdropEl.classList.remove(HIDE);
            this.el.classList.remove(SHOW);
            callback && callback();
        }, 500);
    }
    componentDidLoad() {
        this.assignDialogHeaderColor();
        this.openDidChange();
    }
    render() {
        return (h("div", { class: `${this.size} dialog-wrapper` },
            h("div", { class: "dialog-background", onClick: () => this.backdropClicked(), ref: el => this.backdropEl = el }),
            h("div", { class: "dialog", ref: el => (this.menuInnerEl = el) },
                h("slot", null))));
    }
    static get is() { return "se-dialog"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["dialog.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["dialog.css"]
    }; }
    static get properties() { return {
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"small\" | \"medium\" | \"large\" | \"fill\"",
                "resolved": "\"fill\" | \"large\" | \"medium\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the size of the modal.\n`small`: used in alerts and messages\n`medium`: default setting, used by other apps\n`fill`: takes the full space of the screen"
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "\"medium\""
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'alternative' | 'primary'",
                "resolved": "\"alternative\" | \"primary\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the color of the dialog header.\n`alternative`: Alternative background with primary color for the text\n`primary`: Primary color schema and default setting."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'primary'"
        },
        "open": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates whether or not the dialog is open or closed.  Default setting is `false`."
            },
            "attribute": "open",
            "reflect": false,
            "defaultValue": "false"
        },
        "canBackdrop": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`."
            },
            "attribute": "can-backdrop",
            "reflect": false,
            "defaultValue": "true"
        }
    }; }
    static get events() { return [{
            "method": "backdrop",
            "name": "backdrop",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Send data to the parent component when the backdrop is clicked."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "didClose",
            "name": "didClose",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Send data to the parent component when clicking an element within the dialog to close it.\nThe modal can then be safely removed from the DOM."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "backdropClicked": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Emit the `backdrop` event from the dialog's parent component if `canBackdrop=true`. When the event is emitted, the dialog is automatically closed.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "open",
            "methodName": "openDidChange"
        }]; }
    static get listeners() { return [{
            "name": "keydown",
            "method": "handleKeyDown",
            "target": "document",
            "capture": false,
            "passive": false
        }]; }
}
