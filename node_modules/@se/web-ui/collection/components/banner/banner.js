import { Component, Element, h, State, Prop, Listen } from "@stencil/core";
import arrow2_left from "@se/icons/svg/arrow2_left.svg";
import arrow2_right from "@se/icons/svg/arrow2_right.svg";
export class BannerComponent {
    constructor() {
        /**
         * Set the duration (in ms) that the banner will automatically switch slides.
         * Default is `6000`.
         */
        this.duration = 6000;
        this.items = [];
    }
    handleTouchStart(event) {
        clearInterval(this.interval);
        this.xStart = event.touches[0].clientX;
    }
    handleTouchMove(event) {
        this.xEnd = event.touches[0].clientX;
        let xDiff = this.xStart - this.xEnd;
        if (xDiff > 0) {
            this.changeActive('next');
        }
        else {
            this.changeActive('previous');
        }
    }
    windowSizeDidChange() {
        this.setIconSize();
    }
    setActiveItem(item) {
        if (this.items.length) {
            this.items.forEach((item) => {
                item.active = false;
                item.isThreeAway = false;
                item.isFourAway = false;
            });
            item.active = true;
            this.activeIndex = this.items.indexOf(item);
            this.items.forEach((item) => {
                let diff = Math.abs(this.items.indexOf(item) - this.activeIndex);
                if (diff == 3) {
                    item.isThreeAway = true;
                }
            });
            this.assignSelectedItem(item);
        }
    }
    assignSelectedItem(item) {
        this.xStart = undefined;
        this.xEnd = undefined;
        this.selectedItem = item;
        this.selectedItemIndex = this.items.indexOf(item);
        this.bannerIndicatorEl.style.right = '' + this.selectedItemIndex * 100 + '%';
        this.setInterval();
    }
    changeActive(index) {
        // reset timer to rotate when clicking on arrow button
        clearInterval(this.interval);
        let item;
        if (index === 'previous') {
            item = this.items[this.selectedItemIndex - 1] || this.items[this.items.length - 1];
        }
        if (index === 'next') {
            item = this.items[this.selectedItemIndex + 1] || this.items[0];
        }
        this.setActiveItem(item);
    }
    setInterval() {
        if (this.duration > 500) {
            this.interval = setInterval(() => {
                // Rotate carousel to the right based on the specified duration.
                // Must be greater than 500ms, as it takes that amount of time to switch slides.
                this.changeActive('next');
            }, this.duration);
        }
    }
    watchItemList() {
        this.observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    clearInterval(this.interval);
                    this.setBannerItemWidth();
                    this.setInterval();
                }
                if (mutation.removedNodes.length) {
                    clearInterval(this.interval);
                    this.setBannerItemWidth();
                    this.setActiveItem(this.items[0]);
                }
            });
        });
        this.observer.observe(this.el, { childList: true });
    }
    renderList() {
        return this.items.map((item) => {
            return [
                h("li", { class: { 'active': item.active, 'small-indicator': item.isThreeAway, 'hide': item.isFourAway } }),
            ];
        });
    }
    setBannerItemWidth() {
        this.items = Array.from(this.el.querySelectorAll('se-banner-item'));
        if (this.items.length) {
            this.items.forEach((item) => {
                item.style.width = '' + 100 / this.items.length + '%';
            });
        }
    }
    setIconSize() {
        let icons = Array.from(this.el.shadowRoot.querySelectorAll('se-icon'));
        icons.forEach((icon) => {
            if (window.innerWidth > 1280) {
                icon.size = 'xlarge';
            }
            else if (window.innerWidth > 767) {
                icon.size = 'large';
            }
            else {
                icon.size = 'medium';
            }
        });
    }
    componentWillLoad() {
        this.watchItemList();
    }
    componentDidLoad() {
        this.setBannerItemWidth();
        this.setActiveItem(this.items[0]);
        this.setIconSize();
    }
    componentDidUpdate() {
        this.setIconSize();
    }
    ;
    componentDidUnload() {
        clearInterval(this.interval);
        this.items.length = 0;
        this.selectedItem = undefined;
        this.selectedItemIndex = undefined;
    }
    render() {
        return [
            h("div", { class: "se-banner" },
                h("div", { class: "banner-items", ref: el => this.bannerIndicatorEl = el, style: { width: '' + this.items.length * 100 + '%' } },
                    h("slot", null)),
                this.items.length > 1 ? [
                    h("ol", { class: "banner-indicators" }, this.renderList()),
                    h("se-icon", { class: "previous-indicator", onClick: () => this.changeActive('previous') },
                        h("span", { innerHTML: arrow2_left })),
                    h("se-icon", { class: "next-indicator", onClick: () => this.changeActive('next') },
                        h("span", { innerHTML: arrow2_right }))
                ]
                    : '')
        ];
    }
    static get is() { return "se-banner"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["banner.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["banner.css"]
    }; }
    static get properties() { return {
        "duration": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Set the duration (in ms) that the banner will automatically switch slides.\nDefault is `6000`."
            },
            "attribute": "duration",
            "reflect": false,
            "defaultValue": "6000"
        }
    }; }
    static get states() { return {
        "items": {},
        "selectedItem": {},
        "selectedItemIndex": {}
    }; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "touchstart",
            "method": "handleTouchStart",
            "target": "window",
            "capture": false,
            "passive": true
        }, {
            "name": "touchmove",
            "method": "handleTouchMove",
            "target": "window",
            "capture": false,
            "passive": true
        }, {
            "name": "resize",
            "method": "windowSizeDidChange",
            "target": "window",
            "capture": false,
            "passive": true
        }]; }
}
