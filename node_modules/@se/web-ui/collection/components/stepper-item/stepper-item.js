import { Component, Event, h, Host, Prop, Watch } from "@stencil/core";
export class StepperItemComponent {
    validatedDidChange() {
        this.didValidate.emit(this.validated);
    }
    render() {
        return (h(Host, { class: [this.active ? 'active' : 'navitem-hidden'].join(' ') },
            h("slot", null)));
    }
    static get is() { return "se-stepper-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["stepper-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["stepper-item.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the label for your stepper item."
            },
            "attribute": "label",
            "reflect": false
        },
        "active": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the content for the currently selected step in the stepper."
            },
            "attribute": "active",
            "reflect": false
        },
        "validated": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates whether a required item's data has been validated.  Useful if using a form field.\nWhen the stepper component is set to linear mode, all stepper items will need to be validated before advancing the stpper."
            },
            "attribute": "validated",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "didValidate",
            "name": "didValidate",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event to send to the parent component when a stepper item's data is validated.\nThe boolean validated property is passed to the parent."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get watchers() { return [{
            "propName": "validated",
            "methodName": "validatedDidChange"
        }]; }
}
