import { Component, h, Watch, Element, Event, Prop, Listen } from '@stencil/core';
export class RadioGroupComponent {
    constructor() {
        /**
         * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
         */
        this.color = 'standard';
        /**
         * Defines the height of each button in the group.
         * `small` is the default setting, rendering a 32px height and a 14px font size.
         * `nano` sets the height to 24px and the font size to 12px.
         */
        this.size = 'small';
        /**
         * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        this.disabled = false;
    }
    disabledDidChange() {
        this.updateItemMode();
    }
    valueDidChange(value) {
        this.selectChild(this.children, value);
        this.didChange.emit(this.value);
    }
    buttonClickedHandler(event) {
        this.handleChildClicked(event);
    }
    radioButtonCheckedHandler(event) {
        this.handleChildClicked(event);
    }
    updateItemMode() {
        this.children.forEach((child) => {
            if (child.localName == 'se-button') {
                child.setGrouped();
                if (child.icon) {
                    child.iconOnly = true;
                }
            }
            if (this.disabled) {
                child.disabled = true;
            }
            child.size = this.size;
            child.color = this.color;
        });
    }
    handleChildClicked(event) {
        let buttonInfo = event.detail;
        this.value = buttonInfo.value;
        this.selectChild(this.children, this.value);
        this.didChange.emit(this.value);
    }
    selectChild(children, value) {
        children.forEach((child) => {
            child.selected = child.value === value;
        });
    }
    componentDidLoad() {
        this.children = this.el.querySelectorAll('se-button, se-radio');
        this.updateItemMode();
        this.selectChild(this.children, this.value);
    }
    render() {
        return (h("slot", null));
    }
    static get is() { return "se-radio-group"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["radio-group.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["radio-group.css"]
    }; }
    static get properties() { return {
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'standard' | 'alternative' | 'primary' | 'secondary'",
                "resolved": "\"alternative\" | \"primary\" | \"secondary\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'standard'"
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'small' | 'nano'",
                "resolved": "\"nano\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the height of each button in the group.\n`small` is the default setting, rendering a 32px height and a 14px font size.\n`nano` sets the height to 24px and the font size to 12px."
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "'small'"
        },
        "disabled": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the button is disabled.  Set to `false` by default."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "value": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the selected values of the array."
            },
            "attribute": "value",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "didChange",
            "name": "didChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Passes the selected button value to the parent component when clicking on a button in the group."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "disabled",
            "methodName": "disabledDidChange"
        }, {
            "propName": "value",
            "methodName": "valueDidChange"
        }]; }
    static get listeners() { return [{
            "name": "didClick",
            "method": "buttonClickedHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "didCheck",
            "method": "radioButtonCheckedHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
