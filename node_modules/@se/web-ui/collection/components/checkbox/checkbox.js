import { Component, Element, Event, h, Method, Prop } from "@stencil/core";
export class CheckboxComponent {
    constructor() {
        /**
         * Determines the visual appearance of the component.
         * `checkbox` is the default option, which will render the component like a standard HTML checkbox.
         * `switch` renders the component like a toggle switch.
         * `onoff` renders the component like an "on/off" switch, with a red "off" button and a green "on" button.
         */
        this.option = 'checkbox';
        /**
         * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
         */
        this.required = false;
        /**
         * Defines the color of the checkbox for when the option is set to `checkbox` or `switch`.
         * The default value is `success`, rendering a green color.
         * The `secondary` setting renders a blue color.
         */
        this.color = 'success';
        /**
         * Defines the color schema of the checkbox when the option is set to `onoff`.
         * The default value is `standard`.
         */
        this.background = 'standard';
        /**
         * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        /**
           * The "checked" state of the checkbox, `false` by default.
           */
        this.selected = false;
        /**
         * Defines the text the user will see for the "on" or "active" part of the checkbox when option is set to `onoff`.  Set to `ON` by default.
         */
        this.textOn = 'ON';
        /**
         * Defines the text the user will see for the "off" or "inactive" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default.
         */
        this.textOff = 'OFF';
        /**
         * Reduces the visual height of the checkbox when the option is set to `onoff`.
         * Useful if the on/off checkbox is within a header element.
         */
        this.header = false;
    }
    /**
     * Sets the required property on the checkbox element.  Used when the checkbox is within a form field.
     */
    async setRequired() {
        this.required = true;
    }
    setElementId() {
        let id = this.el.getAttribute('id');
        if (id && this.option === 'onoff') {
            this.el.shadowRoot.querySelector('button.active').setAttribute('id', 'wc-' + id + '-active');
            this.el.shadowRoot.querySelector('button.inactive').setAttribute('id', 'wc-' + id + '-inactive');
        }
        else if (id) {
            this.el.shadowRoot.querySelector('input').setAttribute('id', 'wc-' + id);
        }
    }
    handleClick() {
        if (!this.disabled) {
            this.selected = !this.selected;
            let checkboxObject = { value: this.value, selected: this.selected };
            this.didChange.emit(checkboxObject);
        }
    }
    componentDidLoad() {
        if (!this.labelPos) {
            this.labelPos = this.option === 'switch' ? 'left' : 'right';
        }
        this.setElementId();
    }
    render() {
        let markup, switchMarkup;
        if (this.option === 'switch' && this.required) {
            switchMarkup = [
                h("span", { class: "checkbox-label" }, this.label),
                h("span", { class: "required" }, "*")
            ];
        }
        else if (this.option === 'switch' && !this.required) {
            switchMarkup = h("span", { class: "checkbox-label" }, this.label);
        }
        if (this.option === 'onoff') {
            markup = (h("div", { class: "on-off-wrapper" },
                h("button", { class: ['active', this.selected ? ' selected' : ''].join(' '), onClick: () => this.handleClick() }, this.textOn),
                h("button", { class: ['inactive', !this.selected ? ' selected' : ''].join(' '), onClick: () => this.handleClick() }, this.textOff)));
        }
        else {
            markup = (h("div", { class: "checkbox-wrapper" },
                this.option === 'switch' && this.labelPos === 'left' ? switchMarkup : '',
                h("label", { class: ["checkbox-container", `checkbox-label-${this.labelPos}`].join(' '), "data-disabled": this.disabled },
                    this.option === 'checkbox' ? this.label : '',
                    this.option === 'checkbox' && this.required ? h("span", { class: "required" }, "*") : '',
                    h("input", { type: "checkbox", checked: this.selected, disabled: this.disabled, onClick: () => this.handleClick(), value: this.value }),
                    h("span", { class: "checkmark", "data-color": this.color })),
                this.option === 'switch' && this.labelPos === 'right' ? switchMarkup : ''));
        }
        return h("div", { class: [this.option, this.background, this.header ? 'header' : '', this.disabled ? 'disabled' : ''].join(' ') }, markup);
    }
    static get is() { return "se-checkbox"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["checkbox.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["checkbox.css"]
    }; }
    static get properties() { return {
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'checkbox' | 'onoff' | 'switch'",
                "resolved": "\"checkbox\" | \"onoff\" | \"switch\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Determines the visual appearance of the component.\n`checkbox` is the default option, which will render the component like a standard HTML checkbox.\n`switch` renders the component like a toggle switch.\n`onoff` renders the component like an \"on/off\" switch, with a red \"off\" button and a green \"on\" button."
            },
            "attribute": "option",
            "reflect": false,
            "defaultValue": "'checkbox'"
        },
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The value you want to pass to the parent component when the checkbox is checked."
            },
            "attribute": "value",
            "reflect": false
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The label of the checkbox that will be attached to the box."
            },
            "attribute": "label",
            "reflect": false
        },
        "required": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`."
            },
            "attribute": "required",
            "reflect": false,
            "defaultValue": "false"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'primary' | 'secondary' | 'success'",
                "resolved": "\"primary\" | \"secondary\" | \"success\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the color of the checkbox for when the option is set to `checkbox` or `switch`.\nThe default value is `success`, rendering a green color.\nThe `secondary` setting renders a blue color."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'success'"
        },
        "background": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'standard' | 'alternative'",
                "resolved": "\"alternative\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the color schema of the checkbox when the option is set to `onoff`.\nThe default value is `standard`."
            },
            "attribute": "background",
            "reflect": false,
            "defaultValue": "'standard'"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the checkbox is disabled.  Set to `false` by default."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "selected": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The \"checked\" state of the checkbox, `false` by default."
            },
            "attribute": "selected",
            "reflect": false,
            "defaultValue": "false"
        },
        "textOn": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the text the user will see for the \"on\" or \"active\" part of the checkbox when option is set to `onoff`.  Set to `ON` by default."
            },
            "attribute": "text-on",
            "reflect": false,
            "defaultValue": "'ON'"
        },
        "textOff": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the text the user will see for the \"off\" or \"inactive\" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default."
            },
            "attribute": "text-off",
            "reflect": false,
            "defaultValue": "'OFF'"
        },
        "header": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Reduces the visual height of the checkbox when the option is set to `onoff`.\nUseful if the on/off checkbox is within a header element."
            },
            "attribute": "header",
            "reflect": false,
            "defaultValue": "false"
        },
        "labelPos": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'left' | 'right'",
                "resolved": "\"left\" | \"right\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the position of the label for your checkbox component.\nThe default setting is `right` when the option is set to `checkbox`.\nThe default setting is `left` when the option is set to `switch`."
            },
            "attribute": "label-pos",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "didChange",
            "name": "didChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Send the checkbox value to the parent component when clicking on the checkbox."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setRequired": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the required property on the checkbox element.  Used when the checkbox is within a form field.",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
}
