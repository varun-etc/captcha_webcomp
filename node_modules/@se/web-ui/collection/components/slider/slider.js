import { Component, Element, h, Prop, Event, Method } from '@stencil/core';
export class SliderComponent {
    constructor() {
        /**
         * Indicates the initial value of your slider component when it loads.
         * The default value is `0`.
         */
        this.value = 0;
        /**
        * Indicates the minimum value of your slider.
        * The default value is `0`.
        */
        this.min = 0;
        /**
        * Indicates the maximum value of your slider.
        * The default value is `100`.
        */
        this.max = 100;
        /**
        * Indicates if your slider is disabled.
        * The default setting is `false`.
        */
        this.disabled = false;
    }
    /**
     * Sets the disabled property for slider component.
     * @param val: boolean, `true` or `false`.
     */
    async setDisabled(val) {
        this.disabled = val;
    }
    setInputId() {
        const id = this.el.getAttribute('id');
        if (id) {
            const input = this.el.shadowRoot.querySelector('input');
            input.setAttribute('id', 'wc-' + id);
        }
    }
    setSliderPosition() {
        const rangeInterval = (Number(this.max) - Number(this.min));
        const rangePercent = (Number(this.sliderElement.value) - Number(this.min)) / rangeInterval * 100;
        this.sliderElement.style.setProperty('--sx', rangePercent + '%');
    }
    handleEvent() {
        this.sliderElement.addEventListener('input', () => {
            this.setSliderPosition();
        });
        this.didChange.emit(this.sliderElement);
    }
    componentDidLoad() {
        this.setInputId();
        if (this.value < this.min) {
            this.value = this.min;
        }
        else if (this.value > this.max) {
            this.value = this.max;
        }
        this.sliderElement.value = this.value;
        this.setSliderPosition();
        this.handleEvent();
    }
    render() {
        return (h("label", { class: "slider-container" },
            this.label,
            h("input", { type: "range", min: this.min || "0", max: this.max, value: this.value || "0", disabled: this.disabled, ref: el => this.sliderElement = el, onChange: () => this.handleEvent() })));
    }
    static get is() { return "se-slider"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["slider.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["slider.css"]
    }; }
    static get properties() { return {
        "value": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the initial value of your slider component when it loads.\nThe default value is `0`."
            },
            "attribute": "value",
            "reflect": false,
            "defaultValue": "0"
        },
        "min": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the minimum value of your slider.\nThe default value is `0`."
            },
            "attribute": "min",
            "reflect": false,
            "defaultValue": "0"
        },
        "max": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates the maximum value of your slider.\nThe default value is `100`."
            },
            "attribute": "max",
            "reflect": false,
            "defaultValue": "100"
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The label of the slider that will be attached to the input."
            },
            "attribute": "label",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates if your slider is disabled.\nThe default setting is `false`."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "didChange",
            "name": "didChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event emitted when the slider has been changed."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "setDisabled": {
            "complexType": {
                "signature": "(val: boolean) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "val : boolean, `true` or `false`.",
                                "name": "param"
                            }],
                        "text": ": boolean, `true` or `false`."
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Sets the disabled property for slider component.",
                "tags": [{
                        "name": "param",
                        "text": "val : boolean, `true` or `false`."
                    }]
            }
        }
    }; }
    static get elementRef() { return "el"; }
}
