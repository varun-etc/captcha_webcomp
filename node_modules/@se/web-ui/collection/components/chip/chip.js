import { Component, Element, Event, h, Prop } from "@stencil/core";
import action_delete_cross from "@se/icons/svg/action_delete_cross.svg";
export class ChipComponent {
    constructor() {
        /**
        * Defines the size of the chip.
        * `nano` sets the font to 14px and the height to 24px.
        * `small` is the default option, with a 16px font and a 32px height.
        */
        this.size = 'small';
        /**
        * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
        */
        this.color = 'standard';
        /**
         * Indicates whether or not the chip has a close button.  Set to `false` by default.
         */
        this.canClose = false;
        /**
         * Indicates whether or not the chip is selected.  Set to `false` by default.
         */
        this.selected = false;
        /**
         * Indicates whether or not the chip is disabled.  Set to `false` by default.
         */
        this.disabled = false;
    }
    closeChip() {
        if (!this.disabled) {
            this.didClose.emit(this.value);
        }
    }
    render() {
        return (h("div", { class: [
                'se-chip',
                this.size,
                this.color,
                this.selected ? 'selected' : '',
                this.disabled ? 'disabled' : '',
                this.block ? 'display-block' : ''
            ].join(' ') },
            h("div", { class: ['value', this.canClose ? 'can-close' : ''].join(' ') }, this.value),
            this.canClose ? h("se-icon", { class: "close", onClick: () => this.closeChip() },
                h("span", { innerHTML: action_delete_cross })) : ''));
    }
    static get is() { return "se-chip"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["chip.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["chip.css"]
    }; }
    static get properties() { return {
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The text you want to display in your chip."
            },
            "attribute": "value",
            "reflect": false
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'nano' | 'small'",
                "resolved": "\"nano\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the size of the chip.\n`nano` sets the font to 14px and the height to 24px.\n`small` is the default option, with a 16px font and a 32px height."
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "'small'"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'standard' | 'alternative'",
                "resolved": "\"alternative\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the background color of the chip.  The default setting is `standard`, which is a light gray color."
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'standard'"
        },
        "canClose": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates whether or not the chip has a close button.  Set to `false` by default."
            },
            "attribute": "can-close",
            "reflect": false,
            "defaultValue": "false"
        },
        "selected": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates whether or not the chip is selected.  Set to `false` by default."
            },
            "attribute": "selected",
            "reflect": false,
            "defaultValue": "false"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates whether or not the chip is disabled.  Set to `false` by default."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "block": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property that defines if the chip displays as a block in it's container.\nWhen set to true, the chip will be as wide as its container."
            },
            "attribute": "block",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "didClose",
            "name": "didClose",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Send the chip value to the parent component when clicking the close button of a chip."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
}
