import { Component, h, Host, Prop, State, Watch } from "@stencil/core";
export class VisualRadialComponent {
    constructor() {
        /**
         * Determines the visual size of your circular progress bar.  The default setting is `large`.
         */
        this.size = 'large';
        /**
         * Sets the color of the visual "progress bar".
         * The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58).
         * By default, the progress bar will have a green color.
         */
        this.secolor = 'primary';
        this.isHexColor = false;
    }
    sizeDidChange() {
        this.svgSize = (this.size == 'small') ? 82 : 164;
        this.circleDimensions = (this.size == 'small') ? 41 : 82;
        this.circleRadius = (this.size == 'small') ? 33 : 66;
        const circumference = (this.size == 'small') ? 66 * Math.PI : 132 * Math.PI;
        this.offset = circumference - this.percentage / 100 * circumference;
    }
    colorDidChange() {
        this.isHexColor = (this.secolor && this.secolor.indexOf('#') !== -1) ? true : false;
    }
    componentDidLoad() {
        this.colorDidChange();
        this.sizeDidChange();
    }
    render() {
        return (h(Host, { class: !this.isHexColor ? `color-${this.secolor}` : '' },
            h("div", { class: ["visual-radial-wrapper", this.size].join(' ') },
                h("svg", { class: "se-visual-radial", height: this.svgSize, width: this.svgSize },
                    h("circle", { cx: this.circleDimensions, cy: this.circleDimensions, r: this.circleRadius, stroke: "#f7f7f7", "stroke-width": "8", fill: "transparent" }),
                    h("circle", { cx: this.circleDimensions, cy: this.circleDimensions, r: this.circleRadius, stroke: this.isHexColor ? this.secolor : 'currentColor', "stroke-width": "8", fill: "transparent", style: { strokeDashoffset: String(this.offset) } }),
                    "Sorry, your browser does not support inline SVG."),
                h("svg", { height: this.svgSize, width: this.svgSize },
                    h("text", null,
                        this.value ? h("tspan", { class: "radial-value", x: "50%", y: "50%", "text-anchor": "middle" }, this.value) : '',
                        h("tspan", { class: "radial-label", x: "50%", y: this.value ? "70%" : "53%", "text-anchor": "middle" }, this.label))))));
    }
    static get is() { return "se-visual-radial"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["visual-radial.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["visual-radial.css"]
    }; }
    static get properties() { return {
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'small' | 'large'",
                "resolved": "\"large\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Determines the visual size of your circular progress bar.  The default setting is `large`."
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "'large'"
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the text value of the label in your component."
            },
            "attribute": "label",
            "reflect": false
        },
        "value": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the value of your component."
            },
            "attribute": "value",
            "reflect": false
        },
        "secolor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the color of the visual \"progress bar\".\nThe string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58).\nBy default, the progress bar will have a green color."
            },
            "attribute": "secolor",
            "reflect": false,
            "defaultValue": "'primary'"
        },
        "percentage": {
            "type": "number",
            "mutable": true,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Set the percentage of the \"progress bar\" to be \"filled\"."
            },
            "attribute": "percentage",
            "reflect": false
        }
    }; }
    static get states() { return {
        "isHexColor": {},
        "offset": {},
        "circleDimensions": {},
        "circleRadius": {},
        "svgSize": {}
    }; }
    static get watchers() { return [{
            "propName": "size",
            "methodName": "sizeDidChange"
        }, {
            "propName": "secolor",
            "methodName": "colorDidChange"
        }]; }
}
