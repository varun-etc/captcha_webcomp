import { Component, Element, h, Prop, Host } from "@stencil/core";
export class BlockHeader {
    render() {
        return (h(Host, null,
            h("div", { class: ['se-block-header', this.option].join(' ') },
                h("slot", { name: "start" }),
                h("div", { class: "flex middle" },
                    h("slot", null)),
                h("slot", { name: "end" })),
            this.divider ? h("se-divider", null) : null));
    }
    static get is() { return "se-block-header"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["block-header.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["block-header.css"]
    }; }
    static get properties() { return {
        "divider": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines whether or not a divider will be applied to the se-block-header.\nThe se-block component's divider property will be applied to the se-block-header component."
            },
            "attribute": "divider",
            "reflect": false
        },
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'card' | 'widget' | 'basic' | 'fill'",
                "resolved": "\"basic\" | \"card\" | \"fill\" | \"widget\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the visual appearance of a header.\nUpdated automatically by the `se-block` component when the option is set to `card`, which will update the design of the header with respect to the card design.\n`fill` removes all spacing, for example with use of the `se-tabbar` option `content`."
            },
            "attribute": "option",
            "reflect": false
        }
    }; }
    static get elementRef() { return "el"; }
}
