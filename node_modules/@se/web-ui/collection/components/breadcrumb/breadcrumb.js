import { Component, Element, h, State } from "@stencil/core";
export class BreadcrumbComponent {
    constructor() {
        this.items = [];
    }
    updateLastItem() {
        this.items = Array.from(this.el.querySelectorAll('se-breadcrumb-item'));
        this.items.forEach((item) => {
            item.isLast = (item === this.items[this.items.length - 1]);
        });
    }
    watchItemList() {
        this.observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length || mutation.removedNodes.length) {
                    this.updateLastItem();
                }
            });
        });
        this.observer.observe(this.el, { childList: true });
    }
    componentWillLoad() {
        this.updateLastItem();
        this.watchItemList();
    }
    componentDidUnload() {
        this.observer.disconnect();
    }
    render() {
        return (h("nav", { "aria-label": "breadcrumb" },
            h("ol", null,
                h("slot", null))));
    }
    static get is() { return "se-breadcrumb"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["breadcrumb.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["breadcrumb.css"]
    }; }
    static get states() { return {
        "items": {}
    }; }
    static get elementRef() { return "el"; }
}
