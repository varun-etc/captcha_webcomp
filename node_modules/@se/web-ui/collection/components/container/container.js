import { Component, h, Host, Prop, Watch, Element } from "@stencil/core";
export class ContainerComponent {
    constructor() {
        /**
         * Defines the inner appearance of a container.
         * `fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set.
         * `widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set.
         * `centered` centers the container so the content does not exceed a maximum width.
         * `card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set.
         * Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         * `inherited` will insure that no specific style is applied to the container.
         */
        this.option = "fill";
        /**
         * In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box.
         * `relative` is the default position. This is perfect to use with flex content.
         * `absolute` is useful in specific cases. Make sure you know what you are doing.
         */
        this.position = "relative";
        /**
         * Defines the direction of the flex element.
         * `row` is the default direction. This is perfect to use with flex content.
         * `column` is useful in specific cases. Make sure you know what you are doing.
         */
        this.direction = "row";
        /**
         * Defines how to display the element.
         * `flex` is the default display.
         * `block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block".
         */
        this.display = "flex";
        /**
         * When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there.
         * Default is `350px`.
         */
        this.columnSize = '350px';
        /**
         * When in `display="grid"`, defines the height of each container.  Default is `300px`.
         */
        this.rowSize = '300px';
    }
    optionDidChange() {
        if (this.color === undefined || this.color === null) {
            if (this.option === "widget") {
                this.color = "standard";
                this.setProps();
            }
            else if (this.option === "card") {
                this.color = "alternative";
                this.setProps();
            }
        }
    }
    displayDidChange() {
        // Only direct children will be impacted by the display property
        Array.from(this.el.querySelectorAll("se-container > se-block")).forEach((item) => {
            item.display = this.display;
        });
    }
    columnSizeDidChange() {
        if (this.display === 'grid') {
            this.el.style.gridTemplateColumns = `repeat(auto-fit, minmax(${this.columnSize}, 1fr))`;
        }
    }
    rowSizeDidChange() {
        if (this.display === 'grid') {
            this.el.style.gridAutoRows = this.rowSize;
        }
    }
    setProps() {
        Array.from(this.el.querySelectorAll("se-container > se-block")).forEach((item) => {
            if (this.option === "widget" || this.option === "card" || this.option === "card-old")
                item.option = this.option;
        });
    }
    componentWillLoad() {
        this.setProps(); // not having this called here makes the original/new function not actually work as expected. the original function would return this.option as undefined.
        this.optionDidChange();
        this.displayDidChange();
        this.columnSizeDidChange();
        this.rowSizeDidChange();
    }
    render() {
        return (h(Host, { class: [
                this.option !== "card-old" ? `${this.option}-content` : "card-content",
                this.position,
                this.color ? `ct-bg-${this.color}` : '',
                `${this.direction}-dir`,
                `${this.display}-display`,
                this.padding ? `ct-padding-${this.padding}` : ''
            ]
                .join(' ') }, this.option === "centered" ? h("div", { class: "wrapper-center" },
            h("slot", null)) : h("slot", null)));
    }
    static get is() { return "se-container"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["container.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["container.css"]
    }; }
    static get properties() { return {
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"fill\" | \"widget\" | \"card\" | \"card-old\" | \"centered\" | \"inherited\"",
                "resolved": "\"card\" | \"card-old\" | \"centered\" | \"fill\" | \"inherited\" | \"widget\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the inner appearance of a container.\n`fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set.\n`widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set.\n`centered` centers the container so the content does not exceed a maximum width.\n`card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set.\nPending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.\n`inherited` will insure that no specific style is applied to the container."
            },
            "attribute": "option",
            "reflect": false,
            "defaultValue": "\"fill\""
        },
        "position": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"relative\" | \"absolute\"",
                "resolved": "\"absolute\" | \"relative\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box.\n`relative` is the default position. This is perfect to use with flex content.\n`absolute` is useful in specific cases. Make sure you know what you are doing."
            },
            "attribute": "position",
            "reflect": false,
            "defaultValue": "\"relative\""
        },
        "direction": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"column\" | \"row\"",
                "resolved": "\"column\" | \"row\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the direction of the flex element.\n`row` is the default direction. This is perfect to use with flex content.\n`column` is useful in specific cases. Make sure you know what you are doing."
            },
            "attribute": "direction",
            "reflect": false,
            "defaultValue": "\"row\""
        },
        "display": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"flex\" | \"block\" | \"grid\"",
                "resolved": "\"block\" | \"flex\" | \"grid\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines how to display the element.\n`flex` is the default display.\n`block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have \"display: block\"."
            },
            "attribute": "display",
            "reflect": false,
            "defaultValue": "\"flex\""
        },
        "padding": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"none\" | \"small\" | \"medium\" | \"large\" | \"xlarge\"",
                "resolved": "\"large\" | \"medium\" | \"none\" | \"small\" | \"xlarge\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the spacing around the inside edge of a container.\n`none` is 0px.\n`small` is 4px.\n`medium` is 8px.\n`large` is 16px.\n`xlarge` is 32px."
            },
            "attribute": "padding",
            "reflect": false
        },
        "columnSize": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "When in `display=\"grid\"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there.\nDefault is `350px`."
            },
            "attribute": "column-size",
            "reflect": false,
            "defaultValue": "'350px'"
        },
        "rowSize": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "When in `display=\"grid\"`, defines the height of each container.  Default is `300px`."
            },
            "attribute": "row-size",
            "reflect": false,
            "defaultValue": "'300px'"
        },
        "color": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "\"none\" | \"standard\" | \"alternative\"",
                "resolved": "\"alternative\" | \"none\" | \"standard\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the background color of the container.\n`none` has no background.\n`standard` is `se-background`, light gray.\n`alternative` is a white background."
            },
            "attribute": "color",
            "reflect": false
        }
    }; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "option",
            "methodName": "optionDidChange"
        }, {
            "propName": "display",
            "methodName": "displayDidChange"
        }, {
            "propName": "columnSize",
            "methodName": "columnSizeDidChange"
        }, {
            "propName": "rowSize",
            "methodName": "rowSizeDidChange"
        }]; }
}
