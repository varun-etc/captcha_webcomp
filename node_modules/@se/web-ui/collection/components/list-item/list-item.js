import { Component, Host, h, Prop, Element, Watch, Event, State } from "@stencil/core";
import arrow2_right from "@se/icons/svg/arrow2_right.svg";
export class ListItemComponent {
    constructor() {
        /**
         * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        this.indentation = 0;
    }
    SelectedDidChange() {
        this.didSelectedChange.emit();
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    getClosestParent() {
        // get the closest between se-list or se-list-group
        return this.el.parentElement.closest("se-list, se-list-group");
    }
    getParentConfig() {
        const closest = this.getClosestParent() || {};
        const indentation = closest.indentation;
        if (indentation !== null && indentation !== undefined) {
            this.indentation = indentation + 1;
        }
        if (closest.option) {
            this.option = closest.option;
        }
    }
    componentWillLoad() {
        this.getParentConfig();
    }
    componentDidLoad() {
        this.setButtonId();
    }
    render() {
        let myDescription = null;
        let title = this.item;
        if (!!this.description) {
            myDescription = h("small", null, this.description);
            title = `${title}, ${this.description}`;
        }
        ;
        const TagType = this.href === undefined ? 'button' : 'a';
        const attrs = (TagType === 'a') ? { href: this.href } : {};
        const icon = this.option !== "treeview" ?
            h("se-icon", { color: this.iconColor }, this.icon)
            :
                this.indentation !== 0 ?
                    h("se-icon", { color: this.iconColor, style: { paddingLeft: `8px` } }, this.icon)
                    :
                        h("se-icon", { color: this.iconColor }, this.icon);
        const padding = this.option !== "treeview" ? 20 : 24;
        return (h(Host, { role: "listitem" },
            h(TagType, Object.assign({}, attrs, { title: title, class: { "selected": this.selected, ["button"]: true, [this.option]: true, ["se-list-item"]: true }, style: { paddingLeft: `${padding * this.indentation}px` }, id: this.innerId }),
                (this.option === "nav" && this.selected) ? h("div", { class: "selectedBar" }) : '',
                h("div", { class: "nav-icon" },
                    !!this.icon ? icon : '',
                    h("slot", { name: "icon" })),
                h("div", { class: "nav-content" },
                    h("div", { class: "list-item-label" }, this.item),
                    myDescription),
                h("slot", null),
                this.option === "nav" ? h("se-icon", { size: "medium" },
                    h("span", { innerHTML: arrow2_right })) : '')));
    }
    static get is() { return "se-list-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["list-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["list-item.css"]
    }; }
    static get properties() { return {
        "item": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the title of the item."
            },
            "attribute": "item",
            "reflect": false
        },
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the description of the item, placed under its title."
            },
            "attribute": "description",
            "reflect": false
        },
        "selected": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines if the list element should be selected or not."
            },
            "attribute": "selected",
            "reflect": false
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Places an icon on the left side of the item list."
            },
            "attribute": "icon",
            "reflect": false
        },
        "iconColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"standard\" | \"alternative\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"error\"",
                "resolved": "\"alternative\" | \"error\" | \"primary\" | \"secondary\" | \"standard\" | \"success\" | \"warning\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property to define the color of the icon. The default color will be inherited from it's parent."
            },
            "attribute": "icon-color",
            "reflect": false
        },
        "indentation": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the group indentation to add paddings to the list item (used with multiple list groups)."
            },
            "attribute": "indentation",
            "reflect": false,
            "defaultValue": "0"
        },
        "option": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "\"nav\" | \"classic\" | \"dropdown\" | \"treeview\" | \"headline\"",
                "resolved": "\"classic\" | \"dropdown\" | \"headline\" | \"nav\" | \"treeview\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the style of the list. The default setting is `classic`, and the style will be handled and modified by the parent element."
            },
            "attribute": "option",
            "reflect": false
        },
        "href": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Determines if se-item configures an `a` tag with an `href` attibute.\nDefault when href is blank configures as a `button` tag."
            },
            "attribute": "href",
            "reflect": false
        }
    }; }
    static get states() { return {
        "innerId": {}
    }; }
    static get events() { return [{
            "method": "didSelectedChange",
            "name": "didSelectedChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event emitted to notify the list-group component that the selected state has changed."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "selected",
            "methodName": "SelectedDidChange"
        }]; }
}
