import { Component, h, Method, Element, State, Prop, Event } from '@stencil/core';
import test_results_nok from "@se/icons/svg/test_results_nok.svg";
const SHOW_MENU = 'show-menu';
const HIDE_MENU = 'hide-menu';
const OPEN_ITEM = 'open-item';
export class SidemenuComponent {
    constructor() {
        this.open = false;
        this.items = [];
        /**
         * Defines the text displayed in the header of the Sidemenu.
         * The default value is `Menu`.
         */
        this.label = 'Menu';
        /*
        * Defines the link to be uses in the external-link element of the Sidemenu.
        * The default value is www.se.com, which will generate if no link is defined.
        * If a different url is provided it will replace the default value.
        * If an empty string is provided the external link element will not be generated.
       */
        this.link = 'www.se.com';
    }
    /**
     * Toggle the sidemenu. Optionally, pass the `item` or `id` of a sidemenu-item to open that particular menu item.
     *
     * ex: `document.getElementById("main-sidemenu").toggle("side-about");`
     */
    async toggle(itemName) {
        // Only perform toggle if no item name is passed or menu is closed
        if (!this.open || !itemName || itemName && !this.open) {
            // Only perform open animation if menu is closed
            if (!this.open) {
                this.el.classList.add(SHOW_MENU);
                this.addAnimation(null);
            }
            this.open = !this.open;
        }
        else if (this.selectedItem && this.isItemElement(this.selectedItem, itemName)) {
            // Deselect the active item if a new item name is passed
            this.unselectAll();
        }
        if (this.open) {
            if (itemName) {
                // If an item name was provided, open that item in the menu (#228)
                const itemElement = this.getItemElement(itemName);
                if (itemElement) {
                    // Select the new active element
                    this.setActive(itemElement);
                }
            }
            else {
                try {
                    if (this.items.find(x => x.classList.contains('active'))) {
                        this.el.classList.add(OPEN_ITEM);
                    }
                }
                catch (error) {
                    console.log(error);
                }
            }
            // Dispatch the 'opened' event
            this.toggled.emit({ state: 'open' });
        }
        else {
            // Remove css classes and unselect the active element
            this.removeAnimation(() => {
                this.el.classList.remove(SHOW_MENU);
            });
            this.unselectAll();
            // Dispatch the 'closed' event
            this.toggled.emit({ state: 'closed' });
        }
    }
    noSelectedItem() {
        return !this.items.find(x => x === this.selectedItem);
    }
    unselectAll() {
        this.el.classList.remove(OPEN_ITEM);
        if (this.selectedItem && !this.selectedItem.childElementCount) {
            this.selectedItem = undefined;
            this.items.forEach((item) => {
                item.active = false;
            });
        }
    }
    getItemElement(name) {
        return this.items.find(i => this.isItemElement(i, name));
    }
    isItemElement(elm, name) {
        return elm.getAttribute('item') === name || elm.getAttribute('id') === name;
    }
    setActive(item) {
        if (this.items.length) {
            this.items.forEach((item) => {
                item.active = false;
            });
            setTimeout(() => {
                item.active = true;
                this.selectedItem = item;
                this.el.classList.add(OPEN_ITEM);
            }, 100);
        }
    }
    addAnimation(callback) {
        try {
            this.menuInnerEl.classList.add(SHOW_MENU);
            this.backdropEl.classList.add(SHOW_MENU);
            setTimeout(() => {
                this.menuInnerEl.classList.remove(SHOW_MENU);
                this.backdropEl.classList.remove(SHOW_MENU);
                callback && callback();
            }, 200);
        }
        catch (error) {
            console.log(error);
        }
    }
    removeAnimation(callback) {
        try {
            this.menuInnerEl.classList.add(HIDE_MENU);
            this.backdropEl.classList.add(HIDE_MENU);
            setTimeout(() => {
                this.menuInnerEl.classList.remove(HIDE_MENU);
                this.backdropEl.classList.remove(HIDE_MENU);
                callback && callback();
            }, 200);
        }
        catch (error) {
            console.log(error);
        }
    }
    watchItemList() {
        this.observer = new MutationObserver((mutations) => {
            let activeItem = false;
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    this.setItemsArray();
                }
                if (mutation.removedNodes.length) {
                    this.setItemsArray();
                    this.items.forEach((item) => {
                        if (item.active) {
                            activeItem = true;
                        }
                    });
                    if (!activeItem && this.selectedItem) {
                        // console.log(this.selectedItem);
                        this.selectedItem = undefined;
                    }
                }
            });
        });
        this.observer.observe(this.el, { childList: true });
    }
    setItemsArray() {
        this.items = Array.from(this.el.querySelectorAll('se-sidemenu-item'));
    }
    renderList() {
        return this.items.map((item) => {
            return [
                h("se-list-item", { class: [!item.childElementCount ? 'hide-nav-icon' : '', 'sidemenu-list-item'].join(' '), option: "nav", onClick: () => this.setActive(item), selected: item.active, item: item.item, id: item.id ? `list-${item.id}` : '' }),
            ];
        });
    }
    componentWillLoad() {
        this.setItemsArray();
        this.watchItemList();
    }
    componentDidUnload() {
        this.items.length = 0;
        this.selectedItem = undefined;
        this.observer.disconnect();
    }
    render() {
        return [
            h("div", { class: "menu-background animated d-flex-row flex", onClick: () => this.toggle(), ref: el => this.backdropEl = el }),
            h("div", { class: "actual-menu animated full-content d-flex-column flex", ref: el => this.menuInnerEl = el },
                h("div", { class: "d-flex flex" },
                    h("se-block", { width: "250px" },
                        h("div", { class: "d-flex-center flex" },
                            h("span", { class: "menu-sidenav", onClick: () => this.toggle() },
                                h("se-icon", { size: "large", color: "primary" },
                                    h("span", { innerHTML: test_results_nok }))),
                            h("h3", { class: "header-title" }, this.label)),
                        h("se-divider", null),
                        h("se-block-content", { option: "fill" },
                            h("se-list", { option: "nav" }, this.renderList())),
                        h("se-icon-lifeison", { class: "footer-icon", color: "standard" }),
                        this.link ?
                            h("div", { class: "external-link" },
                                h("se-link", { class: "sidemenu-link", url: `http://${this.link}` }, this.link)) : ''),
                    h("se-divider", { option: "vertical" }),
                    h("se-block", { ref: el => this.menuItemInnerEl = el },
                        h("slot", null))))
        ];
    }
    static get is() { return "se-sidemenu"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["sidemenu.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["sidemenu.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the text displayed in the header of the Sidemenu.\nThe default value is `Menu`."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "'Menu'"
        },
        "link": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "link",
            "reflect": false,
            "defaultValue": "'www.se.com'"
        }
    }; }
    static get states() { return {
        "open": {},
        "items": {},
        "selectedItem": {}
    }; }
    static get events() { return [{
            "method": "toggled",
            "name": "toggled",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "When the menu is opened, it will trigger a `toggled` event with `event.detail.state` set to `open`.\nWhen the menu is closed, it will trigger a `toggled` event with `event.detail.state` set to `closed`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "toggle": {
            "complexType": {
                "signature": "(itemName?: string) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Toggle the sidemenu. Optionally, pass the `item` or `id` of a sidemenu-item to open that particular menu item.\n\nex: `document.getElementById(\"main-sidemenu\").toggle(\"side-about\");`",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
}
