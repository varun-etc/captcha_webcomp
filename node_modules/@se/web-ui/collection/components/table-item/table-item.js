import { Component, Host, h, Prop, Element } from "@stencil/core";
export class TableItemComponent {
    constructor() {
        this.option = 'text';
        /**
         * Optional property defines the tag type within the `se-table-item`.
         * Default value `false` defines the tag type as `div`.
         * `true` defines the tag type as a `button`.
         */
        this.clickable = false;
    }
    render() {
        const displayStyle = {
            flex: this.flex || '',
            maxWidth: this.width || '',
            width: this.width || '',
            minWidth: this.minWidth || ''
        };
        return (h(Host, { role: "cell", class: ["se-table-item", `opt-${this.option}`].join(' '), style: displayStyle },
            h("div", { class: "table-item-content" },
                h("div", { class: "table-item-label" },
                    h("slot", null)))));
    }
    static get is() { return "se-table-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["table-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["table-item.css"]
    }; }
    static get properties() { return {
        "option": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'dropdown' | 'text' | 'custom'",
                "resolved": "\"custom\" | \"dropdown\" | \"text\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "option",
            "reflect": false,
            "defaultValue": "'text'"
        },
        "flex": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the specific flex-basis of a block."
            },
            "attribute": "flex",
            "reflect": false
        },
        "width": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the specific width of a block, for items that should not be flexible."
            },
            "attribute": "width",
            "reflect": false
        },
        "minWidth": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex."
            },
            "attribute": "min-width",
            "reflect": false
        },
        "clickable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Optional property defines the tag type within the `se-table-item`.\nDefault value `false` defines the tag type as `div`.\n`true` defines the tag type as a `button`."
            },
            "attribute": "clickable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "el"; }
}
