'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const CONTENT_REF_ID = 'r';
const ORG_LOCATION_ID = 'o';
const SLOT_NODE_ID = 's';
const TEXT_NODE_ID = 't';
const XLINK_NS = 'http://www.w3.org/1999/xlink';

const attrHandler = {
  get(obj, prop) {
    if (prop in obj) {
      return obj[prop];
    }
    if (!isNaN(prop)) {
      return obj.__items[prop];
    }
    return undefined;
  },
};
const createAttributeProxy = (caseInsensitive) => new Proxy(new MockAttributeMap(caseInsensitive), attrHandler);
class MockAttributeMap {
  constructor(caseInsensitive = false) {
    this.caseInsensitive = caseInsensitive;
    this.__items = [];
  }
  get length() {
    return this.__items.length;
  }
  item(index) {
    return this.__items[index] || null;
  }
  setNamedItem(attr) {
    attr.namespaceURI = null;
    this.setNamedItemNS(attr);
  }
  setNamedItemNS(attr) {
    if (attr != null && attr.value != null) {
      attr.value = String(attr.value);
    }
    const existingAttr = this.__items.find(a => a.name === attr.name && a.namespaceURI === attr.namespaceURI);
    if (existingAttr != null) {
      existingAttr.value = attr.value;
    }
    else {
      this.__items.push(attr);
    }
  }
  getNamedItem(attrName) {
    if (this.caseInsensitive) {
      attrName = attrName.toLowerCase();
    }
    return this.getNamedItemNS(null, attrName);
  }
  getNamedItemNS(namespaceURI, attrName) {
    namespaceURI = getNamespaceURI(namespaceURI);
    return this.__items.find(attr => attr.name === attrName && getNamespaceURI(attr.namespaceURI) === namespaceURI) || null;
  }
  removeNamedItem(attr) {
    this.removeNamedItemNS(attr);
  }
  removeNamedItemNS(attr) {
    for (let i = 0, ii = this.__items.length; i < ii; i++) {
      if (this.__items[i].name === attr.name && this.__items[i].namespaceURI === attr.namespaceURI) {
        this.__items.splice(i, 1);
        break;
      }
    }
  }
}
function getNamespaceURI(namespaceURI) {
  return namespaceURI === XLINK_NS ? null : namespaceURI;
}
function cloneAttributes(srcAttrs, sortByName = false) {
  const dstAttrs = new MockAttributeMap(srcAttrs.caseInsensitive);
  if (srcAttrs != null) {
    const attrLen = srcAttrs.length;
    if (sortByName && attrLen > 1) {
      const sortedAttrs = [];
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        sortedAttrs.push(dstAttr);
      }
      sortedAttrs.sort(sortAttributes).forEach(attr => {
        dstAttrs.setNamedItemNS(attr);
      });
    }
    else {
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        dstAttrs.setNamedItemNS(dstAttr);
      }
    }
  }
  return dstAttrs;
}
function sortAttributes(a, b) {
  if (a.name < b.name)
    return -1;
  if (a.name > b.name)
    return 1;
  return 0;
}
class MockAttr {
  constructor(attrName, attrValue, namespaceURI = null) {
    this._name = attrName;
    this._value = String(attrValue);
    this._namespaceURI = namespaceURI;
  }
  get name() {
    return this._name;
  }
  set name(value) {
    this._name = value;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    this._value = String(value);
  }
  get nodeName() {
    return this._name;
  }
  set nodeName(value) {
    this._name = value;
  }
  get nodeValue() {
    return this._value;
  }
  set nodeValue(value) {
    this._value = String(value);
  }
  get namespaceURI() {
    return this._namespaceURI;
  }
  set namespaceURI(namespaceURI) {
    this._namespaceURI = namespaceURI;
  }
}

class MockCustomElementRegistry {
  constructor(win) {
    this.win = win;
  }
  define(tagName, cstr, options) {
    if (tagName.toLowerCase() !== tagName) {
      throw new Error(`Failed to execute 'define' on 'CustomElementRegistry': "${tagName}" is not a valid custom element name`);
    }
    if (this.__registry == null) {
      this.__registry = new Map();
    }
    this.__registry.set(tagName, { cstr, options });
    if (this.__whenDefined != null) {
      const whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns != null) {
        whenDefinedResolveFns.forEach(whenDefinedResolveFn => {
          whenDefinedResolveFn();
        });
        whenDefinedResolveFns.length = 0;
        this.__whenDefined.delete(tagName);
      }
    }
    const doc = this.win.document;
    if (doc != null) {
      const hosts = doc.querySelectorAll(tagName);
      hosts.forEach(host => {
        if (upgradedElements.has(host) === false) {
          tempDisableCallbacks.add(doc);
          const upgradedCmp = createCustomElement(this, doc, tagName);
          for (let i = 0; i < host.childNodes.length; i++) {
            const childNode = host.childNodes[i];
            childNode.remove();
            upgradedCmp.appendChild(childNode);
          }
          tempDisableCallbacks.delete(doc);
          if (proxyElements.has(host)) {
            proxyElements.set(host, upgradedCmp);
          }
        }
        fireConnectedCallback(host);
      });
    }
  }
  get(tagName) {
    if (this.__registry != null) {
      const def = this.__registry.get(tagName.toLowerCase());
      if (def != null) {
        return def.cstr;
      }
    }
    return undefined;
  }
  upgrade(_rootNode) {
    //
  }
  clear() {
    if (this.__registry != null) {
      this.__registry.clear();
    }
    if (this.__whenDefined != null) {
      this.__whenDefined.clear();
    }
  }
  whenDefined(tagName) {
    tagName = tagName.toLowerCase();
    if (this.__registry != null && this.__registry.has(tagName) === true) {
      return Promise.resolve();
    }
    return new Promise(resolve => {
      if (this.__whenDefined == null) {
        this.__whenDefined = new Map();
      }
      let whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns == null) {
        whenDefinedResolveFns = [];
        this.__whenDefined.set(tagName, whenDefinedResolveFns);
      }
      whenDefinedResolveFns.push(resolve);
    });
  }
}
function createCustomElement(customElements, ownerDocument, tagName) {
  const Cstr = customElements.get(tagName);
  if (Cstr != null) {
    const cmp = new Cstr(ownerDocument);
    cmp.nodeName = tagName.toUpperCase();
    upgradedElements.add(cmp);
    return cmp;
  }
  const host = new Proxy({}, {
    get(obj, prop) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        return elm[prop];
      }
      return obj[prop];
    },
    set(obj, prop, val) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        elm[prop] = val;
      }
      else {
        obj[prop] = val;
      }
      return true;
    },
    has(obj, prop) {
      const elm = proxyElements.get(host);
      if (prop in elm) {
        return true;
      }
      if (prop in obj) {
        return true;
      }
      return false;
    },
  });
  const elm = new MockHTMLElement(ownerDocument, tagName);
  proxyElements.set(host, elm);
  return host;
}
const proxyElements = new WeakMap();
const upgradedElements = new WeakSet();
function connectNode(ownerDocument, node) {
  node.ownerDocument = ownerDocument;
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    if (ownerDocument != null && node.nodeName.includes('-')) {
      const win = ownerDocument.defaultView;
      if (win != null && typeof node.connectedCallback === 'function' && node.isConnected) {
        fireConnectedCallback(node);
      }
      const shadowRoot = node.shadowRoot;
      if (shadowRoot != null) {
        shadowRoot.childNodes.forEach(childNode => {
          connectNode(ownerDocument, childNode);
        });
      }
    }
    node.childNodes.forEach(childNode => {
      connectNode(ownerDocument, childNode);
    });
  }
  else {
    node.childNodes.forEach(childNode => {
      childNode.ownerDocument = ownerDocument;
    });
  }
}
function fireConnectedCallback(node) {
  if (typeof node.connectedCallback === 'function') {
    if (tempDisableCallbacks.has(node.ownerDocument) === false) {
      try {
        node.connectedCallback();
      }
      catch (e) {
        console.error(e);
      }
    }
  }
}
function disconnectNode(node) {
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    if (node.nodeName.includes('-') === true && typeof node.disconnectedCallback === 'function') {
      if (tempDisableCallbacks.has(node.ownerDocument) === false) {
        try {
          node.disconnectedCallback();
        }
        catch (e) {
          console.error(e);
        }
      }
    }
    node.childNodes.forEach(disconnectNode);
  }
}
function attributeChanged(node, attrName, oldValue, newValue) {
  attrName = attrName.toLowerCase();
  const observedAttributes = node.constructor.observedAttributes;
  if (Array.isArray(observedAttributes) === true && observedAttributes.some(obs => obs.toLowerCase() === attrName) === true) {
    try {
      node.attributeChangedCallback(attrName, oldValue, newValue);
    }
    catch (e) {
      console.error(e);
    }
  }
}
function checkAttributeChanged(node) {
  return node.nodeName.includes('-') === true && typeof node.attributeChangedCallback === 'function';
}
const tempDisableCallbacks = new Set();

function dataset(elm) {
  const ds = {};
  const attributes = elm.attributes;
  const attrLen = attributes.length;
  for (let i = 0; i < attrLen; i++) {
    const attr = attributes.item(i);
    const nodeName = attr.nodeName;
    if (nodeName.startsWith('data-')) {
      ds[dashToPascalCase(nodeName)] = attr.nodeValue;
    }
  }
  return new Proxy(ds, {
    get(_obj, camelCaseProp) {
      return ds[camelCaseProp];
    },
    set(_obj, camelCaseProp, value) {
      const dataAttr = toDataAttribute(camelCaseProp);
      elm.setAttribute(dataAttr, value);
      return true;
    },
  });
}
function toDataAttribute(str) {
  return ('data-' +
    String(str)
      .replace(/([A-Z0-9])/g, g => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase());
}
function dashToPascalCase(str) {
  str = String(str).substr(5);
  return str
    .split('-')
    .map((segment, index) => {
    if (index === 0) {
      return segment.charAt(0).toLowerCase() + segment.slice(1);
    }
    return segment.charAt(0).toUpperCase() + segment.slice(1);
  })
    .join('');
}

const Sizzle = (function() {

const window = {
  document: {
  createElement() {
    return {};
  },
  nodeType: 9,
  documentElement: {
    nodeType: 1,
    nodeName: 'HTML'
  }
  }
};

const module = { exports: {} };

/*! Sizzle v2.3.5 | (c) JS Foundation and other contributors | js.foundation */
!function(e){var t,n,r,i,o,u,l,a,c,s,d,f,p,h,g,m,y,v,w,b="sizzle"+1*new Date,N=e.document,C=0,x=0,E=ae(),A=ae(),S=ae(),D=ae(),T=function(e,t){return e===t&&(d=!0),0},L={}.hasOwnProperty,q=[],I=q.pop,B=q.push,R=q.push,$=q.slice,k=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return -1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",z="\\["+M+"*("+P+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+M+"*\\]",F=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",O=new RegExp(M+"+","g"),j=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),G=new RegExp("^"+M+"*,"+M+"*"),U=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),V=new RegExp(M+"|>"),X=new RegExp(F),J=new RegExp("^"+P+"$"),K={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,W=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){f();},ue=ve(function(e){return !0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{R.apply(q=$.call(N.childNodes),N.childNodes),q[N.childNodes.length].nodeType;}catch(e){R={apply:q.length?function(e,t){B.apply(e,$.call(t));}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1;}};}function le(e,t,r,i){var o,l,c,s,d,h,y,v=t&&t.ownerDocument,N=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==N&&9!==N&&11!==N)return r;if(!i&&(f(t),t=t||p,g)){if(11!==N&&(d=_.exec(e)))if(o=d[1]){if(9===N){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(v&&(c=v.getElementById(o))&&w(t,c)&&c.id===o)return r.push(c),r}else{if(d[2])return R.apply(r,t.getElementsByTagName(e)),r;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return R.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!D[e+" "]&&(!m||!m.test(e))&&(1!==N||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===N&&(V.test(e)||U.test(e))){(v=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((s=t.getAttribute("id"))?s=s.replace(re,ie):t.setAttribute("id",s=b)),l=(h=u(e)).length;while(l--)h[l]=(s?"#"+s:":scope")+" "+ye(h[l]);y=h.join(",");}try{return R.apply(r,v.querySelectorAll(y)),r}catch(t){D(e,!0);}finally{s===b&&t.removeAttribute("id");}}}return a(e.replace(j,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function ce(e){return e[b]=!0,e}function se(e){var t=p.createElement("fieldset");try{return !!e(t)}catch(e){return !1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null;}}function de(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t;}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return -1;return e?1:-1}function pe(e){return function(t){return "form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ue(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return ce(function(t){return t=+t,ce(function(n,r){var i,o=e([],n.length,t),u=o.length;while(u--)n[i=o[u]]&&(n[i]=!(r[i]=n[i]));})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}n=le.support={},o=le.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return !Q.test(t||n&&n.nodeName||"HTML")},f=le.setDocument=function(e){var t,i,u=e?e.ownerDocument||e:N;return u!=p&&9===u.nodeType&&u.documentElement?(p=u,h=p.documentElement,g=!o(p),N!=p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=se(function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=se(function(e){return h.appendChild(e).id=b,!p.getElementsByName||!p.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return [o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return [o]}return []}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(se(function(e){var t;h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]");}),se(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:");})),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&se(function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",F);}),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=Z.test(h.compareDocumentPosition),w=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return !0;return !1},T=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==N&&w(N,e)?-1:t==p||t.ownerDocument==N&&w(N,t)?1:s?k(s,e)-k(s,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,u=[e],l=[t];if(!i||!o)return e==p?-1:t==p?1:i?-1:o?1:s?k(s,e)-k(s,t):0;if(i===o)return fe(e,t);n=e;while(n=n.parentNode)u.unshift(n);n=t;while(n=n.parentNode)l.unshift(n);while(u[r]===l[r])r++;return r?fe(u[r],l[r]):u[r]==N?-1:l[r]==N?1:0},p):p},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&g&&!D[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){D(t,!0);}return le(t,p,null,[e]).length>0},le.contains=function(e,t){return (e.ownerDocument||e)!=p&&f(e),w(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!=p&&f(e);var i=r.attrHandle[t.toLowerCase()],o=i&&L.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},le.escape=function(e){return (e+"").replace(re,ie)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],i=0,o=0;if(d=!n.detectDuplicates,s=!n.sortStable&&e.slice(0),e.sort(T),d){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1);}return s=null,e},i=le.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e);}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=le.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=u(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return "*"===e?function(){return !0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=le.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(O," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),u="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===i?function(e){return !!e.parentNode}:function(t,n,a){var c,s,d,f,p,h,g=o!==u?"nextSibling":"previousSibling",m=t.parentNode,y=l&&t.nodeName.toLowerCase(),v=!a&&!l,w=!1;if(m){if(o){while(g){f=t;while(f=f[g])if(l?f.nodeName.toLowerCase()===y:1===f.nodeType)return !1;h=g="only"===e&&!h&&"nextSibling";}return !0}if(h=[u?m.firstChild:m.lastChild],u&&v){w=(p=(c=(s=(d=(f=m)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],f=p&&m.childNodes[p];while(f=++p&&f&&f[g]||(w=p=0)||h.pop())if(1===f.nodeType&&++w&&f===t){s[e]=[C,p,w];break}}else if(v&&(w=p=(c=(s=(d=(f=t)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===w)while(f=++p&&f&&f[g]||(w=p=0)||h.pop())if((l?f.nodeName.toLowerCase()===y:1===f.nodeType)&&++w&&(v&&((s=(d=f[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[C,w]),f===t))break;return (w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,n){var r,o=i(e,t),u=o.length;while(u--)e[r=k(e,o[u])]=!(n[r]=o[u]);}):function(e){return i(e,0,n)}):i}},pseudos:{not:ce(function(e){var t=[],n=[],r=l(e.replace(j,"$1"));return r[b]?ce(function(e,t,n,i){var o,u=r(e,null,i,[]),l=e.length;while(l--)(o=u[l])&&(e[l]=!(t[l]=o));}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:ce(function(e){return function(t){return le(e,t).length>0}}),contains:ce(function(e){return e=e.replace(te,ne),function(t){return (t.textContent||i(t)).indexOf(e)>-1}}),lang:ce(function(e){return J.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return (n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return !1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return !1;return !0},parent:function(e){return !r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return W.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return "input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return [0]}),last:he(function(e,t){return [t-1]}),eq:he(function(e,t,n){return [n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in {radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=function(e){return function(t){return "input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in {submit:!0,reset:!0})r.pseudos[t]=function(e){return function(t){var n=t.nodeName.toLowerCase();return ("input"===n||"button"===n)&&t.type===e}}(t);function me(){}me.prototype=r.filters=r.pseudos,r.setFilters=new me,u=le.tokenize=function(e,t){var n,i,o,u,l,a,c,s=A[e+" "];if(s)return t?0:s.slice(0);l=e,a=[],c=r.preFilter;while(l){n&&!(i=G.exec(l))||(i&&(l=l.slice(i[0].length)||l),a.push(o=[])),n=!1,(i=U.exec(l))&&(n=i.shift(),o.push({value:n,type:i[0].replace(j," ")}),l=l.slice(n.length));for(u in r.filter)!(i=K[u].exec(l))||c[u]&&!(i=c[u](i))||(n=i.shift(),o.push({value:n,type:u,matches:i}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):A(e,a).slice(0)};function ye(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(e,t,n){var r=t.dir,i=t.next,o=i||r,u=n&&"parentNode"===o,l=x++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||u)return e(t,n,i);return !1}:function(t,n,a){var c,s,d,f=[C,l];if(a){while(t=t[r])if((1===t.nodeType||u)&&e(t,n,a))return !0}else while(t=t[r])if(1===t.nodeType||u)if(d=t[b]||(t[b]={}),s=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=s[o])&&c[0]===C&&c[1]===l)return f[2]=c[2];if(s[o]=f,f[2]=e(t,n,a))return !0}return !1}}function we(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return !1;return !0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)le(e,t[r],n);return n}function Ne(e,t,n,r,i){for(var o,u=[],l=0,a=e.length,c=null!=t;l<a;l++)(o=e[l])&&(n&&!n(o,r,i)||(u.push(o),c&&t.push(l)));return u}function Ce(e,t,n,r,i,o){return r&&!r[b]&&(r=Ce(r)),i&&!i[b]&&(i=Ce(i,o)),ce(function(o,u,l,a){var c,s,d,f=[],p=[],h=u.length,g=o||be(t||"*",l.nodeType?[l]:l,[]),m=!e||!o&&t?g:Ne(g,f,e,l,a),y=n?i||(o?e:h||r)?[]:u:m;if(n&&n(m,y,l,a),r){c=Ne(y,p),r(c,[],l,a),s=c.length;while(s--)(d=c[s])&&(y[p[s]]=!(m[p[s]]=d));}if(o){if(i||e){if(i){c=[],s=y.length;while(s--)(d=y[s])&&c.push(m[s]=d);i(null,y=[],c,a);}s=y.length;while(s--)(d=y[s])&&(c=i?k(o,d):f[s])>-1&&(o[c]=!(u[c]=d));}}else y=Ne(y===u?y.splice(h,y.length):y),i?i(null,u,y,a):R.apply(u,y);})}function xe(e){for(var t,n,i,o=e.length,u=r.relative[e[0].type],l=u||r.relative[" "],a=u?1:0,s=ve(function(e){return e===t},l,!0),d=ve(function(e){return k(t,e)>-1},l,!0),f=[function(e,n,r){var i=!u&&(r||n!==c)||((t=n).nodeType?s(e,n,r):d(e,n,r));return t=null,i}];a<o;a++)if(n=r.relative[e[a].type])f=[ve(we(f),n)];else{if((n=r.filter[e[a].type].apply(null,e[a].matches))[b]){for(i=++a;i<o;i++)if(r.relative[e[i].type])break;return Ce(a>1&&we(f),a>1&&ye(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(j,"$1"),n,a<i&&xe(e.slice(a,i)),i<o&&xe(e=e.slice(i)),i<o&&ye(e))}f.push(n);}return we(f)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,u,l,a,s){var d,h,m,y=0,v="0",w=o&&[],b=[],N=c,x=o||i&&r.find.TAG("*",s),E=C+=null==N?1:Math.random()||.1,A=x.length;for(s&&(c=u==p||u||s);v!==A&&null!=(d=x[v]);v++){if(i&&d){h=0,u||d.ownerDocument==p||(f(d),l=!g);while(m=e[h++])if(m(d,u||p,l)){a.push(d);break}s&&(C=E);}n&&((d=!m&&d)&&y--,o&&w.push(d));}if(y+=v,n&&v!==y){h=0;while(m=t[h++])m(w,b,u,l);if(o){if(y>0)while(v--)w[v]||b[v]||(b[v]=I.call(a));b=Ne(b);}R.apply(a,b),s&&!o&&b.length>0&&y+t.length>1&&le.uniqueSort(a);}return s&&(C=E,c=N),w};return n?ce(o):o}l=le.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=u(e)),n=t.length;while(n--)(o=xe(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e;}return o},a=le.select=function(e,t,n,i){var o,a,c,s,d,f="function"==typeof e&&e,p=!i&&u(e=f.selector||e);if(n=n||[],1===p.length){if((a=p[0]=p[0].slice(0)).length>2&&"ID"===(c=a[0]).type&&9===t.nodeType&&g&&r.relative[a[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(a.shift().value.length);}o=K.needsContext.test(e)?0:a.length;while(o--){if(c=a[o],r.relative[s=c.type])break;if((d=r.find[s])&&(i=d(c.matches[0].replace(te,ne),ee.test(a[0].type)&&ge(t.parentNode)||t))){if(a.splice(o,1),!(e=i.length&&ye(a)))return R.apply(n,i),n;break}}}return (f||l(e,p))(i,t,!g,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(T).join("")===b,n.detectDuplicates=!!d,f(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||de(H,function(e,t,n){var r;if(!n)return !0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null});var Ae=e.Sizzle;le.noConflict=function(){return e.Sizzle===le&&(e.Sizzle=Ae),le},"function"==typeof define&&define.amd?define(function(){return le}):"undefined"!=typeof module&&module.exports?module.exports=le:e.Sizzle=le;}(window);


return module.exports;
})();

function matches(selector, elm) {
  const r = Sizzle.matches(selector, [elm]);
  return r.length > 0;
}
function selectOne(selector, elm) {
  const r = Sizzle(selector, elm);
  return r[0] || null;
}
function selectAll(selector, elm) {
  return Sizzle(selector, elm);
}

class MockClassList {
  constructor(elm) {
    this.elm = elm;
  }
  add(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach(className => {
      className = String(className);
      validateClass(className);
      if (clsNames.includes(className) === false) {
        clsNames.push(className);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.join(' '));
    }
  }
  remove(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach(className => {
      className = String(className);
      validateClass(className);
      const index = clsNames.indexOf(className);
      if (index > -1) {
        clsNames.splice(index, 1);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.filter(c => c.length > 0).join(' '));
    }
  }
  contains(className) {
    className = String(className);
    return getItems(this.elm).includes(className);
  }
  toggle(className) {
    className = String(className);
    if (this.contains(className) === true) {
      this.remove(className);
    }
    else {
      this.add(className);
    }
  }
  get length() {
    return getItems(this.elm).length;
  }
  item(index) {
    return getItems(this.elm)[index];
  }
  toString() {
    return getItems(this.elm).join(' ');
  }
}
function validateClass(className) {
  if (className === '') {
    throw new Error('The token provided must not be empty.');
  }
  if (/\s/.test(className)) {
    throw new Error(`The token provided ('${className}') contains HTML space characters, which are not valid in tokens.`);
  }
}
function getItems(elm) {
  const className = elm.getAttribute('class');
  if (typeof className === 'string' && className.length > 0) {
    return className
      .trim()
      .split(' ')
      .filter(c => c.length > 0);
  }
  return [];
}

class MockCSSStyleDeclaration {
  constructor() {
    this._styles = new Map();
  }
  setProperty(prop, value) {
    prop = jsCaseToCssCase(prop);
    if (value == null || value === '') {
      this._styles.delete(prop);
    }
    else {
      this._styles.set(prop, String(value));
    }
  }
  getPropertyValue(prop) {
    prop = jsCaseToCssCase(prop);
    return String(this._styles.get(prop) || '');
  }
  removeProperty(prop) {
    prop = jsCaseToCssCase(prop);
    this._styles.delete(prop);
  }
  get length() {
    return this._styles.size;
  }
  get cssText() {
    const cssText = [];
    this._styles.forEach((value, prop) => {
      cssText.push(`${prop}: ${value};`);
    });
    return cssText.join(' ').trim();
  }
  set cssText(cssText) {
    if (cssText == null || cssText === '') {
      this._styles.clear();
      return;
    }
    cssText.split(';').forEach(rule => {
      rule = rule.trim();
      if (rule.length > 0) {
        const splt = rule.split(':');
        if (splt.length > 1) {
          const prop = splt[0].trim();
          const value = splt[1].trim();
          if (prop !== '' && value !== '') {
            this._styles.set(jsCaseToCssCase(prop), value);
          }
        }
      }
    });
  }
}
function createCSSStyleDeclaration() {
  return new Proxy(new MockCSSStyleDeclaration(), cssProxyHandler);
}
const cssProxyHandler = {
  get(cssStyle, prop) {
    if (prop in cssStyle) {
      return cssStyle[prop];
    }
    prop = cssCaseToJsCase(prop);
    return cssStyle.getPropertyValue(prop);
  },
  set(cssStyle, prop, value) {
    if (prop in cssStyle) {
      cssStyle[prop] = value;
    }
    else {
      cssStyle.setProperty(prop, value);
    }
    return true;
  },
};
function cssCaseToJsCase(str) {
  // font-size to fontSize
  if (str.length > 1 && str.includes('-') === true) {
    str = str
      .toLowerCase()
      .split('-')
      .map(segment => segment.charAt(0).toUpperCase() + segment.slice(1))
      .join('');
    str = str.substr(0, 1).toLowerCase() + str.substr(1);
  }
  return str;
}
function jsCaseToCssCase(str) {
  // fontSize to font-size
  if (str.length > 1 && str.includes('-') === false && /[A-Z]/.test(str) === true) {
    str = str
      .replace(/([A-Z])/g, g => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase();
  }
  return str;
}

class MockEvent {
  constructor(type, eventInitDict) {
    this.bubbles = false;
    this.cancelBubble = false;
    this.cancelable = false;
    this.composed = false;
    this.currentTarget = null;
    this.defaultPrevented = false;
    this.srcElement = null;
    this.target = null;
    if (typeof type !== 'string') {
      throw new Error(`Event type required`);
    }
    this.type = type;
    this.timeStamp = Date.now();
    if (eventInitDict != null) {
      Object.assign(this, eventInitDict);
    }
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopPropagation() {
    this.cancelBubble = true;
  }
  stopImmediatePropagation() {
    this.cancelBubble = true;
  }
}
class MockCustomEvent extends MockEvent {
  constructor(type, customEventInitDic) {
    super(type);
    this.detail = null;
    if (customEventInitDic != null) {
      Object.assign(this, customEventInitDic);
    }
  }
}
class MockKeyboardEvent extends MockEvent {
  constructor(type, keyboardEventInitDic) {
    super(type);
    this.code = '';
    this.key = '';
    this.altKey = false;
    this.ctrlKey = false;
    this.metaKey = false;
    this.shiftKey = false;
    this.location = 0;
    this.repeat = false;
    if (keyboardEventInitDic != null) {
      Object.assign(this, keyboardEventInitDic);
    }
  }
}
class MockMouseEvent extends MockEvent {
  constructor(type, mouseEventInitDic) {
    super(type);
    this.screenX = 0;
    this.screenY = 0;
    this.clientX = 0;
    this.clientY = 0;
    this.ctrlKey = false;
    this.shiftKey = false;
    this.altKey = false;
    this.metaKey = false;
    this.button = 0;
    this.buttons = 0;
    this.relatedTarget = null;
    if (mouseEventInitDic != null) {
      Object.assign(this, mouseEventInitDic);
    }
  }
}
class MockEventListener {
  constructor(type, handler) {
    this.type = type;
    this.handler = handler;
  }
}
function addEventListener(elm, type, handler) {
  const target = elm;
  if (target.__listeners == null) {
    target.__listeners = [];
  }
  target.__listeners.push(new MockEventListener(type, handler));
}
function removeEventListener(elm, type, handler) {
  const target = elm;
  if (target != null && Array.isArray(target.__listeners) === true) {
    const elmListener = target.__listeners.find(e => e.type === type && e.handler === handler);
    if (elmListener != null) {
      const index = target.__listeners.indexOf(elmListener);
      target.__listeners.splice(index, 1);
    }
  }
}
function resetEventListeners(target) {
  if (target != null && target.__listeners != null) {
    target.__listeners = null;
  }
}
function triggerEventListener(elm, ev) {
  if (elm == null || ev.cancelBubble === true) {
    return;
  }
  const target = elm;
  ev.currentTarget = elm;
  if (Array.isArray(target.__listeners) === true) {
    const listeners = target.__listeners.filter(e => e.type === ev.type);
    listeners.forEach(listener => {
      try {
        listener.handler.call(target, ev);
      }
      catch (err) {
        console.error(err);
      }
    });
  }
  if (ev.bubbles === false) {
    return;
  }
  if (elm.nodeName === "#document" /* DOCUMENT_NODE */) {
    triggerEventListener(elm.defaultView, ev);
  }
  else {
    triggerEventListener(elm.parentElement, ev);
  }
}
function dispatchEvent(currentTarget, ev) {
  ev.target = currentTarget;
  triggerEventListener(currentTarget, ev);
  return true;
}

function serializeNodeToHtml(elm, opts = {}) {
  const output = {
    currentLineWidth: 0,
    indent: 0,
    isWithinBody: false,
    text: [],
  };
  if (opts.prettyHtml) {
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 2;
    }
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = true;
    }
    opts.approximateLineWidth = -1;
  }
  else {
    opts.prettyHtml = false;
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = false;
    }
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 0;
    }
  }
  if (typeof opts.approximateLineWidth !== 'number') {
    opts.approximateLineWidth = -1;
  }
  if (typeof opts.removeEmptyAttributes !== 'boolean') {
    opts.removeEmptyAttributes = true;
  }
  if (typeof opts.removeAttributeQuotes !== 'boolean') {
    opts.removeAttributeQuotes = false;
  }
  if (typeof opts.removeBooleanAttributeQuotes !== 'boolean') {
    opts.removeBooleanAttributeQuotes = false;
  }
  if (typeof opts.removeHtmlComments !== 'boolean') {
    opts.removeHtmlComments = false;
  }
  if (typeof opts.serializeShadowRoot !== 'boolean') {
    opts.serializeShadowRoot = false;
  }
  if (opts.outerHtml) {
    serializeToHtml(elm, opts, output, false);
  }
  else {
    for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
      serializeToHtml(elm.childNodes[i], opts, output, false);
    }
  }
  if (output.text[0] === '\n') {
    output.text.shift();
  }
  if (output.text[output.text.length - 1] === '\n') {
    output.text.pop();
  }
  return output.text.join('');
}
function serializeToHtml(node, opts, output, isShadowRoot) {
  if (node.nodeType === 1 /* ELEMENT_NODE */ || isShadowRoot) {
    const tagName = isShadowRoot ? 'mock:shadow-root' : getTagName(node);
    if (tagName === 'body') {
      output.isWithinBody = true;
    }
    const ignoreTag = opts.excludeTags != null && opts.excludeTags.includes(tagName);
    if (ignoreTag === false) {
      if (opts.newLines) {
        output.text.push('\n');
        output.currentLineWidth = 0;
      }
      if (opts.indentSpaces > 0) {
        for (let i = 0; i < output.indent; i++) {
          output.text.push(' ');
        }
        output.currentLineWidth += output.indent;
      }
      output.text.push('<' + tagName);
      output.currentLineWidth += tagName.length + 1;
      const attrsLength = node.attributes.length;
      const attributes = opts.prettyHtml && attrsLength > 1 ? cloneAttributes(node.attributes, true) : node.attributes;
      for (let i = 0; i < attrsLength; i++) {
        const attr = attributes.item(i);
        const attrName = attr.name;
        if (attrName === 'style') {
          continue;
        }
        let attrValue = attr.value;
        if (opts.removeEmptyAttributes && attrValue === '' && REMOVE_EMPTY_ATTR.has(attrName)) {
          continue;
        }
        const attrNamespaceURI = attr.namespaceURI;
        if (attrNamespaceURI == null) {
          output.currentLineWidth += attrName.length + 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            output.text.push('\n' + attrName);
            output.currentLineWidth = 0;
          }
          else {
            output.text.push(' ' + attrName);
          }
        }
        else if (attrNamespaceURI === 'http://www.w3.org/XML/1998/namespace') {
          output.text.push(' xml:' + attrName);
          output.currentLineWidth += attrName.length + 5;
        }
        else if (attrNamespaceURI === 'http://www.w3.org/2000/xmlns/') {
          if (attrName !== 'xmlns') {
            output.text.push(' xmlns:' + attrName);
            output.currentLineWidth += attrName.length + 7;
          }
          else {
            output.text.push(' ' + attrName);
            output.currentLineWidth += attrName.length + 1;
          }
        }
        else if (attrNamespaceURI === XLINK_NS) {
          output.text.push(' xlink:' + attrName);
          output.currentLineWidth += attrName.length + 7;
        }
        else {
          output.text.push(' ' + attrNamespaceURI + ':' + attrName);
          output.currentLineWidth += attrNamespaceURI.length + attrName.length + 2;
        }
        if (opts.prettyHtml && attrName === 'class') {
          attrValue = attr.value = attrValue
            .split(' ')
            .filter(t => t !== '')
            .sort()
            .join(' ')
            .trim();
        }
        if (attrValue === '') {
          if (opts.removeBooleanAttributeQuotes && BOOLEAN_ATTR.has(attrName)) {
            continue;
          }
          if (opts.removeEmptyAttributes && attrName.startsWith('data-')) {
            continue;
          }
        }
        if (opts.removeAttributeQuotes && CAN_REMOVE_ATTR_QUOTES.test(attrValue)) {
          output.text.push('=' + escapeString(attrValue, true));
          output.currentLineWidth += attrValue.length + 1;
        }
        else {
          output.text.push('="' + escapeString(attrValue, true) + '"');
          output.currentLineWidth += attrValue.length + 3;
        }
      }
      if (node.hasAttribute('style')) {
        const cssText = node.style.cssText;
        if (opts.approximateLineWidth > 0 && output.currentLineWidth + cssText.length + 10 > opts.approximateLineWidth) {
          output.text.push(`\nstyle="${cssText}">`);
          output.currentLineWidth = 0;
        }
        else {
          output.text.push(` style="${cssText}">`);
          output.currentLineWidth += cssText.length + 10;
        }
      }
      else {
        output.text.push('>');
        output.currentLineWidth += 1;
      }
    }
    if (EMPTY_ELEMENTS.has(tagName) === false) {
      if (opts.serializeShadowRoot && node.shadowRoot != null) {
        output.indent = output.indent + opts.indentSpaces;
        serializeToHtml(node.shadowRoot, opts, output, true);
        output.indent = output.indent - opts.indentSpaces;
        if (opts.newLines &&
          (node.childNodes.length === 0 || (node.childNodes.length === 1 && node.childNodes[0].nodeType === 3 /* TEXT_NODE */ && node.childNodes[0].nodeValue.trim() === ''))) {
          output.text.push('\n');
          output.currentLineWidth = 0;
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
      }
      if (opts.excludeTagContent == null || opts.excludeTagContent.includes(tagName) === false) {
        const childNodes = tagName === 'template' ? node.content.childNodes : node.childNodes;
        const childNodeLength = childNodes.length;
        if (childNodeLength > 0) {
          if (childNodeLength === 1 && childNodes[0].nodeType === 3 /* TEXT_NODE */ && (typeof childNodes[0].nodeValue !== 'string' || childNodes[0].nodeValue.trim() === '')) ;
          else {
            if (opts.indentSpaces > 0 && ignoreTag === false) {
              output.indent = output.indent + opts.indentSpaces;
            }
            for (let i = 0; i < childNodeLength; i++) {
              serializeToHtml(childNodes[i], opts, output, false);
            }
            if (ignoreTag === false) {
              if (opts.newLines) {
                output.text.push('\n');
                output.currentLineWidth = 0;
              }
              if (opts.indentSpaces > 0) {
                output.indent = output.indent - opts.indentSpaces;
                for (let i = 0; i < output.indent; i++) {
                  output.text.push(' ');
                }
                output.currentLineWidth += output.indent;
              }
            }
          }
        }
        if (ignoreTag === false) {
          output.text.push('</' + tagName + '>');
          output.currentLineWidth += tagName.length + 3;
        }
      }
    }
    if (opts.approximateLineWidth > 0 && STRUCTURE_ELEMENTS.has(tagName)) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (tagName === 'body') {
      output.isWithinBody = false;
    }
  }
  else if (node.nodeType === 3 /* TEXT_NODE */) {
    let textContent = node.nodeValue;
    if (typeof textContent === 'string') {
      const trimmedTextContent = textContent.trim();
      if (trimmedTextContent === '') {
        // this text node is whitespace only
        if (isWithinWhitespaceSensitive(node)) {
          // whitespace matters within this element
          // just add the exact text we were given
          output.text.push(textContent);
          output.currentLineWidth += textContent.length;
        }
        else if (opts.approximateLineWidth > 0 && !output.isWithinBody) ;
        else if (!opts.prettyHtml) {
          // this text node is only whitespace, and it's not
          // within a whitespace sensitive element like <pre> or <code>
          // so replace the entire white space with a single new line
          output.currentLineWidth += 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            // good enough for a new line
            // for perf these are all just estimates
            // we don't care to ensure exact line lengths
            output.text.push('\n');
            output.currentLineWidth = 0;
          }
          else {
            // let's keep it all on the same line yet
            output.text.push(' ');
          }
        }
      }
      else {
        // this text node has text content
        if (opts.newLines) {
          output.text.push('\n');
          output.currentLineWidth = 0;
        }
        if (opts.indentSpaces > 0) {
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
        let textContentLength = textContent.length;
        if (textContentLength > 0) {
          // this text node has text content
          const parentTagName = node.parentNode != null && node.parentNode.nodeType === 1 /* ELEMENT_NODE */ ? node.parentNode.nodeName : null;
          if (NON_ESCAPABLE_CONTENT.has(parentTagName)) {
            // this text node cannot have its content escaped since it's going
            // into an element like <style> or <script>
            if (isWithinWhitespaceSensitive(node)) {
              output.text.push(textContent);
            }
            else {
              output.text.push(trimmedTextContent);
              textContentLength = trimmedTextContent.length;
            }
            output.currentLineWidth += textContentLength;
          }
          else {
            // this text node is going into a normal element and html can be escaped
            if (opts.prettyHtml) {
              // pretty print the text node
              output.text.push(escapeString(textContent.replace(/\s\s+/g, ' ').trim(), false));
              output.currentLineWidth += textContentLength;
            }
            else {
              // not pretty printing the text node
              if (isWithinWhitespaceSensitive(node)) {
                output.currentLineWidth += textContentLength;
              }
              else {
                // this element is not a whitespace sensitive one, like <pre> or <code> so
                // any whitespace at the start and end can be cleaned up to just be one space
                if (/\s/.test(textContent.charAt(0))) {
                  textContent = ' ' + textContent.trimLeft();
                }
                textContentLength = textContent.length;
                if (textContentLength > 1) {
                  if (/\s/.test(textContent.charAt(textContentLength - 1))) {
                    if (opts.approximateLineWidth > 0 && output.currentLineWidth + textContentLength > opts.approximateLineWidth) {
                      textContent = textContent.trimRight() + '\n';
                      output.currentLineWidth = 0;
                    }
                    else {
                      textContent = textContent.trimRight() + ' ';
                    }
                  }
                }
                output.currentLineWidth += textContentLength;
              }
              output.text.push(escapeString(textContent, false));
            }
          }
        }
      }
    }
  }
  else if (node.nodeType === 8 /* COMMENT_NODE */) {
    const nodeValue = node.nodeValue;
    if (opts.removeHtmlComments) {
      const isHydrateAnnotation = nodeValue.startsWith(CONTENT_REF_ID + '.') ||
        nodeValue.startsWith(ORG_LOCATION_ID + '.') ||
        nodeValue.startsWith(SLOT_NODE_ID + '.') ||
        nodeValue.startsWith(TEXT_NODE_ID + '.');
      if (!isHydrateAnnotation) {
        return;
      }
    }
    if (opts.newLines) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (opts.indentSpaces > 0) {
      for (let i = 0; i < output.indent; i++) {
        output.text.push(' ');
      }
      output.currentLineWidth += output.indent;
    }
    output.text.push('<!--' + nodeValue + '-->');
    output.currentLineWidth += nodeValue.length + 7;
  }
  else if (node.nodeType === 10 /* DOCUMENT_TYPE_NODE */) {
    output.text.push('<!doctype html>');
  }
}
const AMP_REGEX = /&/g;
const NBSP_REGEX = /\u00a0/g;
const DOUBLE_QUOTE_REGEX = /"/g;
const LT_REGEX = /</g;
const GT_REGEX = />/g;
const CAN_REMOVE_ATTR_QUOTES = /^[^ \t\n\f\r"'`=<>\/\\-]+$/;
function getTagName(element) {
  if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return element.nodeName.toLowerCase();
  }
  else {
    return element.nodeName;
  }
}
function escapeString(str, attrMode) {
  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');
  if (attrMode) {
    return str.replace(DOUBLE_QUOTE_REGEX, '&quot;');
  }
  return str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');
}
function isWithinWhitespaceSensitive(node) {
  while (node != null) {
    if (WHITESPACE_SENSITIVE.has(node.nodeName)) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
/*@__PURE__*/ const NON_ESCAPABLE_CONTENT = new Set(['STYLE', 'SCRIPT', 'IFRAME', 'NOSCRIPT', 'XMP', 'NOEMBED', 'NOFRAMES', 'PLAINTEXT']);
/*@__PURE__*/ const WHITESPACE_SENSITIVE = new Set(['CODE', 'OUTPUT', 'PLAINTEXT', 'PRE', 'TEMPLATE', 'TEXTAREA']);
/*@__PURE__*/ const EMPTY_ELEMENTS = new Set([
  'area',
  'base',
  'basefont',
  'bgsound',
  'br',
  'col',
  'embed',
  'frame',
  'hr',
  'img',
  'input',
  'keygen',
  'link',
  'meta',
  'param',
  'source',
  'trace',
  'wbr',
]);
/*@__PURE__*/ const REMOVE_EMPTY_ATTR = new Set(['class', 'dir', 'id', 'lang', 'name', 'title']);
/*@__PURE__*/ const BOOLEAN_ATTR = new Set([
  'allowfullscreen',
  'async',
  'autofocus',
  'autoplay',
  'checked',
  'compact',
  'controls',
  'declare',
  'default',
  'defaultchecked',
  'defaultmuted',
  'defaultselected',
  'defer',
  'disabled',
  'enabled',
  'formnovalidate',
  'hidden',
  'indeterminate',
  'inert',
  'ismap',
  'itemscope',
  'loop',
  'multiple',
  'muted',
  'nohref',
  'nomodule',
  'noresize',
  'noshade',
  'novalidate',
  'nowrap',
  'open',
  'pauseonexit',
  'readonly',
  'required',
  'reversed',
  'scoped',
  'seamless',
  'selected',
  'sortable',
  'truespeed',
  'typemustmatch',
  'visible',
]);
/*@__PURE__*/ const STRUCTURE_ELEMENTS = new Set(['html', 'body', 'head', 'iframe', 'meta', 'link', 'base', 'title', 'script', 'style']);

const parse5=/*@__PURE__*/function(e){const t=[65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];var n="�",s={EOF:-1,NULL:0,TABULATION:9,CARRIAGE_RETURN:13,LINE_FEED:10,FORM_FEED:12,SPACE:32,EXCLAMATION_MARK:33,QUOTATION_MARK:34,NUMBER_SIGN:35,AMPERSAND:38,APOSTROPHE:39,HYPHEN_MINUS:45,SOLIDUS:47,DIGIT_0:48,DIGIT_9:57,SEMICOLON:59,LESS_THAN_SIGN:60,EQUALS_SIGN:61,GREATER_THAN_SIGN:62,QUESTION_MARK:63,LATIN_CAPITAL_A:65,LATIN_CAPITAL_F:70,LATIN_CAPITAL_X:88,LATIN_CAPITAL_Z:90,RIGHT_SQUARE_BRACKET:93,GRAVE_ACCENT:96,LATIN_SMALL_A:97,LATIN_SMALL_F:102,LATIN_SMALL_X:120,LATIN_SMALL_Z:122,REPLACEMENT_CHARACTER:65533},r={DASH_DASH_STRING:[45,45],DOCTYPE_STRING:[68,79,67,84,89,80,69],CDATA_START_STRING:[91,67,68,65,84,65,91],SCRIPT_STRING:[115,99,114,105,112,116],PUBLIC_STRING:[80,85,66,76,73,67],SYSTEM_STRING:[83,89,83,84,69,77]},i=function(e){return e>=55296&&e<=57343},T=function(e){return e>=56320&&e<=57343},o=function(e,t){return 1024*(e-55296)+9216+t},E=function(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159},a=function(e){return e>=64976&&e<=65007||t.indexOf(e)>-1},_="control-character-in-input-stream",A="noncharacter-in-input-stream",h="surrogate-in-input-stream",c="non-void-html-element-start-tag-with-trailing-solidus",l="end-tag-with-attributes",m="end-tag-with-trailing-solidus",p="unexpected-solidus-in-tag",N="unexpected-null-character",u="unexpected-question-mark-instead-of-tag-name",O="invalid-first-character-of-tag-name",S="unexpected-equals-sign-before-attribute-name",C="missing-end-tag-name",d="unexpected-character-in-attribute-name",R="unknown-named-character-reference",I="missing-semicolon-after-character-reference",f="unexpected-character-after-doctype-system-identifier",M="unexpected-character-in-unquoted-attribute-value",L="eof-before-tag-name",D="eof-in-tag",g="missing-attribute-value",P="missing-whitespace-between-attributes",k="missing-whitespace-after-doctype-public-keyword",H="missing-whitespace-between-doctype-public-and-system-identifiers",U="missing-whitespace-after-doctype-system-keyword",F="missing-quote-before-doctype-public-identifier",B="missing-quote-before-doctype-system-identifier",G="missing-doctype-public-identifier",K="missing-doctype-system-identifier",b="abrupt-doctype-public-identifier",Y="abrupt-doctype-system-identifier",x="cdata-in-html-content",y="incorrectly-opened-comment",v="eof-in-script-html-comment-like-text",w="eof-in-doctype",Q="nested-comment",X="abrupt-closing-of-empty-comment",W="eof-in-comment",V="incorrectly-closed-comment",j="eof-in-cdata",z="absence-of-digits-in-numeric-character-reference",q="null-character-reference",J="surrogate-character-reference",Z="character-reference-outside-unicode-range",$="control-character-reference",ee="noncharacter-character-reference",te="missing-whitespace-before-doctype-name",ne="missing-doctype-name",se="invalid-character-sequence-after-doctype-name",re="duplicate-attribute",ie="non-conforming-doctype",Te="missing-doctype",oe="misplaced-doctype",Ee="end-tag-without-matching-open-element",ae="closing-of-element-with-open-child-elements",_e="disallowed-content-in-noscript-in-head",Ae="open-elements-left-after-eof",he="abandoned-head-element-child",ce="misplaced-start-tag-for-head-element",le="nested-noscript-in-head",me="eof-in-element-that-can-contain-only-text";const pe=s;var Ne=class{constructor(){this.html=null,this.pos=-1,this.lastGapPos=-1,this.lastCharPos=-1,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536;}_err(){}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos;}_processSurrogate(e){if(this.pos!==this.lastCharPos){const t=this.html.charCodeAt(this.pos+1);if(T(t))return this.pos++,this._addGap(),o(e,t)}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,pe.EOF;return this._err(h),e}dropParsedChunk(){this.pos>this.bufferWaterline&&(this.lastCharPos-=this.pos,this.html=this.html.substring(this.pos),this.pos=0,this.lastGapPos=-1,this.gapStack=[]);}write(e,t){this.html?this.html+=e:this.html=e,this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1,this.lastChunkWritten=t;}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1,this.html.length),this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1;}advance(){if(this.pos++,this.pos>this.lastCharPos)return this.endOfChunkHit=!this.lastChunkWritten,pe.EOF;let e=this.html.charCodeAt(this.pos);if(this.skipNextNewLine&&e===pe.LINE_FEED)return this.skipNextNewLine=!1,this._addGap(),this.advance();if(e===pe.CARRIAGE_RETURN)return this.skipNextNewLine=!0,pe.LINE_FEED;return this.skipNextNewLine=!1,i(e)&&(e=this._processSurrogate(e)),e>31&&e<127||e===pe.LINE_FEED||e===pe.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e}_checkForProblematicCharacters(e){E(e)?this._err(_):a(e)&&this._err(A);}retreat(){this.pos===this.lastGapPos&&(this.lastGapPos=this.gapStack.pop(),this.pos--),this.pos--;}},ue=new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4e3,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,1e4,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13e3,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);const Oe=s,Se=r,Ce={128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376},de="DATA_STATE";function Re(e){return e===Oe.SPACE||e===Oe.LINE_FEED||e===Oe.TABULATION||e===Oe.FORM_FEED}function Ie(e){return e>=Oe.DIGIT_0&&e<=Oe.DIGIT_9}function fe(e){return e>=Oe.LATIN_CAPITAL_A&&e<=Oe.LATIN_CAPITAL_Z}function Me(e){return e>=Oe.LATIN_SMALL_A&&e<=Oe.LATIN_SMALL_Z}function Le(e){return Me(e)||fe(e)}function De(e){return Le(e)||Ie(e)}function ge(e){return e>=Oe.LATIN_CAPITAL_A&&e<=Oe.LATIN_CAPITAL_F}function Pe(e){return e>=Oe.LATIN_SMALL_A&&e<=Oe.LATIN_SMALL_F}function ke(e){return e+32}function He(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(e>>>10&1023|55296)+String.fromCharCode(56320|1023&e))}function Ue(e){return String.fromCharCode(ke(e))}function Fe(e,t){const n=ue[++e];let s=++e,r=s+n-1;for(;s<=r;){const e=s+r>>>1,i=ue[e];if(i<t)s=e+1;else{if(!(i>t))return ue[e+n];r=e-1;}}return -1}class Be{constructor(){this.preprocessor=new Ne,this.tokenQueue=[],this.allowCDATA=!1,this.state=de,this.returnState="",this.charRefCode=-1,this.tempBuff=[],this.lastStartTagName="",this.consumedAfterSnapshot=-1,this.active=!1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr=null;}_err(){}_errOnNextCodePoint(e){this._consume(),this._err(e),this._unconsume();}getNextToken(){for(;!this.tokenQueue.length&&this.active;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this[this.state](e);}return this.tokenQueue.shift()}write(e,t){this.active=!0,this.preprocessor.write(e,t);}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e);}_ensureHibernation(){if(this.preprocessor.endOfChunkHit){for(;this.consumedAfterSnapshot>0;this.consumedAfterSnapshot--)this.preprocessor.retreat();return this.active=!1,this.tokenQueue.push({type:Be.HIBERNATION_TOKEN}),!0}return !1}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_unconsume(){this.consumedAfterSnapshot--,this.preprocessor.retreat();}_reconsumeInState(e){this.state=e,this._unconsume();}_consumeSequenceIfMatch(e,t,n){let s=0,r=!0;const i=e.length;let T=0,o=t,E=void 0;for(;T<i;T++){if(T>0&&(o=this._consume(),s++),o===Oe.EOF){r=!1;break}if(E=e[T],o!==E&&(n||o!==ke(E))){r=!1;break}}if(!r)for(;s--;)this._unconsume();return r}_isTempBufferEqualToScriptString(){if(this.tempBuff.length!==Se.SCRIPT_STRING.length)return !1;for(let e=0;e<this.tempBuff.length;e++)if(this.tempBuff[e]!==Se.SCRIPT_STRING[e])return !1;return !0}_createStartTagToken(){this.currentToken={type:Be.START_TAG_TOKEN,tagName:"",selfClosing:!1,ackSelfClosing:!1,attrs:[]};}_createEndTagToken(){this.currentToken={type:Be.END_TAG_TOKEN,tagName:"",selfClosing:!1,attrs:[]};}_createCommentToken(){this.currentToken={type:Be.COMMENT_TOKEN,data:""};}_createDoctypeToken(e){this.currentToken={type:Be.DOCTYPE_TOKEN,name:e,forceQuirks:!1,publicId:null,systemId:null};}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t};}_createEOFToken(){this.currentToken={type:Be.EOF_TOKEN};}_createAttr(e){this.currentAttr={name:e,value:""};}_leaveAttrName(e){null===Be.getTokenAttr(this.currentToken,this.currentAttr.name)?this.currentToken.attrs.push(this.currentAttr):this._err(re),this.state=e;}_leaveAttrValue(e){this.state=e;}_emitCurrentToken(){this._emitCurrentCharacterToken();const e=this.currentToken;this.currentToken=null,e.type===Be.START_TAG_TOKEN?this.lastStartTagName=e.tagName:e.type===Be.END_TAG_TOKEN&&(e.attrs.length>0&&this._err(l),e.selfClosing&&this._err(m)),this.tokenQueue.push(e);}_emitCurrentCharacterToken(){this.currentCharacterToken&&(this.tokenQueue.push(this.currentCharacterToken),this.currentCharacterToken=null);}_emitEOFToken(){this._createEOFToken(),this._emitCurrentToken();}_appendCharToCurrentCharacterToken(e,t){this.currentCharacterToken&&this.currentCharacterToken.type!==e&&this._emitCurrentCharacterToken(),this.currentCharacterToken?this.currentCharacterToken.chars+=t:this._createCharacterToken(e,t);}_emitCodePoint(e){let t=Be.CHARACTER_TOKEN;Re(e)?t=Be.WHITESPACE_CHARACTER_TOKEN:e===Oe.NULL&&(t=Be.NULL_CHARACTER_TOKEN),this._appendCharToCurrentCharacterToken(t,He(e));}_emitSeveralCodePoints(e){for(let t=0;t<e.length;t++)this._emitCodePoint(e[t]);}_emitChars(e){this._appendCharToCurrentCharacterToken(Be.CHARACTER_TOKEN,e);}_matchNamedCharacterReference(e){let t=null,n=1,s=Fe(0,e);for(this.tempBuff.push(e);s>-1;){const e=ue[s],r=e<7;r&&1&e&&(t=2&e?[ue[++s],ue[++s]]:[ue[++s]],n=0);const i=this._consume();if(this.tempBuff.push(i),n++,i===Oe.EOF)break;s=r?4&e?Fe(s,i):-1:i===e?++s:-1;}for(;n--;)this.tempBuff.pop(),this._unconsume();return t}_isCharacterReferenceInAttribute(){return "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE"===this.returnState||"ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE"===this.returnState||"ATTRIBUTE_VALUE_UNQUOTED_STATE"===this.returnState}_isCharacterReferenceAttributeQuirk(e){if(!e&&this._isCharacterReferenceInAttribute()){const e=this._consume();return this._unconsume(),e===Oe.EQUALS_SIGN||De(e)}return !1}_flushCodePointsConsumedAsCharacterReference(){if(this._isCharacterReferenceInAttribute())for(let e=0;e<this.tempBuff.length;e++)this.currentAttr.value+=He(this.tempBuff[e]);else this._emitSeveralCodePoints(this.tempBuff);this.tempBuff=[];}[de](e){this.preprocessor.dropParsedChunk(),e===Oe.LESS_THAN_SIGN?this.state="TAG_OPEN_STATE":e===Oe.AMPERSAND?(this.returnState=de,this.state="CHARACTER_REFERENCE_STATE"):e===Oe.NULL?(this._err(N),this._emitCodePoint(e)):e===Oe.EOF?this._emitEOFToken():this._emitCodePoint(e);}RCDATA_STATE(e){this.preprocessor.dropParsedChunk(),e===Oe.AMPERSAND?(this.returnState="RCDATA_STATE",this.state="CHARACTER_REFERENCE_STATE"):e===Oe.LESS_THAN_SIGN?this.state="RCDATA_LESS_THAN_SIGN_STATE":e===Oe.NULL?(this._err(N),this._emitChars(n)):e===Oe.EOF?this._emitEOFToken():this._emitCodePoint(e);}RAWTEXT_STATE(e){this.preprocessor.dropParsedChunk(),e===Oe.LESS_THAN_SIGN?this.state="RAWTEXT_LESS_THAN_SIGN_STATE":e===Oe.NULL?(this._err(N),this._emitChars(n)):e===Oe.EOF?this._emitEOFToken():this._emitCodePoint(e);}SCRIPT_DATA_STATE(e){this.preprocessor.dropParsedChunk(),e===Oe.LESS_THAN_SIGN?this.state="SCRIPT_DATA_LESS_THAN_SIGN_STATE":e===Oe.NULL?(this._err(N),this._emitChars(n)):e===Oe.EOF?this._emitEOFToken():this._emitCodePoint(e);}PLAINTEXT_STATE(e){this.preprocessor.dropParsedChunk(),e===Oe.NULL?(this._err(N),this._emitChars(n)):e===Oe.EOF?this._emitEOFToken():this._emitCodePoint(e);}TAG_OPEN_STATE(e){e===Oe.EXCLAMATION_MARK?this.state="MARKUP_DECLARATION_OPEN_STATE":e===Oe.SOLIDUS?this.state="END_TAG_OPEN_STATE":Le(e)?(this._createStartTagToken(),this._reconsumeInState("TAG_NAME_STATE")):e===Oe.QUESTION_MARK?(this._err(u),this._createCommentToken(),this._reconsumeInState("BOGUS_COMMENT_STATE")):e===Oe.EOF?(this._err(L),this._emitChars("<"),this._emitEOFToken()):(this._err(O),this._emitChars("<"),this._reconsumeInState(de));}END_TAG_OPEN_STATE(e){Le(e)?(this._createEndTagToken(),this._reconsumeInState("TAG_NAME_STATE")):e===Oe.GREATER_THAN_SIGN?(this._err(C),this.state=de):e===Oe.EOF?(this._err(L),this._emitChars("</"),this._emitEOFToken()):(this._err(O),this._createCommentToken(),this._reconsumeInState("BOGUS_COMMENT_STATE"));}TAG_NAME_STATE(e){Re(e)?this.state="BEFORE_ATTRIBUTE_NAME_STATE":e===Oe.SOLIDUS?this.state="SELF_CLOSING_START_TAG_STATE":e===Oe.GREATER_THAN_SIGN?(this.state=de,this._emitCurrentToken()):fe(e)?this.currentToken.tagName+=Ue(e):e===Oe.NULL?(this._err(N),this.currentToken.tagName+=n):e===Oe.EOF?(this._err(D),this._emitEOFToken()):this.currentToken.tagName+=He(e);}RCDATA_LESS_THAN_SIGN_STATE(e){e===Oe.SOLIDUS?(this.tempBuff=[],this.state="RCDATA_END_TAG_OPEN_STATE"):(this._emitChars("<"),this._reconsumeInState("RCDATA_STATE"));}RCDATA_END_TAG_OPEN_STATE(e){Le(e)?(this._createEndTagToken(),this._reconsumeInState("RCDATA_END_TAG_NAME_STATE")):(this._emitChars("</"),this._reconsumeInState("RCDATA_STATE"));}RCDATA_END_TAG_NAME_STATE(e){if(fe(e))this.currentToken.tagName+=Ue(e),this.tempBuff.push(e);else if(Me(e))this.currentToken.tagName+=He(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Re(e))return void(this.state="BEFORE_ATTRIBUTE_NAME_STATE");if(e===Oe.SOLIDUS)return void(this.state="SELF_CLOSING_START_TAG_STATE");if(e===Oe.GREATER_THAN_SIGN)return this.state=de,void this._emitCurrentToken()}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState("RCDATA_STATE");}}RAWTEXT_LESS_THAN_SIGN_STATE(e){e===Oe.SOLIDUS?(this.tempBuff=[],this.state="RAWTEXT_END_TAG_OPEN_STATE"):(this._emitChars("<"),this._reconsumeInState("RAWTEXT_STATE"));}RAWTEXT_END_TAG_OPEN_STATE(e){Le(e)?(this._createEndTagToken(),this._reconsumeInState("RAWTEXT_END_TAG_NAME_STATE")):(this._emitChars("</"),this._reconsumeInState("RAWTEXT_STATE"));}RAWTEXT_END_TAG_NAME_STATE(e){if(fe(e))this.currentToken.tagName+=Ue(e),this.tempBuff.push(e);else if(Me(e))this.currentToken.tagName+=He(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Re(e))return void(this.state="BEFORE_ATTRIBUTE_NAME_STATE");if(e===Oe.SOLIDUS)return void(this.state="SELF_CLOSING_START_TAG_STATE");if(e===Oe.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=de)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState("RAWTEXT_STATE");}}SCRIPT_DATA_LESS_THAN_SIGN_STATE(e){e===Oe.SOLIDUS?(this.tempBuff=[],this.state="SCRIPT_DATA_END_TAG_OPEN_STATE"):e===Oe.EXCLAMATION_MARK?(this.state="SCRIPT_DATA_ESCAPE_START_STATE",this._emitChars("<!")):(this._emitChars("<"),this._reconsumeInState("SCRIPT_DATA_STATE"));}SCRIPT_DATA_END_TAG_OPEN_STATE(e){Le(e)?(this._createEndTagToken(),this._reconsumeInState("SCRIPT_DATA_END_TAG_NAME_STATE")):(this._emitChars("</"),this._reconsumeInState("SCRIPT_DATA_STATE"));}SCRIPT_DATA_END_TAG_NAME_STATE(e){if(fe(e))this.currentToken.tagName+=Ue(e),this.tempBuff.push(e);else if(Me(e))this.currentToken.tagName+=He(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Re(e))return void(this.state="BEFORE_ATTRIBUTE_NAME_STATE");if(e===Oe.SOLIDUS)return void(this.state="SELF_CLOSING_START_TAG_STATE");if(e===Oe.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=de)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState("SCRIPT_DATA_STATE");}}SCRIPT_DATA_ESCAPE_START_STATE(e){e===Oe.HYPHEN_MINUS?(this.state="SCRIPT_DATA_ESCAPE_START_DASH_STATE",this._emitChars("-")):this._reconsumeInState("SCRIPT_DATA_STATE");}SCRIPT_DATA_ESCAPE_START_DASH_STATE(e){e===Oe.HYPHEN_MINUS?(this.state="SCRIPT_DATA_ESCAPED_DASH_DASH_STATE",this._emitChars("-")):this._reconsumeInState("SCRIPT_DATA_STATE");}SCRIPT_DATA_ESCAPED_STATE(e){e===Oe.HYPHEN_MINUS?(this.state="SCRIPT_DATA_ESCAPED_DASH_STATE",this._emitChars("-")):e===Oe.LESS_THAN_SIGN?this.state="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE":e===Oe.NULL?(this._err(N),this._emitChars(n)):e===Oe.EOF?(this._err(v),this._emitEOFToken()):this._emitCodePoint(e);}SCRIPT_DATA_ESCAPED_DASH_STATE(e){e===Oe.HYPHEN_MINUS?(this.state="SCRIPT_DATA_ESCAPED_DASH_DASH_STATE",this._emitChars("-")):e===Oe.LESS_THAN_SIGN?this.state="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE":e===Oe.NULL?(this._err(N),this.state="SCRIPT_DATA_ESCAPED_STATE",this._emitChars(n)):e===Oe.EOF?(this._err(v),this._emitEOFToken()):(this.state="SCRIPT_DATA_ESCAPED_STATE",this._emitCodePoint(e));}SCRIPT_DATA_ESCAPED_DASH_DASH_STATE(e){e===Oe.HYPHEN_MINUS?this._emitChars("-"):e===Oe.LESS_THAN_SIGN?this.state="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE":e===Oe.GREATER_THAN_SIGN?(this.state="SCRIPT_DATA_STATE",this._emitChars(">")):e===Oe.NULL?(this._err(N),this.state="SCRIPT_DATA_ESCAPED_STATE",this._emitChars(n)):e===Oe.EOF?(this._err(v),this._emitEOFToken()):(this.state="SCRIPT_DATA_ESCAPED_STATE",this._emitCodePoint(e));}SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE(e){e===Oe.SOLIDUS?(this.tempBuff=[],this.state="SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE"):Le(e)?(this.tempBuff=[],this._emitChars("<"),this._reconsumeInState("SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE")):(this._emitChars("<"),this._reconsumeInState("SCRIPT_DATA_ESCAPED_STATE"));}SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE(e){Le(e)?(this._createEndTagToken(),this._reconsumeInState("SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE")):(this._emitChars("</"),this._reconsumeInState("SCRIPT_DATA_ESCAPED_STATE"));}SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE(e){if(fe(e))this.currentToken.tagName+=Ue(e),this.tempBuff.push(e);else if(Me(e))this.currentToken.tagName+=He(e),this.tempBuff.push(e);else{if(this.lastStartTagName===this.currentToken.tagName){if(Re(e))return void(this.state="BEFORE_ATTRIBUTE_NAME_STATE");if(e===Oe.SOLIDUS)return void(this.state="SELF_CLOSING_START_TAG_STATE");if(e===Oe.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=de)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState("SCRIPT_DATA_ESCAPED_STATE");}}SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE(e){Re(e)||e===Oe.SOLIDUS||e===Oe.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?"SCRIPT_DATA_DOUBLE_ESCAPED_STATE":"SCRIPT_DATA_ESCAPED_STATE",this._emitCodePoint(e)):fe(e)?(this.tempBuff.push(ke(e)),this._emitCodePoint(e)):Me(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState("SCRIPT_DATA_ESCAPED_STATE");}SCRIPT_DATA_DOUBLE_ESCAPED_STATE(e){e===Oe.HYPHEN_MINUS?(this.state="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE",this._emitChars("-")):e===Oe.LESS_THAN_SIGN?(this.state="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE",this._emitChars("<")):e===Oe.NULL?(this._err(N),this._emitChars(n)):e===Oe.EOF?(this._err(v),this._emitEOFToken()):this._emitCodePoint(e);}SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE(e){e===Oe.HYPHEN_MINUS?(this.state="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE",this._emitChars("-")):e===Oe.LESS_THAN_SIGN?(this.state="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE",this._emitChars("<")):e===Oe.NULL?(this._err(N),this.state="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",this._emitChars(n)):e===Oe.EOF?(this._err(v),this._emitEOFToken()):(this.state="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",this._emitCodePoint(e));}SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE(e){e===Oe.HYPHEN_MINUS?this._emitChars("-"):e===Oe.LESS_THAN_SIGN?(this.state="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE",this._emitChars("<")):e===Oe.GREATER_THAN_SIGN?(this.state="SCRIPT_DATA_STATE",this._emitChars(">")):e===Oe.NULL?(this._err(N),this.state="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",this._emitChars(n)):e===Oe.EOF?(this._err(v),this._emitEOFToken()):(this.state="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",this._emitCodePoint(e));}SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE(e){e===Oe.SOLIDUS?(this.tempBuff=[],this.state="SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE",this._emitChars("/")):this._reconsumeInState("SCRIPT_DATA_DOUBLE_ESCAPED_STATE");}SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE(e){Re(e)||e===Oe.SOLIDUS||e===Oe.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?"SCRIPT_DATA_ESCAPED_STATE":"SCRIPT_DATA_DOUBLE_ESCAPED_STATE",this._emitCodePoint(e)):fe(e)?(this.tempBuff.push(ke(e)),this._emitCodePoint(e)):Me(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState("SCRIPT_DATA_DOUBLE_ESCAPED_STATE");}BEFORE_ATTRIBUTE_NAME_STATE(e){Re(e)||(e===Oe.SOLIDUS||e===Oe.GREATER_THAN_SIGN||e===Oe.EOF?this._reconsumeInState("AFTER_ATTRIBUTE_NAME_STATE"):e===Oe.EQUALS_SIGN?(this._err(S),this._createAttr("="),this.state="ATTRIBUTE_NAME_STATE"):(this._createAttr(""),this._reconsumeInState("ATTRIBUTE_NAME_STATE")));}ATTRIBUTE_NAME_STATE(e){Re(e)||e===Oe.SOLIDUS||e===Oe.GREATER_THAN_SIGN||e===Oe.EOF?(this._leaveAttrName("AFTER_ATTRIBUTE_NAME_STATE"),this._unconsume()):e===Oe.EQUALS_SIGN?this._leaveAttrName("BEFORE_ATTRIBUTE_VALUE_STATE"):fe(e)?this.currentAttr.name+=Ue(e):e===Oe.QUOTATION_MARK||e===Oe.APOSTROPHE||e===Oe.LESS_THAN_SIGN?(this._err(d),this.currentAttr.name+=He(e)):e===Oe.NULL?(this._err(N),this.currentAttr.name+=n):this.currentAttr.name+=He(e);}AFTER_ATTRIBUTE_NAME_STATE(e){Re(e)||(e===Oe.SOLIDUS?this.state="SELF_CLOSING_START_TAG_STATE":e===Oe.EQUALS_SIGN?this.state="BEFORE_ATTRIBUTE_VALUE_STATE":e===Oe.GREATER_THAN_SIGN?(this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(D),this._emitEOFToken()):(this._createAttr(""),this._reconsumeInState("ATTRIBUTE_NAME_STATE")));}BEFORE_ATTRIBUTE_VALUE_STATE(e){Re(e)||(e===Oe.QUOTATION_MARK?this.state="ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE":e===Oe.APOSTROPHE?this.state="ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE":e===Oe.GREATER_THAN_SIGN?(this._err(g),this.state=de,this._emitCurrentToken()):this._reconsumeInState("ATTRIBUTE_VALUE_UNQUOTED_STATE"));}ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE(e){e===Oe.QUOTATION_MARK?this.state="AFTER_ATTRIBUTE_VALUE_QUOTED_STATE":e===Oe.AMPERSAND?(this.returnState="ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE",this.state="CHARACTER_REFERENCE_STATE"):e===Oe.NULL?(this._err(N),this.currentAttr.value+=n):e===Oe.EOF?(this._err(D),this._emitEOFToken()):this.currentAttr.value+=He(e);}ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE(e){e===Oe.APOSTROPHE?this.state="AFTER_ATTRIBUTE_VALUE_QUOTED_STATE":e===Oe.AMPERSAND?(this.returnState="ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE",this.state="CHARACTER_REFERENCE_STATE"):e===Oe.NULL?(this._err(N),this.currentAttr.value+=n):e===Oe.EOF?(this._err(D),this._emitEOFToken()):this.currentAttr.value+=He(e);}ATTRIBUTE_VALUE_UNQUOTED_STATE(e){Re(e)?this._leaveAttrValue("BEFORE_ATTRIBUTE_NAME_STATE"):e===Oe.AMPERSAND?(this.returnState="ATTRIBUTE_VALUE_UNQUOTED_STATE",this.state="CHARACTER_REFERENCE_STATE"):e===Oe.GREATER_THAN_SIGN?(this._leaveAttrValue(de),this._emitCurrentToken()):e===Oe.NULL?(this._err(N),this.currentAttr.value+=n):e===Oe.QUOTATION_MARK||e===Oe.APOSTROPHE||e===Oe.LESS_THAN_SIGN||e===Oe.EQUALS_SIGN||e===Oe.GRAVE_ACCENT?(this._err(M),this.currentAttr.value+=He(e)):e===Oe.EOF?(this._err(D),this._emitEOFToken()):this.currentAttr.value+=He(e);}AFTER_ATTRIBUTE_VALUE_QUOTED_STATE(e){Re(e)?this._leaveAttrValue("BEFORE_ATTRIBUTE_NAME_STATE"):e===Oe.SOLIDUS?this._leaveAttrValue("SELF_CLOSING_START_TAG_STATE"):e===Oe.GREATER_THAN_SIGN?(this._leaveAttrValue(de),this._emitCurrentToken()):e===Oe.EOF?(this._err(D),this._emitEOFToken()):(this._err(P),this._reconsumeInState("BEFORE_ATTRIBUTE_NAME_STATE"));}SELF_CLOSING_START_TAG_STATE(e){e===Oe.GREATER_THAN_SIGN?(this.currentToken.selfClosing=!0,this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(D),this._emitEOFToken()):(this._err(p),this._reconsumeInState("BEFORE_ATTRIBUTE_NAME_STATE"));}BOGUS_COMMENT_STATE(e){e===Oe.GREATER_THAN_SIGN?(this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._emitCurrentToken(),this._emitEOFToken()):e===Oe.NULL?(this._err(N),this.currentToken.data+=n):this.currentToken.data+=He(e);}MARKUP_DECLARATION_OPEN_STATE(e){this._consumeSequenceIfMatch(Se.DASH_DASH_STRING,e,!0)?(this._createCommentToken(),this.state="COMMENT_START_STATE"):this._consumeSequenceIfMatch(Se.DOCTYPE_STRING,e,!1)?this.state="DOCTYPE_STATE":this._consumeSequenceIfMatch(Se.CDATA_START_STRING,e,!0)?this.allowCDATA?this.state="CDATA_SECTION_STATE":(this._err(x),this._createCommentToken(),this.currentToken.data="[CDATA[",this.state="BOGUS_COMMENT_STATE"):this._ensureHibernation()||(this._err(y),this._createCommentToken(),this._reconsumeInState("BOGUS_COMMENT_STATE"));}COMMENT_START_STATE(e){e===Oe.HYPHEN_MINUS?this.state="COMMENT_START_DASH_STATE":e===Oe.GREATER_THAN_SIGN?(this._err(X),this.state=de,this._emitCurrentToken()):this._reconsumeInState("COMMENT_STATE");}COMMENT_START_DASH_STATE(e){e===Oe.HYPHEN_MINUS?this.state="COMMENT_END_STATE":e===Oe.GREATER_THAN_SIGN?(this._err(X),this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(W),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState("COMMENT_STATE"));}COMMENT_STATE(e){e===Oe.HYPHEN_MINUS?this.state="COMMENT_END_DASH_STATE":e===Oe.LESS_THAN_SIGN?(this.currentToken.data+="<",this.state="COMMENT_LESS_THAN_SIGN_STATE"):e===Oe.NULL?(this._err(N),this.currentToken.data+=n):e===Oe.EOF?(this._err(W),this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.data+=He(e);}COMMENT_LESS_THAN_SIGN_STATE(e){e===Oe.EXCLAMATION_MARK?(this.currentToken.data+="!",this.state="COMMENT_LESS_THAN_SIGN_BANG_STATE"):e===Oe.LESS_THAN_SIGN?this.currentToken.data+="!":this._reconsumeInState("COMMENT_STATE");}COMMENT_LESS_THAN_SIGN_BANG_STATE(e){e===Oe.HYPHEN_MINUS?this.state="COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE":this._reconsumeInState("COMMENT_STATE");}COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE(e){e===Oe.HYPHEN_MINUS?this.state="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE":this._reconsumeInState("COMMENT_END_DASH_STATE");}COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE(e){e!==Oe.GREATER_THAN_SIGN&&e!==Oe.EOF&&this._err(Q),this._reconsumeInState("COMMENT_END_STATE");}COMMENT_END_DASH_STATE(e){e===Oe.HYPHEN_MINUS?this.state="COMMENT_END_STATE":e===Oe.EOF?(this._err(W),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState("COMMENT_STATE"));}COMMENT_END_STATE(e){e===Oe.GREATER_THAN_SIGN?(this.state=de,this._emitCurrentToken()):e===Oe.EXCLAMATION_MARK?this.state="COMMENT_END_BANG_STATE":e===Oe.HYPHEN_MINUS?this.currentToken.data+="-":e===Oe.EOF?(this._err(W),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--",this._reconsumeInState("COMMENT_STATE"));}COMMENT_END_BANG_STATE(e){e===Oe.HYPHEN_MINUS?(this.currentToken.data+="--!",this.state="COMMENT_END_DASH_STATE"):e===Oe.GREATER_THAN_SIGN?(this._err(V),this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(W),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--!",this._reconsumeInState("COMMENT_STATE"));}DOCTYPE_STATE(e){Re(e)?this.state="BEFORE_DOCTYPE_NAME_STATE":e===Oe.GREATER_THAN_SIGN?this._reconsumeInState("BEFORE_DOCTYPE_NAME_STATE"):e===Oe.EOF?(this._err(w),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(te),this._reconsumeInState("BEFORE_DOCTYPE_NAME_STATE"));}BEFORE_DOCTYPE_NAME_STATE(e){Re(e)||(fe(e)?(this._createDoctypeToken(Ue(e)),this.state="DOCTYPE_NAME_STATE"):e===Oe.NULL?(this._err(N),this._createDoctypeToken(n),this.state="DOCTYPE_NAME_STATE"):e===Oe.GREATER_THAN_SIGN?(this._err(ne),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=de):e===Oe.EOF?(this._err(w),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._createDoctypeToken(He(e)),this.state="DOCTYPE_NAME_STATE"));}DOCTYPE_NAME_STATE(e){Re(e)?this.state="AFTER_DOCTYPE_NAME_STATE":e===Oe.GREATER_THAN_SIGN?(this.state=de,this._emitCurrentToken()):fe(e)?this.currentToken.name+=Ue(e):e===Oe.NULL?(this._err(N),this.currentToken.name+=n):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.name+=He(e);}AFTER_DOCTYPE_NAME_STATE(e){Re(e)||(e===Oe.GREATER_THAN_SIGN?(this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this._consumeSequenceIfMatch(Se.PUBLIC_STRING,e,!1)?this.state="AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE":this._consumeSequenceIfMatch(Se.SYSTEM_STRING,e,!1)?this.state="AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE":this._ensureHibernation()||(this._err(se),this.currentToken.forceQuirks=!0,this._reconsumeInState("BOGUS_DOCTYPE_STATE")));}AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE(e){Re(e)?this.state="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE":e===Oe.QUOTATION_MARK?(this._err(k),this.currentToken.publicId="",this.state="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE"):e===Oe.APOSTROPHE?(this._err(k),this.currentToken.publicId="",this.state="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE"):e===Oe.GREATER_THAN_SIGN?(this._err(G),this.currentToken.forceQuirks=!0,this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(F),this.currentToken.forceQuirks=!0,this._reconsumeInState("BOGUS_DOCTYPE_STATE"));}BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE(e){Re(e)||(e===Oe.QUOTATION_MARK?(this.currentToken.publicId="",this.state="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE"):e===Oe.APOSTROPHE?(this.currentToken.publicId="",this.state="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE"):e===Oe.GREATER_THAN_SIGN?(this._err(G),this.currentToken.forceQuirks=!0,this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(F),this.currentToken.forceQuirks=!0,this._reconsumeInState("BOGUS_DOCTYPE_STATE")));}DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE(e){e===Oe.QUOTATION_MARK?this.state="AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE":e===Oe.NULL?(this._err(N),this.currentToken.publicId+=n):e===Oe.GREATER_THAN_SIGN?(this._err(b),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=de):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=He(e);}DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE(e){e===Oe.APOSTROPHE?this.state="AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE":e===Oe.NULL?(this._err(N),this.currentToken.publicId+=n):e===Oe.GREATER_THAN_SIGN?(this._err(b),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=de):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=He(e);}AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE(e){Re(e)?this.state="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE":e===Oe.GREATER_THAN_SIGN?(this.state=de,this._emitCurrentToken()):e===Oe.QUOTATION_MARK?(this._err(H),this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE"):e===Oe.APOSTROPHE?(this._err(H),this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE"):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(B),this.currentToken.forceQuirks=!0,this._reconsumeInState("BOGUS_DOCTYPE_STATE"));}BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE(e){Re(e)||(e===Oe.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=de):e===Oe.QUOTATION_MARK?(this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE"):e===Oe.APOSTROPHE?(this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE"):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(B),this.currentToken.forceQuirks=!0,this._reconsumeInState("BOGUS_DOCTYPE_STATE")));}AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE(e){Re(e)?this.state="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE":e===Oe.QUOTATION_MARK?(this._err(U),this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE"):e===Oe.APOSTROPHE?(this._err(U),this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE"):e===Oe.GREATER_THAN_SIGN?(this._err(K),this.currentToken.forceQuirks=!0,this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(B),this.currentToken.forceQuirks=!0,this._reconsumeInState("BOGUS_DOCTYPE_STATE"));}BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE(e){Re(e)||(e===Oe.QUOTATION_MARK?(this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE"):e===Oe.APOSTROPHE?(this.currentToken.systemId="",this.state="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE"):e===Oe.GREATER_THAN_SIGN?(this._err(K),this.currentToken.forceQuirks=!0,this.state=de,this._emitCurrentToken()):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(B),this.currentToken.forceQuirks=!0,this._reconsumeInState("BOGUS_DOCTYPE_STATE")));}DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE(e){e===Oe.QUOTATION_MARK?this.state="AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE":e===Oe.NULL?(this._err(N),this.currentToken.systemId+=n):e===Oe.GREATER_THAN_SIGN?(this._err(Y),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=de):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=He(e);}DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE(e){e===Oe.APOSTROPHE?this.state="AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE":e===Oe.NULL?(this._err(N),this.currentToken.systemId+=n):e===Oe.GREATER_THAN_SIGN?(this._err(Y),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=de):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=He(e);}AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE(e){Re(e)||(e===Oe.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=de):e===Oe.EOF?(this._err(w),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(f),this._reconsumeInState("BOGUS_DOCTYPE_STATE")));}BOGUS_DOCTYPE_STATE(e){e===Oe.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=de):e===Oe.NULL?this._err(N):e===Oe.EOF&&(this._emitCurrentToken(),this._emitEOFToken());}CDATA_SECTION_STATE(e){e===Oe.RIGHT_SQUARE_BRACKET?this.state="CDATA_SECTION_BRACKET_STATE":e===Oe.EOF?(this._err(j),this._emitEOFToken()):this._emitCodePoint(e);}CDATA_SECTION_BRACKET_STATE(e){e===Oe.RIGHT_SQUARE_BRACKET?this.state="CDATA_SECTION_END_STATE":(this._emitChars("]"),this._reconsumeInState("CDATA_SECTION_STATE"));}CDATA_SECTION_END_STATE(e){e===Oe.GREATER_THAN_SIGN?this.state=de:e===Oe.RIGHT_SQUARE_BRACKET?this._emitChars("]"):(this._emitChars("]]"),this._reconsumeInState("CDATA_SECTION_STATE"));}CHARACTER_REFERENCE_STATE(e){this.tempBuff=[Oe.AMPERSAND],e===Oe.NUMBER_SIGN?(this.tempBuff.push(e),this.state="NUMERIC_CHARACTER_REFERENCE_STATE"):De(e)?this._reconsumeInState("NAMED_CHARACTER_REFERENCE_STATE"):(this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState));}NAMED_CHARACTER_REFERENCE_STATE(e){const t=this._matchNamedCharacterReference(e);if(this._ensureHibernation())this.tempBuff=[Oe.AMPERSAND];else if(t){const e=this.tempBuff[this.tempBuff.length-1]===Oe.SEMICOLON;this._isCharacterReferenceAttributeQuirk(e)||(e||this._errOnNextCodePoint(I),this.tempBuff=t),this._flushCodePointsConsumedAsCharacterReference(),this.state=this.returnState;}else this._flushCodePointsConsumedAsCharacterReference(),this.state="AMBIGUOS_AMPERSAND_STATE";}AMBIGUOS_AMPERSAND_STATE(e){De(e)?this._isCharacterReferenceInAttribute()?this.currentAttr.value+=He(e):this._emitCodePoint(e):(e===Oe.SEMICOLON&&this._err(R),this._reconsumeInState(this.returnState));}NUMERIC_CHARACTER_REFERENCE_STATE(e){this.charRefCode=0,e===Oe.LATIN_SMALL_X||e===Oe.LATIN_CAPITAL_X?(this.tempBuff.push(e),this.state="HEXADEMICAL_CHARACTER_REFERENCE_START_STATE"):this._reconsumeInState("DECIMAL_CHARACTER_REFERENCE_START_STATE");}HEXADEMICAL_CHARACTER_REFERENCE_START_STATE(e){!function(e){return Ie(e)||ge(e)||Pe(e)}(e)?(this._err(z),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState)):this._reconsumeInState("HEXADEMICAL_CHARACTER_REFERENCE_STATE");}DECIMAL_CHARACTER_REFERENCE_START_STATE(e){Ie(e)?this._reconsumeInState("DECIMAL_CHARACTER_REFERENCE_STATE"):(this._err(z),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState));}HEXADEMICAL_CHARACTER_REFERENCE_STATE(e){ge(e)?this.charRefCode=16*this.charRefCode+e-55:Pe(e)?this.charRefCode=16*this.charRefCode+e-87:Ie(e)?this.charRefCode=16*this.charRefCode+e-48:e===Oe.SEMICOLON?this.state="NUMERIC_CHARACTER_REFERENCE_END_STATE":(this._err(I),this._reconsumeInState("NUMERIC_CHARACTER_REFERENCE_END_STATE"));}DECIMAL_CHARACTER_REFERENCE_STATE(e){Ie(e)?this.charRefCode=10*this.charRefCode+e-48:e===Oe.SEMICOLON?this.state="NUMERIC_CHARACTER_REFERENCE_END_STATE":(this._err(I),this._reconsumeInState("NUMERIC_CHARACTER_REFERENCE_END_STATE"));}NUMERIC_CHARACTER_REFERENCE_END_STATE(){if(this.charRefCode===Oe.NULL)this._err(q),this.charRefCode=Oe.REPLACEMENT_CHARACTER;else if(this.charRefCode>1114111)this._err(Z),this.charRefCode=Oe.REPLACEMENT_CHARACTER;else if(i(this.charRefCode))this._err(J),this.charRefCode=Oe.REPLACEMENT_CHARACTER;else if(a(this.charRefCode))this._err(ee);else if(E(this.charRefCode)||this.charRefCode===Oe.CARRIAGE_RETURN){this._err($);const e=Ce[this.charRefCode];e&&(this.charRefCode=e);}this.tempBuff=[this.charRefCode],this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState);}}Be.CHARACTER_TOKEN="CHARACTER_TOKEN",Be.NULL_CHARACTER_TOKEN="NULL_CHARACTER_TOKEN",Be.WHITESPACE_CHARACTER_TOKEN="WHITESPACE_CHARACTER_TOKEN",Be.START_TAG_TOKEN="START_TAG_TOKEN",Be.END_TAG_TOKEN="END_TAG_TOKEN",Be.COMMENT_TOKEN="COMMENT_TOKEN",Be.DOCTYPE_TOKEN="DOCTYPE_TOKEN",Be.EOF_TOKEN="EOF_TOKEN",Be.HIBERNATION_TOKEN="HIBERNATION_TOKEN",Be.MODE={DATA:de,RCDATA:"RCDATA_STATE",RAWTEXT:"RAWTEXT_STATE",SCRIPT_DATA:"SCRIPT_DATA_STATE",PLAINTEXT:"PLAINTEXT_STATE"},Be.getTokenAttr=function(e,t){for(let n=e.attrs.length-1;n>=0;n--)if(e.attrs[n].name===t)return e.attrs[n].value;return null};var Ge=Be;function Ke(e,t){return e(t={exports:{}},t.exports),t.exports}var be=Ke((function(e,t){const n=t.NAMESPACES={HTML:"http://www.w3.org/1999/xhtml",MATHML:"http://www.w3.org/1998/Math/MathML",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"};t.ATTRS={TYPE:"type",ACTION:"action",ENCODING:"encoding",PROMPT:"prompt",NAME:"name",COLOR:"color",FACE:"face",SIZE:"size"},t.DOCUMENT_MODE={NO_QUIRKS:"no-quirks",QUIRKS:"quirks",LIMITED_QUIRKS:"limited-quirks"};const s=t.TAG_NAMES={A:"a",ADDRESS:"address",ANNOTATION_XML:"annotation-xml",APPLET:"applet",AREA:"area",ARTICLE:"article",ASIDE:"aside",B:"b",BASE:"base",BASEFONT:"basefont",BGSOUND:"bgsound",BIG:"big",BLOCKQUOTE:"blockquote",BODY:"body",BR:"br",BUTTON:"button",CAPTION:"caption",CENTER:"center",CODE:"code",COL:"col",COLGROUP:"colgroup",DD:"dd",DESC:"desc",DETAILS:"details",DIALOG:"dialog",DIR:"dir",DIV:"div",DL:"dl",DT:"dt",EM:"em",EMBED:"embed",FIELDSET:"fieldset",FIGCAPTION:"figcaption",FIGURE:"figure",FONT:"font",FOOTER:"footer",FOREIGN_OBJECT:"foreignObject",FORM:"form",FRAME:"frame",FRAMESET:"frameset",H1:"h1",H2:"h2",H3:"h3",H4:"h4",H5:"h5",H6:"h6",HEAD:"head",HEADER:"header",HGROUP:"hgroup",HR:"hr",HTML:"html",I:"i",IMG:"img",IMAGE:"image",INPUT:"input",IFRAME:"iframe",KEYGEN:"keygen",LABEL:"label",LI:"li",LINK:"link",LISTING:"listing",MAIN:"main",MALIGNMARK:"malignmark",MARQUEE:"marquee",MATH:"math",MENU:"menu",META:"meta",MGLYPH:"mglyph",MI:"mi",MO:"mo",MN:"mn",MS:"ms",MTEXT:"mtext",NAV:"nav",NOBR:"nobr",NOFRAMES:"noframes",NOEMBED:"noembed",NOSCRIPT:"noscript",OBJECT:"object",OL:"ol",OPTGROUP:"optgroup",OPTION:"option",P:"p",PARAM:"param",PLAINTEXT:"plaintext",PRE:"pre",RB:"rb",RP:"rp",RT:"rt",RTC:"rtc",RUBY:"ruby",S:"s",SCRIPT:"script",SECTION:"section",SELECT:"select",SOURCE:"source",SMALL:"small",SPAN:"span",STRIKE:"strike",STRONG:"strong",STYLE:"style",SUB:"sub",SUMMARY:"summary",SUP:"sup",TABLE:"table",TBODY:"tbody",TEMPLATE:"template",TEXTAREA:"textarea",TFOOT:"tfoot",TD:"td",TH:"th",THEAD:"thead",TITLE:"title",TR:"tr",TRACK:"track",TT:"tt",U:"u",UL:"ul",SVG:"svg",VAR:"var",WBR:"wbr",XMP:"xmp"};t.SPECIAL_ELEMENTS={[n.HTML]:{[s.ADDRESS]:!0,[s.APPLET]:!0,[s.AREA]:!0,[s.ARTICLE]:!0,[s.ASIDE]:!0,[s.BASE]:!0,[s.BASEFONT]:!0,[s.BGSOUND]:!0,[s.BLOCKQUOTE]:!0,[s.BODY]:!0,[s.BR]:!0,[s.BUTTON]:!0,[s.CAPTION]:!0,[s.CENTER]:!0,[s.COL]:!0,[s.COLGROUP]:!0,[s.DD]:!0,[s.DETAILS]:!0,[s.DIR]:!0,[s.DIV]:!0,[s.DL]:!0,[s.DT]:!0,[s.EMBED]:!0,[s.FIELDSET]:!0,[s.FIGCAPTION]:!0,[s.FIGURE]:!0,[s.FOOTER]:!0,[s.FORM]:!0,[s.FRAME]:!0,[s.FRAMESET]:!0,[s.H1]:!0,[s.H2]:!0,[s.H3]:!0,[s.H4]:!0,[s.H5]:!0,[s.H6]:!0,[s.HEAD]:!0,[s.HEADER]:!0,[s.HGROUP]:!0,[s.HR]:!0,[s.HTML]:!0,[s.IFRAME]:!0,[s.IMG]:!0,[s.INPUT]:!0,[s.LI]:!0,[s.LINK]:!0,[s.LISTING]:!0,[s.MAIN]:!0,[s.MARQUEE]:!0,[s.MENU]:!0,[s.META]:!0,[s.NAV]:!0,[s.NOEMBED]:!0,[s.NOFRAMES]:!0,[s.NOSCRIPT]:!0,[s.OBJECT]:!0,[s.OL]:!0,[s.P]:!0,[s.PARAM]:!0,[s.PLAINTEXT]:!0,[s.PRE]:!0,[s.SCRIPT]:!0,[s.SECTION]:!0,[s.SELECT]:!0,[s.SOURCE]:!0,[s.STYLE]:!0,[s.SUMMARY]:!0,[s.TABLE]:!0,[s.TBODY]:!0,[s.TD]:!0,[s.TEMPLATE]:!0,[s.TEXTAREA]:!0,[s.TFOOT]:!0,[s.TH]:!0,[s.THEAD]:!0,[s.TITLE]:!0,[s.TR]:!0,[s.TRACK]:!0,[s.UL]:!0,[s.WBR]:!0,[s.XMP]:!0},[n.MATHML]:{[s.MI]:!0,[s.MO]:!0,[s.MN]:!0,[s.MS]:!0,[s.MTEXT]:!0,[s.ANNOTATION_XML]:!0},[n.SVG]:{[s.TITLE]:!0,[s.FOREIGN_OBJECT]:!0,[s.DESC]:!0}};}));be.NAMESPACES,be.ATTRS,be.DOCUMENT_MODE,be.TAG_NAMES,be.SPECIAL_ELEMENTS;const Ye=be.TAG_NAMES,xe=be.NAMESPACES;function ye(e){switch(e.length){case 1:return e===Ye.P;case 2:return e===Ye.RB||e===Ye.RP||e===Ye.RT||e===Ye.DD||e===Ye.DT||e===Ye.LI;case 3:return e===Ye.RTC;case 6:return e===Ye.OPTION;case 8:return e===Ye.OPTGROUP}return !1}function ve(e){switch(e.length){case 1:return e===Ye.P;case 2:return e===Ye.RB||e===Ye.RP||e===Ye.RT||e===Ye.DD||e===Ye.DT||e===Ye.LI||e===Ye.TD||e===Ye.TH||e===Ye.TR;case 3:return e===Ye.RTC;case 5:return e===Ye.TBODY||e===Ye.TFOOT||e===Ye.THEAD;case 6:return e===Ye.OPTION;case 7:return e===Ye.CAPTION;case 8:return e===Ye.OPTGROUP||e===Ye.COLGROUP}return !1}function we(e,t){switch(e.length){case 2:if(e===Ye.TD||e===Ye.TH)return t===xe.HTML;if(e===Ye.MI||e===Ye.MO||e===Ye.MN||e===Ye.MS)return t===xe.MATHML;break;case 4:if(e===Ye.HTML)return t===xe.HTML;if(e===Ye.DESC)return t===xe.SVG;break;case 5:if(e===Ye.TABLE)return t===xe.HTML;if(e===Ye.MTEXT)return t===xe.MATHML;if(e===Ye.TITLE)return t===xe.SVG;break;case 6:return (e===Ye.APPLET||e===Ye.OBJECT)&&t===xe.HTML;case 7:return (e===Ye.CAPTION||e===Ye.MARQUEE)&&t===xe.HTML;case 8:return e===Ye.TEMPLATE&&t===xe.HTML;case 13:return e===Ye.FOREIGN_OBJECT&&t===xe.SVG;case 14:return e===Ye.ANNOTATION_XML&&t===xe.MATHML}return !1}var Qe=class{constructor(e,t){this.stackTop=-1,this.items=[],this.current=e,this.currentTagName=null,this.currentTmplContent=null,this.tmplCount=0,this.treeAdapter=t;}_indexOf(e){let t=-1;for(let n=this.stackTop;n>=0;n--)if(this.items[n]===e){t=n;break}return t}_isInTemplate(){return this.currentTagName===Ye.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===xe.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagName=this.current&&this.treeAdapter.getTagName(this.current),this.currentTmplContent=this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):null;}push(e){this.items[++this.stackTop]=e,this._updateCurrentElement(),this._isInTemplate()&&this.tmplCount++;}pop(){this.stackTop--,this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this._updateCurrentElement();}replace(e,t){const n=this._indexOf(e);this.items[n]=t,n===this.stackTop&&this._updateCurrentElement();}insertAfter(e,t){const n=this._indexOf(e)+1;this.items.splice(n,0,t),n===++this.stackTop&&this._updateCurrentElement();}popUntilTagNamePopped(e){for(;this.stackTop>-1;){const t=this.currentTagName,n=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),t===e&&n===xe.HTML)break}}popUntilElementPopped(e){for(;this.stackTop>-1;){const t=this.current;if(this.pop(),t===e)break}}popUntilNumberedHeaderPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===Ye.H1||e===Ye.H2||e===Ye.H3||e===Ye.H4||e===Ye.H5||e===Ye.H6&&t===xe.HTML)break}}popUntilTableCellPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===Ye.TD||e===Ye.TH&&t===xe.HTML)break}}popAllUpToHtmlElement(){this.stackTop=0,this._updateCurrentElement();}clearBackToTableContext(){for(;this.currentTagName!==Ye.TABLE&&this.currentTagName!==Ye.TEMPLATE&&this.currentTagName!==Ye.HTML||this.treeAdapter.getNamespaceURI(this.current)!==xe.HTML;)this.pop();}clearBackToTableBodyContext(){for(;this.currentTagName!==Ye.TBODY&&this.currentTagName!==Ye.TFOOT&&this.currentTagName!==Ye.THEAD&&this.currentTagName!==Ye.TEMPLATE&&this.currentTagName!==Ye.HTML||this.treeAdapter.getNamespaceURI(this.current)!==xe.HTML;)this.pop();}clearBackToTableRowContext(){for(;this.currentTagName!==Ye.TR&&this.currentTagName!==Ye.TEMPLATE&&this.currentTagName!==Ye.HTML||this.treeAdapter.getNamespaceURI(this.current)!==xe.HTML;)this.pop();}remove(e){for(let t=this.stackTop;t>=0;t--)if(this.items[t]===e){this.items.splice(t,1),this.stackTop--,this._updateCurrentElement();break}}tryPeekProperlyNestedBodyElement(){const e=this.items[1];return e&&this.treeAdapter.getTagName(e)===Ye.BODY?e:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){let t=this._indexOf(e);return --t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.currentTagName===Ye.HTML}hasInScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===xe.HTML)return !0;if(we(n,s))return !1}return !0}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]),n=this.treeAdapter.getNamespaceURI(this.items[e]);if((t===Ye.H1||t===Ye.H2||t===Ye.H3||t===Ye.H4||t===Ye.H5||t===Ye.H6)&&n===xe.HTML)return !0;if(we(t,n))return !1}return !0}hasInListItemScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===xe.HTML)return !0;if((n===Ye.UL||n===Ye.OL)&&s===xe.HTML||we(n,s))return !1}return !0}hasInButtonScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===xe.HTML)return !0;if(n===Ye.BUTTON&&s===xe.HTML||we(n,s))return !1}return !0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===xe.HTML){if(n===e)return !0;if(n===Ye.TABLE||n===Ye.TEMPLATE||n===Ye.HTML)return !1}}return !0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]);if(this.treeAdapter.getNamespaceURI(this.items[e])===xe.HTML){if(t===Ye.TBODY||t===Ye.THEAD||t===Ye.TFOOT)return !0;if(t===Ye.TABLE||t===Ye.HTML)return !1}}return !0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===xe.HTML){if(n===e)return !0;if(n!==Ye.OPTION&&n!==Ye.OPTGROUP)return !1}}return !0}generateImpliedEndTags(){for(;ye(this.currentTagName);)this.pop();}generateImpliedEndTagsThoroughly(){for(;ve(this.currentTagName);)this.pop();}generateImpliedEndTagsWithExclusion(e){for(;ye(this.currentTagName)&&this.currentTagName!==e;)this.pop();}};class Xe{constructor(e){this.length=0,this.entries=[],this.treeAdapter=e,this.bookmark=null;}_getNoahArkConditionCandidates(e){const t=[];if(this.length>=3){const n=this.treeAdapter.getAttrList(e).length,s=this.treeAdapter.getTagName(e),r=this.treeAdapter.getNamespaceURI(e);for(let e=this.length-1;e>=0;e--){const i=this.entries[e];if(i.type===Xe.MARKER_ENTRY)break;const T=i.element,o=this.treeAdapter.getAttrList(T);this.treeAdapter.getTagName(T)===s&&this.treeAdapter.getNamespaceURI(T)===r&&o.length===n&&t.push({idx:e,attrs:o});}}return t.length<3?[]:t}_ensureNoahArkCondition(e){const t=this._getNoahArkConditionCandidates(e);let n=t.length;if(n){const s=this.treeAdapter.getAttrList(e),r=s.length,i=Object.create(null);for(let e=0;e<r;e++){const t=s[e];i[t.name]=t.value;}for(let e=0;e<r;e++)for(let s=0;s<n;s++){const r=t[s].attrs[e];if(i[r.name]!==r.value&&(t.splice(s,1),n--),t.length<3)return}for(let e=n-1;e>=2;e--)this.entries.splice(t[e].idx,1),this.length--;}}insertMarker(){this.entries.push({type:Xe.MARKER_ENTRY}),this.length++;}pushElement(e,t){this._ensureNoahArkCondition(e),this.entries.push({type:Xe.ELEMENT_ENTRY,element:e,token:t}),this.length++;}insertElementAfterBookmark(e,t){let n=this.length-1;for(;n>=0&&this.entries[n]!==this.bookmark;n--);this.entries.splice(n+1,0,{type:Xe.ELEMENT_ENTRY,element:e,token:t}),this.length++;}removeEntry(e){for(let t=this.length-1;t>=0;t--)if(this.entries[t]===e){this.entries.splice(t,1),this.length--;break}}clearToLastMarker(){for(;this.length;){const e=this.entries.pop();if(this.length--,e.type===Xe.MARKER_ENTRY)break}}getElementEntryInScopeWithTagName(e){for(let t=this.length-1;t>=0;t--){const n=this.entries[t];if(n.type===Xe.MARKER_ENTRY)return null;if(this.treeAdapter.getTagName(n.element)===e)return n}return null}getElementEntry(e){for(let t=this.length-1;t>=0;t--){const n=this.entries[t];if(n.type===Xe.ELEMENT_ENTRY&&n.element===e)return n}return null}}Xe.MARKER_ENTRY="MARKER_ENTRY",Xe.ELEMENT_ENTRY="ELEMENT_ENTRY";var We=Xe;class Ve{constructor(e){const t={},n=this._getOverriddenMethods(this,t);for(const s of Object.keys(n))"function"==typeof n[s]&&(t[s]=e[s],e[s]=n[s]);}_getOverriddenMethods(){throw new Error("Not implemented")}}Ve.install=function(e,t,n){e.__mixins||(e.__mixins=[]);for(let n=0;n<e.__mixins.length;n++)if(e.__mixins[n].constructor===t)return e.__mixins[n];const s=new t(e,n);return e.__mixins.push(s),s};var je=Ve;var ze=class extends je{constructor(e){super(e),this.preprocessor=e,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.offset=0,this.col=0,this.line=1;}_getOverriddenMethods(e,t){return {advance(){const n=this.pos+1,s=this.html[n];return e.isEol&&(e.isEol=!1,e.line++,e.lineStartPos=n),("\n"===s||"\r"===s&&"\n"!==this.html[n+1])&&(e.isEol=!0),e.col=n-e.lineStartPos+1,e.offset=e.droppedBufferSize+n,t.advance.call(this)},retreat(){t.retreat.call(this),e.isEol=!1,e.col=this.pos-e.lineStartPos+1;},dropParsedChunk(){const n=this.pos;t.dropParsedChunk.call(this);const s=n-this.pos;e.lineStartPos-=s,e.droppedBufferSize+=s,e.offset=e.droppedBufferSize+this.pos;}}}};var qe=class extends je{constructor(e){super(e),this.tokenizer=e,this.posTracker=je.install(e.preprocessor,ze),this.currentAttrLocation=null,this.ctLoc=null;}_getCurrentLocation(){return {startLine:this.posTracker.line,startCol:this.posTracker.col,startOffset:this.posTracker.offset,endLine:-1,endCol:-1,endOffset:-1}}_attachCurrentAttrLocationInfo(){this.currentAttrLocation.endLine=this.posTracker.line,this.currentAttrLocation.endCol=this.posTracker.col,this.currentAttrLocation.endOffset=this.posTracker.offset;const e=this.tokenizer.currentToken,t=this.tokenizer.currentAttr;e.location.attrs||(e.location.attrs=Object.create(null)),e.location.attrs[t.name]=this.currentAttrLocation;}_getOverriddenMethods(e,t){const n={_createStartTagToken(){t._createStartTagToken.call(this),this.currentToken.location=e.ctLoc;},_createEndTagToken(){t._createEndTagToken.call(this),this.currentToken.location=e.ctLoc;},_createCommentToken(){t._createCommentToken.call(this),this.currentToken.location=e.ctLoc;},_createDoctypeToken(n){t._createDoctypeToken.call(this,n),this.currentToken.location=e.ctLoc;},_createCharacterToken(n,s){t._createCharacterToken.call(this,n,s),this.currentCharacterToken.location=e.ctLoc;},_createEOFToken(){t._createEOFToken.call(this),this.currentToken.location=e._getCurrentLocation();},_createAttr(n){t._createAttr.call(this,n),e.currentAttrLocation=e._getCurrentLocation();},_leaveAttrName(n){t._leaveAttrName.call(this,n),e._attachCurrentAttrLocationInfo();},_leaveAttrValue(n){t._leaveAttrValue.call(this,n),e._attachCurrentAttrLocationInfo();},_emitCurrentToken(){const n=this.currentToken.location;this.currentCharacterToken&&(this.currentCharacterToken.location.endLine=n.startLine,this.currentCharacterToken.location.endCol=n.startCol,this.currentCharacterToken.location.endOffset=n.startOffset),this.currentToken.type===Ge.EOF_TOKEN?(n.endLine=n.startLine,n.endCol=n.startCol,n.endOffset=n.startOffset):(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col+1,n.endOffset=e.posTracker.offset+1),t._emitCurrentToken.call(this);},_emitCurrentCharacterToken(){const n=this.currentCharacterToken&&this.currentCharacterToken.location;n&&-1===n.endOffset&&(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col,n.endOffset=e.posTracker.offset),t._emitCurrentCharacterToken.call(this);}};return Object.keys(Ge.MODE).forEach(s=>{const r=Ge.MODE[s];n[r]=function(n){e.ctLoc=e._getCurrentLocation(),t[r].call(this,n);};}),n}};var Je=class extends je{constructor(e,t){super(e),this.onItemPop=t.onItemPop;}_getOverriddenMethods(e,t){return {pop(){e.onItemPop(this.current),t.pop.call(this);},popAllUpToHtmlElement(){for(let t=this.stackTop;t>0;t--)e.onItemPop(this.items[t]);t.popAllUpToHtmlElement.call(this);},remove(n){e.onItemPop(this.current),t.remove.call(this,n);}}}};const Ze=be.TAG_NAMES;var $e=class extends je{constructor(e){super(e),this.parser=e,this.treeAdapter=this.parser.treeAdapter,this.posTracker=null,this.lastStartTagToken=null,this.lastFosterParentingLocation=null,this.currentToken=null;}_setStartLocation(e){let t=null;this.lastStartTagToken&&(t=Object.assign({},this.lastStartTagToken.location),t.startTag=this.lastStartTagToken.location),this.treeAdapter.setNodeSourceCodeLocation(e,t);}_setEndLocation(e,t){const n=this.treeAdapter.getNodeSourceCodeLocation(e);if(n&&t.location){const s=t.location,r=this.treeAdapter.getTagName(e);t.type===Ge.END_TAG_TOKEN&&r===t.tagName?(n.endTag=Object.assign({},s),n.endLine=s.endLine,n.endCol=s.endCol,n.endOffset=s.endOffset):(n.endLine=s.startLine,n.endCol=s.startCol,n.endOffset=s.startOffset);}}_getOverriddenMethods(e,t){return {_bootstrap(n,s){t._bootstrap.call(this,n,s),e.lastStartTagToken=null,e.lastFosterParentingLocation=null,e.currentToken=null;const r=je.install(this.tokenizer,qe);e.posTracker=r.posTracker,je.install(this.openElements,Je,{onItemPop:function(t){e._setEndLocation(t,e.currentToken);}});},_runParsingLoop(n){t._runParsingLoop.call(this,n);for(let t=this.openElements.stackTop;t>=0;t--)e._setEndLocation(this.openElements.items[t],e.currentToken);},_processTokenInForeignContent(n){e.currentToken=n,t._processTokenInForeignContent.call(this,n);},_processToken(n){if(e.currentToken=n,t._processToken.call(this,n),n.type===Ge.END_TAG_TOKEN&&(n.tagName===Ze.HTML||n.tagName===Ze.BODY&&this.openElements.hasInScope(Ze.BODY)))for(let t=this.openElements.stackTop;t>=0;t--){const s=this.openElements.items[t];if(this.treeAdapter.getTagName(s)===n.tagName){e._setEndLocation(s,n);break}}},_setDocumentType(e){t._setDocumentType.call(this,e);const n=this.treeAdapter.getChildNodes(this.document),s=n.length;for(let t=0;t<s;t++){const s=n[t];if(this.treeAdapter.isDocumentTypeNode(s)){this.treeAdapter.setNodeSourceCodeLocation(s,e.location);break}}},_attachElementToTree(n){e._setStartLocation(n),e.lastStartTagToken=null,t._attachElementToTree.call(this,n);},_appendElement(n,s){e.lastStartTagToken=n,t._appendElement.call(this,n,s);},_insertElement(n,s){e.lastStartTagToken=n,t._insertElement.call(this,n,s);},_insertTemplate(n){e.lastStartTagToken=n,t._insertTemplate.call(this,n);const s=this.treeAdapter.getTemplateContent(this.openElements.current);this.treeAdapter.setNodeSourceCodeLocation(s,null);},_insertFakeRootElement(){t._insertFakeRootElement.call(this),this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current,null);},_appendCommentNode(e,n){t._appendCommentNode.call(this,e,n);const s=this.treeAdapter.getChildNodes(n),r=s[s.length-1];this.treeAdapter.setNodeSourceCodeLocation(r,e.location);},_findFosterParentingLocation(){return e.lastFosterParentingLocation=t._findFosterParentingLocation.call(this),e.lastFosterParentingLocation},_insertCharacters(n){t._insertCharacters.call(this,n);const s=this._shouldFosterParentOnInsertion(),r=s&&e.lastFosterParentingLocation.parent||this.openElements.currentTmplContent||this.openElements.current,i=this.treeAdapter.getChildNodes(r),T=s&&e.lastFosterParentingLocation.beforeElement?i.indexOf(e.lastFosterParentingLocation.beforeElement)-1:i.length-1,o=i[T],E=this.treeAdapter.getNodeSourceCodeLocation(o);E?(E.endLine=n.location.endLine,E.endCol=n.location.endCol,E.endOffset=n.location.endOffset):this.treeAdapter.setNodeSourceCodeLocation(o,n.location);}}}};var et=class extends je{constructor(e,t){super(e),this.posTracker=null,this.onParseError=t.onParseError;}_setErrorLocation(e){e.startLine=e.endLine=this.posTracker.line,e.startCol=e.endCol=this.posTracker.col,e.startOffset=e.endOffset=this.posTracker.offset;}_reportError(e){const t={code:e,startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1};this._setErrorLocation(t),this.onParseError(t);}_getOverriddenMethods(e){return {_err(t){e._reportError(t);}}}};var tt=class extends et{constructor(e,t){super(e,t),this.posTracker=je.install(e,ze),this.lastErrOffset=-1;}_reportError(e){this.lastErrOffset!==this.posTracker.offset&&(this.lastErrOffset=this.posTracker.offset,super._reportError(e));}};var nt=class extends et{constructor(e,t){super(e,t);const n=je.install(e.preprocessor,tt,t);this.posTracker=n.posTracker;}};var st=class extends et{constructor(e,t){super(e,t),this.opts=t,this.ctLoc=null,this.locBeforeToken=!1;}_setErrorLocation(e){this.ctLoc&&(e.startLine=this.ctLoc.startLine,e.startCol=this.ctLoc.startCol,e.startOffset=this.ctLoc.startOffset,e.endLine=this.locBeforeToken?this.ctLoc.startLine:this.ctLoc.endLine,e.endCol=this.locBeforeToken?this.ctLoc.startCol:this.ctLoc.endCol,e.endOffset=this.locBeforeToken?this.ctLoc.startOffset:this.ctLoc.endOffset);}_getOverriddenMethods(e,t){return {_bootstrap(n,s){t._bootstrap.call(this,n,s),je.install(this.tokenizer,nt,e.opts),je.install(this.tokenizer,qe);},_processInputToken(n){e.ctLoc=n.location,t._processInputToken.call(this,n);},_err(t,n){e.locBeforeToken=n&&n.beforeToken,e._reportError(t);}}}},rt=Ke((function(e,t){const{DOCUMENT_MODE:n}=be;t.createDocument=function(){return {nodeName:"#document",mode:n.NO_QUIRKS,childNodes:[]}},t.createDocumentFragment=function(){return {nodeName:"#document-fragment",childNodes:[]}},t.createElement=function(e,t,n){return {nodeName:e,tagName:e,attrs:n,namespaceURI:t,childNodes:[],parentNode:null}},t.createCommentNode=function(e){return {nodeName:"#comment",data:e,parentNode:null}};const s=function(e){return {nodeName:"#text",value:e,parentNode:null}},r=t.appendChild=function(e,t){e.childNodes.push(t),t.parentNode=e;},i=t.insertBefore=function(e,t,n){const s=e.childNodes.indexOf(n);e.childNodes.splice(s,0,t),t.parentNode=e;};t.setTemplateContent=function(e,t){e.content=t;},t.getTemplateContent=function(e){return e.content},t.setDocumentType=function(e,t,n,s){let i=null;for(let t=0;t<e.childNodes.length;t++)if("#documentType"===e.childNodes[t].nodeName){i=e.childNodes[t];break}i?(i.name=t,i.publicId=n,i.systemId=s):r(e,{nodeName:"#documentType",name:t,publicId:n,systemId:s});},t.setDocumentMode=function(e,t){e.mode=t;},t.getDocumentMode=function(e){return e.mode},t.detachNode=function(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null;}},t.insertText=function(e,t){if(e.childNodes.length){const n=e.childNodes[e.childNodes.length-1];if("#text"===n.nodeName)return void(n.value+=t)}r(e,s(t));},t.insertTextBefore=function(e,t,n){const r=e.childNodes[e.childNodes.indexOf(n)-1];r&&"#text"===r.nodeName?r.value+=t:i(e,s(t),n);},t.adoptAttributes=function(e,t){const n=[];for(let t=0;t<e.attrs.length;t++)n.push(e.attrs[t].name);for(let s=0;s<t.length;s++)-1===n.indexOf(t[s].name)&&e.attrs.push(t[s]);},t.getFirstChild=function(e){return e.childNodes[0]},t.getChildNodes=function(e){return e.childNodes},t.getParentNode=function(e){return e.parentNode},t.getAttrList=function(e){return e.attrs},t.getTagName=function(e){return e.tagName},t.getNamespaceURI=function(e){return e.namespaceURI},t.getTextNodeContent=function(e){return e.value},t.getCommentNodeContent=function(e){return e.data},t.getDocumentTypeNodeName=function(e){return e.name},t.getDocumentTypeNodePublicId=function(e){return e.publicId},t.getDocumentTypeNodeSystemId=function(e){return e.systemId},t.isTextNode=function(e){return "#text"===e.nodeName},t.isCommentNode=function(e){return "#comment"===e.nodeName},t.isDocumentTypeNode=function(e){return "#documentType"===e.nodeName},t.isElementNode=function(e){return !!e.tagName},t.setNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=t;},t.getNodeSourceCodeLocation=function(e){return e.sourceCodeLocation};}));rt.createDocument,rt.createDocumentFragment,rt.createElement,rt.createCommentNode,rt.appendChild,rt.insertBefore,rt.setTemplateContent,rt.getTemplateContent,rt.setDocumentType,rt.setDocumentMode,rt.getDocumentMode,rt.detachNode,rt.insertText,rt.insertTextBefore,rt.adoptAttributes,rt.getFirstChild,rt.getChildNodes,rt.getParentNode,rt.getAttrList,rt.getTagName,rt.getNamespaceURI,rt.getTextNodeContent,rt.getCommentNodeContent,rt.getDocumentTypeNodeName,rt.getDocumentTypeNodePublicId,rt.getDocumentTypeNodeSystemId,rt.isTextNode,rt.isCommentNode,rt.isDocumentTypeNode,rt.isElementNode,rt.setNodeSourceCodeLocation,rt.getNodeSourceCodeLocation;const{DOCUMENT_MODE:it}=be,Tt=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],ot=Tt.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]),Et=["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"],at=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],_t=at.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]);function At(e,t){for(let n=0;n<t.length;n++)if(0===e.indexOf(t[n]))return !0;return !1}var ht=function(e){return "html"===e.name&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)},ct=function(e){if("html"!==e.name)return it.QUIRKS;const t=e.systemId;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return it.QUIRKS;let n=e.publicId;if(null!==n){if(n=n.toLowerCase(),Et.indexOf(n)>-1)return it.QUIRKS;let e=null===t?ot:Tt;if(At(n,e))return it.QUIRKS;if(e=null===t?at:_t,At(n,e))return it.LIMITED_QUIRKS}return it.NO_QUIRKS},lt=Ke((function(e,t){const n=be.TAG_NAMES,s=be.NAMESPACES,r=be.ATTRS,i="text/html",T="application/xhtml+xml",o={attributename:"attributeName",attributetype:"attributeType",basefrequency:"baseFrequency",baseprofile:"baseProfile",calcmode:"calcMode",clippathunits:"clipPathUnits",diffuseconstant:"diffuseConstant",edgemode:"edgeMode",filterunits:"filterUnits",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",limitingconeangle:"limitingConeAngle",markerheight:"markerHeight",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textlength:"textLength",viewbox:"viewBox",viewtarget:"viewTarget",xchannelselector:"xChannelSelector",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan"},E={"xlink:actuate":{prefix:"xlink",name:"actuate",namespace:s.XLINK},"xlink:arcrole":{prefix:"xlink",name:"arcrole",namespace:s.XLINK},"xlink:href":{prefix:"xlink",name:"href",namespace:s.XLINK},"xlink:role":{prefix:"xlink",name:"role",namespace:s.XLINK},"xlink:show":{prefix:"xlink",name:"show",namespace:s.XLINK},"xlink:title":{prefix:"xlink",name:"title",namespace:s.XLINK},"xlink:type":{prefix:"xlink",name:"type",namespace:s.XLINK},"xml:base":{prefix:"xml",name:"base",namespace:s.XML},"xml:lang":{prefix:"xml",name:"lang",namespace:s.XML},"xml:space":{prefix:"xml",name:"space",namespace:s.XML},xmlns:{prefix:"",name:"xmlns",namespace:s.XMLNS},"xmlns:xlink":{prefix:"xmlns",name:"xlink",namespace:s.XMLNS}},a=t.SVG_TAG_NAMES_ADJUSTMENT_MAP={altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient",textpath:"textPath"},_={[n.B]:!0,[n.BIG]:!0,[n.BLOCKQUOTE]:!0,[n.BODY]:!0,[n.BR]:!0,[n.CENTER]:!0,[n.CODE]:!0,[n.DD]:!0,[n.DIV]:!0,[n.DL]:!0,[n.DT]:!0,[n.EM]:!0,[n.EMBED]:!0,[n.H1]:!0,[n.H2]:!0,[n.H3]:!0,[n.H4]:!0,[n.H5]:!0,[n.H6]:!0,[n.HEAD]:!0,[n.HR]:!0,[n.I]:!0,[n.IMG]:!0,[n.LI]:!0,[n.LISTING]:!0,[n.MENU]:!0,[n.META]:!0,[n.NOBR]:!0,[n.OL]:!0,[n.P]:!0,[n.PRE]:!0,[n.RUBY]:!0,[n.S]:!0,[n.SMALL]:!0,[n.SPAN]:!0,[n.STRONG]:!0,[n.STRIKE]:!0,[n.SUB]:!0,[n.SUP]:!0,[n.TABLE]:!0,[n.TT]:!0,[n.U]:!0,[n.UL]:!0,[n.VAR]:!0};t.causesExit=function(e){const t=e.tagName;return !!(t===n.FONT&&(null!==Ge.getTokenAttr(e,r.COLOR)||null!==Ge.getTokenAttr(e,r.SIZE)||null!==Ge.getTokenAttr(e,r.FACE)))||_[t]},t.adjustTokenMathMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}},t.adjustTokenSVGAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=o[e.attrs[t].name];n&&(e.attrs[t].name=n);}},t.adjustTokenXMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=E[e.attrs[t].name];n&&(e.attrs[t].prefix=n.prefix,e.attrs[t].name=n.name,e.attrs[t].namespace=n.namespace);}},t.adjustTokenSVGTagName=function(e){const t=a[e.tagName];t&&(e.tagName=t);},t.isIntegrationPoint=function(e,t,o,E){return !(E&&E!==s.HTML||!function(e,t,o){if(t===s.MATHML&&e===n.ANNOTATION_XML)for(let e=0;e<o.length;e++)if(o[e].name===r.ENCODING){const t=o[e].value.toLowerCase();return t===i||t===T}return t===s.SVG&&(e===n.FOREIGN_OBJECT||e===n.DESC||e===n.TITLE)}(e,t,o))||!(E&&E!==s.MATHML||!function(e,t){return t===s.MATHML&&(e===n.MI||e===n.MO||e===n.MN||e===n.MS||e===n.MTEXT)}(e,t))};}));lt.SVG_TAG_NAMES_ADJUSTMENT_MAP,lt.causesExit,lt.adjustTokenMathMLAttrs,lt.adjustTokenSVGAttrs,lt.adjustTokenXMLAttrs,lt.adjustTokenSVGTagName,lt.isIntegrationPoint;const mt=be.TAG_NAMES,pt=be.NAMESPACES,Nt=be.ATTRS,ut={scriptingEnabled:!0,sourceCodeLocationInfo:!1,onParseError:null,treeAdapter:rt},Ot="IN_TABLE_MODE",St={[mt.TR]:"IN_ROW_MODE",[mt.TBODY]:"IN_TABLE_BODY_MODE",[mt.THEAD]:"IN_TABLE_BODY_MODE",[mt.TFOOT]:"IN_TABLE_BODY_MODE",[mt.CAPTION]:"IN_CAPTION_MODE",[mt.COLGROUP]:"IN_COLUMN_GROUP_MODE",[mt.TABLE]:Ot,[mt.BODY]:"IN_BODY_MODE",[mt.FRAMESET]:"IN_FRAMESET_MODE"},Ct={[mt.CAPTION]:Ot,[mt.COLGROUP]:Ot,[mt.TBODY]:Ot,[mt.TFOOT]:Ot,[mt.THEAD]:Ot,[mt.COL]:"IN_COLUMN_GROUP_MODE",[mt.TR]:"IN_TABLE_BODY_MODE",[mt.TD]:"IN_ROW_MODE",[mt.TH]:"IN_ROW_MODE"},dt={INITIAL_MODE:{[Ge.CHARACTER_TOKEN]:Kt,[Ge.NULL_CHARACTER_TOKEN]:Kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:kt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:function(e,t){e._setDocumentType(t);const n=t.forceQuirks?be.DOCUMENT_MODE.QUIRKS:ct(t);ht(t)||e._err(ie);e.treeAdapter.setDocumentMode(e.document,n),e.insertionMode="BEFORE_HTML_MODE";},[Ge.START_TAG_TOKEN]:Kt,[Ge.END_TAG_TOKEN]:Kt,[Ge.EOF_TOKEN]:Kt},BEFORE_HTML_MODE:{[Ge.CHARACTER_TOKEN]:bt,[Ge.NULL_CHARACTER_TOKEN]:bt,[Ge.WHITESPACE_CHARACTER_TOKEN]:kt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){t.tagName===mt.HTML?(e._insertElement(t,pt.HTML),e.insertionMode="BEFORE_HEAD_MODE"):bt(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n!==mt.HTML&&n!==mt.HEAD&&n!==mt.BODY&&n!==mt.BR||bt(e,t);},[Ge.EOF_TOKEN]:bt},BEFORE_HEAD_MODE:{[Ge.CHARACTER_TOKEN]:Yt,[Ge.NULL_CHARACTER_TOKEN]:Yt,[Ge.WHITESPACE_CHARACTER_TOKEN]:kt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:Ht,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.HEAD?(e._insertElement(t,pt.HTML),e.headElement=e.openElements.current,e.insertionMode="IN_HEAD_MODE"):Yt(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HEAD||n===mt.BODY||n===mt.HTML||n===mt.BR?Yt(e,t):e._err(Ee);},[Ge.EOF_TOKEN]:Yt},IN_HEAD_MODE:{[Ge.CHARACTER_TOKEN]:vt,[Ge.NULL_CHARACTER_TOKEN]:vt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:Ht,[Ge.START_TAG_TOKEN]:xt,[Ge.END_TAG_TOKEN]:yt,[Ge.EOF_TOKEN]:vt},IN_HEAD_NO_SCRIPT_MODE:{[Ge.CHARACTER_TOKEN]:wt,[Ge.NULL_CHARACTER_TOKEN]:wt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:Ht,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.BASEFONT||n===mt.BGSOUND||n===mt.HEAD||n===mt.LINK||n===mt.META||n===mt.NOFRAMES||n===mt.STYLE?xt(e,t):n===mt.NOSCRIPT?e._err(le):wt(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.NOSCRIPT?(e.openElements.pop(),e.insertionMode="IN_HEAD_MODE"):n===mt.BR?wt(e,t):e._err(Ee);},[Ge.EOF_TOKEN]:wt},AFTER_HEAD_MODE:{[Ge.CHARACTER_TOKEN]:Qt,[Ge.NULL_CHARACTER_TOKEN]:Qt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:Ht,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.BODY?(e._insertElement(t,pt.HTML),e.framesetOk=!1,e.insertionMode="IN_BODY_MODE"):n===mt.FRAMESET?(e._insertElement(t,pt.HTML),e.insertionMode="IN_FRAMESET_MODE"):n===mt.BASE||n===mt.BASEFONT||n===mt.BGSOUND||n===mt.LINK||n===mt.META||n===mt.NOFRAMES||n===mt.SCRIPT||n===mt.STYLE||n===mt.TEMPLATE||n===mt.TITLE?(e._err(he),e.openElements.push(e.headElement),xt(e,t),e.openElements.remove(e.headElement)):n===mt.HEAD?e._err(ce):Qt(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.BODY||n===mt.HTML||n===mt.BR?Qt(e,t):n===mt.TEMPLATE?yt(e,t):e._err(Ee);},[Ge.EOF_TOKEN]:Qt},IN_BODY_MODE:{[Ge.CHARACTER_TOKEN]:Wt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Xt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:sn,[Ge.END_TAG_TOKEN]:En,[Ge.EOF_TOKEN]:an},TEXT_MODE:{[Ge.CHARACTER_TOKEN]:Bt,[Ge.NULL_CHARACTER_TOKEN]:Bt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:kt,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:kt,[Ge.END_TAG_TOKEN]:function(e,t){t.tagName===mt.SCRIPT&&(e.pendingScript=e.openElements.current);e.openElements.pop(),e.insertionMode=e.originalInsertionMode;},[Ge.EOF_TOKEN]:function(e,t){e._err(me),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e._processToken(t);}},[Ot]:{[Ge.CHARACTER_TOKEN]:_n,[Ge.NULL_CHARACTER_TOKEN]:_n,[Ge.WHITESPACE_CHARACTER_TOKEN]:_n,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:An,[Ge.END_TAG_TOKEN]:hn,[Ge.EOF_TOKEN]:an},IN_TABLE_TEXT_MODE:{[Ge.CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0;},[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t);},[Ge.COMMENT_TOKEN]:ln,[Ge.DOCTYPE_TOKEN]:ln,[Ge.START_TAG_TOKEN]:ln,[Ge.END_TAG_TOKEN]:ln,[Ge.EOF_TOKEN]:ln},IN_CAPTION_MODE:{[Ge.CHARACTER_TOKEN]:Wt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Xt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.CAPTION||n===mt.COL||n===mt.COLGROUP||n===mt.TBODY||n===mt.TD||n===mt.TFOOT||n===mt.TH||n===mt.THEAD||n===mt.TR?e.openElements.hasInTableScope(mt.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(mt.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Ot,e._processToken(t)):sn(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.CAPTION||n===mt.TABLE?e.openElements.hasInTableScope(mt.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(mt.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=Ot,n===mt.TABLE&&e._processToken(t)):n!==mt.BODY&&n!==mt.COL&&n!==mt.COLGROUP&&n!==mt.HTML&&n!==mt.TBODY&&n!==mt.TD&&n!==mt.TFOOT&&n!==mt.TH&&n!==mt.THEAD&&n!==mt.TR&&En(e,t);},[Ge.EOF_TOKEN]:an},IN_COLUMN_GROUP_MODE:{[Ge.CHARACTER_TOKEN]:mn,[Ge.NULL_CHARACTER_TOKEN]:mn,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.COL?(e._appendElement(t,pt.HTML),t.ackSelfClosing=!0):n===mt.TEMPLATE?xt(e,t):mn(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.COLGROUP?e.openElements.currentTagName===mt.COLGROUP&&(e.openElements.pop(),e.insertionMode=Ot):n===mt.TEMPLATE?yt(e,t):n!==mt.COL&&mn(e,t);},[Ge.EOF_TOKEN]:an},IN_TABLE_BODY_MODE:{[Ge.CHARACTER_TOKEN]:_n,[Ge.NULL_CHARACTER_TOKEN]:_n,[Ge.WHITESPACE_CHARACTER_TOKEN]:_n,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.TR?(e.openElements.clearBackToTableBodyContext(),e._insertElement(t,pt.HTML),e.insertionMode="IN_ROW_MODE"):n===mt.TH||n===mt.TD?(e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(mt.TR),e.insertionMode="IN_ROW_MODE",e._processToken(t)):n===mt.CAPTION||n===mt.COL||n===mt.COLGROUP||n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Ot,e._processToken(t)):An(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD?e.openElements.hasInTableScope(n)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Ot):n===mt.TABLE?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=Ot,e._processToken(t)):(n!==mt.BODY&&n!==mt.CAPTION&&n!==mt.COL&&n!==mt.COLGROUP||n!==mt.HTML&&n!==mt.TD&&n!==mt.TH&&n!==mt.TR)&&hn(e,t);},[Ge.EOF_TOKEN]:an},IN_ROW_MODE:{[Ge.CHARACTER_TOKEN]:_n,[Ge.NULL_CHARACTER_TOKEN]:_n,[Ge.WHITESPACE_CHARACTER_TOKEN]:_n,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.TH||n===mt.TD?(e.openElements.clearBackToTableRowContext(),e._insertElement(t,pt.HTML),e.insertionMode="IN_CELL_MODE",e.activeFormattingElements.insertMarker()):n===mt.CAPTION||n===mt.COL||n===mt.COLGROUP||n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD||n===mt.TR?e.openElements.hasInTableScope(mt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode="IN_TABLE_BODY_MODE",e._processToken(t)):An(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.TR?e.openElements.hasInTableScope(mt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode="IN_TABLE_BODY_MODE"):n===mt.TABLE?e.openElements.hasInTableScope(mt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode="IN_TABLE_BODY_MODE",e._processToken(t)):n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD?(e.openElements.hasInTableScope(n)||e.openElements.hasInTableScope(mt.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode="IN_TABLE_BODY_MODE",e._processToken(t)):(n!==mt.BODY&&n!==mt.CAPTION&&n!==mt.COL&&n!==mt.COLGROUP||n!==mt.HTML&&n!==mt.TD&&n!==mt.TH)&&hn(e,t);},[Ge.EOF_TOKEN]:an},IN_CELL_MODE:{[Ge.CHARACTER_TOKEN]:Wt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Xt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.CAPTION||n===mt.COL||n===mt.COLGROUP||n===mt.TBODY||n===mt.TD||n===mt.TFOOT||n===mt.TH||n===mt.THEAD||n===mt.TR?(e.openElements.hasInTableScope(mt.TD)||e.openElements.hasInTableScope(mt.TH))&&(e._closeTableCell(),e._processToken(t)):sn(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.TD||n===mt.TH?e.openElements.hasInTableScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker(),e.insertionMode="IN_ROW_MODE"):n===mt.TABLE||n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD||n===mt.TR?e.openElements.hasInTableScope(n)&&(e._closeTableCell(),e._processToken(t)):n!==mt.BODY&&n!==mt.CAPTION&&n!==mt.COL&&n!==mt.COLGROUP&&n!==mt.HTML&&En(e,t);},[Ge.EOF_TOKEN]:an},IN_SELECT_MODE:{[Ge.CHARACTER_TOKEN]:Bt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:pn,[Ge.END_TAG_TOKEN]:Nn,[Ge.EOF_TOKEN]:an},IN_SELECT_IN_TABLE_MODE:{[Ge.CHARACTER_TOKEN]:Bt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.CAPTION||n===mt.TABLE||n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD||n===mt.TR||n===mt.TD||n===mt.TH?(e.openElements.popUntilTagNamePopped(mt.SELECT),e._resetInsertionMode(),e._processToken(t)):pn(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.CAPTION||n===mt.TABLE||n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD||n===mt.TR||n===mt.TD||n===mt.TH?e.openElements.hasInTableScope(n)&&(e.openElements.popUntilTagNamePopped(mt.SELECT),e._resetInsertionMode(),e._processToken(t)):Nn(e,t);},[Ge.EOF_TOKEN]:an},IN_TEMPLATE_MODE:{[Ge.CHARACTER_TOKEN]:Wt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Xt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;if(n===mt.BASE||n===mt.BASEFONT||n===mt.BGSOUND||n===mt.LINK||n===mt.META||n===mt.NOFRAMES||n===mt.SCRIPT||n===mt.STYLE||n===mt.TEMPLATE||n===mt.TITLE)xt(e,t);else{const s=Ct[n]||"IN_BODY_MODE";e._popTmplInsertionMode(),e._pushTmplInsertionMode(s),e.insertionMode=s,e._processToken(t);}},[Ge.END_TAG_TOKEN]:function(e,t){t.tagName===mt.TEMPLATE&&yt(e,t);},[Ge.EOF_TOKEN]:un},AFTER_BODY_MODE:{[Ge.CHARACTER_TOKEN]:On,[Ge.NULL_CHARACTER_TOKEN]:On,[Ge.WHITESPACE_CHARACTER_TOKEN]:Xt,[Ge.COMMENT_TOKEN]:function(e,t){e._appendCommentNode(t,e.openElements.items[0]);},[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){t.tagName===mt.HTML?sn(e,t):On(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){t.tagName===mt.HTML?e.fragmentContext||(e.insertionMode="AFTER_AFTER_BODY_MODE"):On(e,t);},[Ge.EOF_TOKEN]:Gt},IN_FRAMESET_MODE:{[Ge.CHARACTER_TOKEN]:kt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.FRAMESET?e._insertElement(t,pt.HTML):n===mt.FRAME?(e._appendElement(t,pt.HTML),t.ackSelfClosing=!0):n===mt.NOFRAMES&&xt(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){t.tagName!==mt.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagName===mt.FRAMESET||(e.insertionMode="AFTER_FRAMESET_MODE"));},[Ge.EOF_TOKEN]:Gt},AFTER_FRAMESET_MODE:{[Ge.CHARACTER_TOKEN]:kt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Bt,[Ge.COMMENT_TOKEN]:Ut,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.NOFRAMES&&xt(e,t);},[Ge.END_TAG_TOKEN]:function(e,t){t.tagName===mt.HTML&&(e.insertionMode="AFTER_AFTER_FRAMESET_MODE");},[Ge.EOF_TOKEN]:Gt},AFTER_AFTER_BODY_MODE:{[Ge.CHARACTER_TOKEN]:Sn,[Ge.NULL_CHARACTER_TOKEN]:Sn,[Ge.WHITESPACE_CHARACTER_TOKEN]:Xt,[Ge.COMMENT_TOKEN]:Ft,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){t.tagName===mt.HTML?sn(e,t):Sn(e,t);},[Ge.END_TAG_TOKEN]:Sn,[Ge.EOF_TOKEN]:Gt},AFTER_AFTER_FRAMESET_MODE:{[Ge.CHARACTER_TOKEN]:kt,[Ge.NULL_CHARACTER_TOKEN]:kt,[Ge.WHITESPACE_CHARACTER_TOKEN]:Xt,[Ge.COMMENT_TOKEN]:Ft,[Ge.DOCTYPE_TOKEN]:kt,[Ge.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.NOFRAMES&&xt(e,t);},[Ge.END_TAG_TOKEN]:kt,[Ge.EOF_TOKEN]:Gt}};var Rt=class{constructor(e){this.options=function(e,t){return [e,t=t||Object.create(null)].reduce((e,t)=>(Object.keys(t).forEach(n=>{e[n]=t[n];}),e),Object.create(null))}(ut,e),this.treeAdapter=this.options.treeAdapter,this.pendingScript=null,this.options.sourceCodeLocationInfo&&je.install(this,$e),this.options.onParseError&&je.install(this,st,{onParseError:this.options.onParseError});}parse(e){const t=this.treeAdapter.createDocument();return this._bootstrap(t,null),this.tokenizer.write(e,!0),this._runParsingLoop(null),t}parseFragment(e,t){t||(t=this.treeAdapter.createElement(mt.TEMPLATE,pt.HTML,[]));const n=this.treeAdapter.createElement("documentmock",pt.HTML,[]);this._bootstrap(n,t),this.treeAdapter.getTagName(t)===mt.TEMPLATE&&this._pushTmplInsertionMode("IN_TEMPLATE_MODE"),this._initTokenizerForFragmentParsing(),this._insertFakeRootElement(),this._resetInsertionMode(),this._findFormInFragmentContext(),this.tokenizer.write(e,!0),this._runParsingLoop(null);const s=this.treeAdapter.getFirstChild(n),r=this.treeAdapter.createDocumentFragment();return this._adoptNodes(s,r),r}_bootstrap(e,t){this.tokenizer=new Ge(this.options),this.stopped=!1,this.insertionMode="INITIAL_MODE",this.originalInsertionMode="",this.document=e,this.fragmentContext=t,this.headElement=null,this.formElement=null,this.openElements=new Qe(this.document,this.treeAdapter),this.activeFormattingElements=new We(this.treeAdapter),this.tmplInsertionModeStack=[],this.tmplInsertionModeStackTop=-1,this.currentTmplInsertionMode=null,this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1;}_err(){}_runParsingLoop(e){for(;!this.stopped;){this._setupTokenizerCDATAMode();const t=this.tokenizer.getNextToken();if(t.type===Ge.HIBERNATION_TOKEN)break;if(this.skipNextNewLine&&(this.skipNextNewLine=!1,t.type===Ge.WHITESPACE_CHARACTER_TOKEN&&"\n"===t.chars[0])){if(1===t.chars.length)continue;t.chars=t.chars.substr(1);}if(this._processInputToken(t),e&&this.pendingScript)break}}runParsingLoopForCurrentChunk(e,t){if(this._runParsingLoop(t),t&&this.pendingScript){const e=this.pendingScript;return this.pendingScript=null,void t(e)}e&&e();}_setupTokenizerCDATAMode(){const e=this._getAdjustedCurrentElement();this.tokenizer.allowCDATA=e&&e!==this.document&&this.treeAdapter.getNamespaceURI(e)!==pt.HTML&&!this._isIntegrationPoint(e);}_switchToTextParsing(e,t){this._insertElement(e,pt.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode="TEXT_MODE";}switchToPlaintextParsing(){this.insertionMode="TEXT_MODE",this.originalInsertionMode="IN_BODY_MODE",this.tokenizer.state=Ge.MODE.PLAINTEXT;}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;do{if(this.treeAdapter.getTagName(e)===mt.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e);}while(e)}_initTokenizerForFragmentParsing(){if(this.treeAdapter.getNamespaceURI(this.fragmentContext)===pt.HTML){const e=this.treeAdapter.getTagName(this.fragmentContext);e===mt.TITLE||e===mt.TEXTAREA?this.tokenizer.state=Ge.MODE.RCDATA:e===mt.STYLE||e===mt.XMP||e===mt.IFRAME||e===mt.NOEMBED||e===mt.NOFRAMES||e===mt.NOSCRIPT?this.tokenizer.state=Ge.MODE.RAWTEXT:e===mt.SCRIPT?this.tokenizer.state=Ge.MODE.SCRIPT_DATA:e===mt.PLAINTEXT&&(this.tokenizer.state=Ge.MODE.PLAINTEXT);}}_setDocumentType(e){const t=e.name||"",n=e.publicId||"",s=e.systemId||"";this.treeAdapter.setDocumentType(this.document,t,n,s);}_attachElementToTree(e){if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else{const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.appendChild(t,e);}}_appendElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n);}_insertElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n),this.openElements.push(n);}_insertFakeElement(e){const t=this.treeAdapter.createElement(e,pt.HTML,[]);this._attachElementToTree(t),this.openElements.push(t);}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,pt.HTML,e.attrs),n=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,n),this._attachElementToTree(t),this.openElements.push(t);}_insertFakeRootElement(){const e=this.treeAdapter.createElement(mt.HTML,pt.HTML,[]);this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e);}_appendCommentNode(e,t){const n=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,n);}_insertCharacters(e){if(this._shouldFosterParentOnInsertion())this._fosterParentText(e.chars);else{const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.insertText(t,e.chars);}}_adoptNodes(e,t){for(let n=this.treeAdapter.getFirstChild(e);n;n=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(n),this.treeAdapter.appendChild(t,n);}_shouldProcessTokenInForeignContent(e){const t=this._getAdjustedCurrentElement();if(!t||t===this.document)return !1;const n=this.treeAdapter.getNamespaceURI(t);if(n===pt.HTML)return !1;if(this.treeAdapter.getTagName(t)===mt.ANNOTATION_XML&&n===pt.MATHML&&e.type===Ge.START_TAG_TOKEN&&e.tagName===mt.SVG)return !1;const s=e.type===Ge.CHARACTER_TOKEN||e.type===Ge.NULL_CHARACTER_TOKEN||e.type===Ge.WHITESPACE_CHARACTER_TOKEN;return (!(e.type===Ge.START_TAG_TOKEN&&e.tagName!==mt.MGLYPH&&e.tagName!==mt.MALIGNMARK)&&!s||!this._isIntegrationPoint(t,pt.MATHML))&&((e.type!==Ge.START_TAG_TOKEN&&!s||!this._isIntegrationPoint(t,pt.HTML))&&e.type!==Ge.EOF_TOKEN)}_processToken(e){dt[this.insertionMode][e.type](this,e);}_processTokenInBodyMode(e){dt.IN_BODY_MODE[e.type](this,e);}_processTokenInForeignContent(e){e.type===Ge.CHARACTER_TOKEN?function(e,t){e._insertCharacters(t),e.framesetOk=!1;}(this,e):e.type===Ge.NULL_CHARACTER_TOKEN?function(e,t){t.chars=n,e._insertCharacters(t);}(this,e):e.type===Ge.WHITESPACE_CHARACTER_TOKEN?Bt(this,e):e.type===Ge.COMMENT_TOKEN?Ut(this,e):e.type===Ge.START_TAG_TOKEN?function(e,t){if(lt.causesExit(t)&&!e.fragmentContext){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==pt.HTML&&!e._isIntegrationPoint(e.openElements.current);)e.openElements.pop();e._processToken(t);}else{const n=e._getAdjustedCurrentElement(),s=e.treeAdapter.getNamespaceURI(n);s===pt.MATHML?lt.adjustTokenMathMLAttrs(t):s===pt.SVG&&(lt.adjustTokenSVGTagName(t),lt.adjustTokenSVGAttrs(t)),lt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,s):e._insertElement(t,s),t.ackSelfClosing=!0;}}(this,e):e.type===Ge.END_TAG_TOKEN&&function(e,t){for(let n=e.openElements.stackTop;n>0;n--){const s=e.openElements.items[n];if(e.treeAdapter.getNamespaceURI(s)===pt.HTML){e._processToken(t);break}if(e.treeAdapter.getTagName(s).toLowerCase()===t.tagName){e.openElements.popUntilElementPopped(s);break}}}(this,e);}_processInputToken(e){this._shouldProcessTokenInForeignContent(e)?this._processTokenInForeignContent(e):this._processToken(e),e.type===Ge.START_TAG_TOKEN&&e.selfClosing&&!e.ackSelfClosing&&this._err(c);}_isIntegrationPoint(e,t){const n=this.treeAdapter.getTagName(e),s=this.treeAdapter.getNamespaceURI(e),r=this.treeAdapter.getAttrList(e);return lt.isIntegrationPoint(n,s,r,t)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.length;if(e){let t=e,n=null;do{if(t--,n=this.activeFormattingElements.entries[t],n.type===We.MARKER_ENTRY||this.openElements.contains(n.element)){t++;break}}while(t>0);for(let s=t;s<e;s++)n=this.activeFormattingElements.entries[s],this._insertElement(n.token,this.treeAdapter.getNamespaceURI(n.element)),n.element=this.openElements.current;}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode="IN_ROW_MODE";}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(mt.P),this.openElements.popUntilTagNamePopped(mt.P);}_resetInsertionMode(){for(let e=this.openElements.stackTop,t=!1;e>=0;e--){let n=this.openElements.items[e];0===e&&(t=!0,this.fragmentContext&&(n=this.fragmentContext));const s=this.treeAdapter.getTagName(n),r=St[s];if(r){this.insertionMode=r;break}if(!(t||s!==mt.TD&&s!==mt.TH)){this.insertionMode="IN_CELL_MODE";break}if(!t&&s===mt.HEAD){this.insertionMode="IN_HEAD_MODE";break}if(s===mt.SELECT){this._resetInsertionModeForSelect(e);break}if(s===mt.TEMPLATE){this.insertionMode=this.currentTmplInsertionMode;break}if(s===mt.HTML){this.insertionMode=this.headElement?"AFTER_HEAD_MODE":"BEFORE_HEAD_MODE";break}if(t){this.insertionMode="IN_BODY_MODE";break}}}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.items[t],n=this.treeAdapter.getTagName(e);if(n===mt.TEMPLATE)break;if(n===mt.TABLE)return void(this.insertionMode="IN_SELECT_IN_TABLE_MODE")}this.insertionMode="IN_SELECT_MODE";}_pushTmplInsertionMode(e){this.tmplInsertionModeStack.push(e),this.tmplInsertionModeStackTop++,this.currentTmplInsertionMode=e;}_popTmplInsertionMode(){this.tmplInsertionModeStack.pop(),this.tmplInsertionModeStackTop--,this.currentTmplInsertionMode=this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];}_isElementCausesFosterParenting(e){const t=this.treeAdapter.getTagName(e);return t===mt.TABLE||t===mt.TBODY||t===mt.TFOOT||t===mt.THEAD||t===mt.TR}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.current)}_findFosterParentingLocation(){const e={parent:null,beforeElement:null};for(let t=this.openElements.stackTop;t>=0;t--){const n=this.openElements.items[t],s=this.treeAdapter.getTagName(n),r=this.treeAdapter.getNamespaceURI(n);if(s===mt.TEMPLATE&&r===pt.HTML){e.parent=this.treeAdapter.getTemplateContent(n);break}if(s===mt.TABLE){e.parent=this.treeAdapter.getParentNode(n),e.parent?e.beforeElement=n:e.parent=this.openElements.items[t-1];break}}return e.parent||(e.parent=this.openElements.items[0]),e}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e);}_fosterParentText(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertTextBefore(t.parent,e,t.beforeElement):this.treeAdapter.insertText(t.parent,e);}_isSpecialElement(e){const t=this.treeAdapter.getTagName(e),n=this.treeAdapter.getNamespaceURI(e);return be.SPECIAL_ELEMENTS[n][t]}};function It(e,t){let n=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return n?e.openElements.contains(n.element)?e.openElements.hasInScope(t.tagName)||(n=null):(e.activeFormattingElements.removeEntry(n),n=null):on(e,t),n}function ft(e,t){let n=null;for(let s=e.openElements.stackTop;s>=0;s--){const r=e.openElements.items[s];if(r===t.element)break;e._isSpecialElement(r)&&(n=r);}return n||(e.openElements.popUntilElementPopped(t.element),e.activeFormattingElements.removeEntry(t)),n}function Mt(e,t,n){let s=t,r=e.openElements.getCommonAncestor(t);for(let i=0,T=r;T!==n;i++,T=r){r=e.openElements.getCommonAncestor(T);const n=e.activeFormattingElements.getElementEntry(T),o=n&&i>=3;!n||o?(o&&e.activeFormattingElements.removeEntry(n),e.openElements.remove(T)):(T=Lt(e,n),s===t&&(e.activeFormattingElements.bookmark=n),e.treeAdapter.detachNode(s),e.treeAdapter.appendChild(T,s),s=T);}return s}function Lt(e,t){const n=e.treeAdapter.getNamespaceURI(t.element),s=e.treeAdapter.createElement(t.token.tagName,n,t.token.attrs);return e.openElements.replace(t.element,s),t.element=s,s}function Dt(e,t,n){if(e._isElementCausesFosterParenting(t))e._fosterParentElement(n);else{const s=e.treeAdapter.getTagName(t),r=e.treeAdapter.getNamespaceURI(t);s===mt.TEMPLATE&&r===pt.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,n);}}function gt(e,t,n){const s=e.treeAdapter.getNamespaceURI(n.element),r=n.token,i=e.treeAdapter.createElement(r.tagName,s,r.attrs);e._adoptNodes(t,i),e.treeAdapter.appendChild(t,i),e.activeFormattingElements.insertElementAfterBookmark(i,n.token),e.activeFormattingElements.removeEntry(n),e.openElements.remove(n.element),e.openElements.insertAfter(t,i);}function Pt(e,t){let n;for(let s=0;s<8&&(n=It(e,t),n);s++){const t=ft(e,n);if(!t)break;e.activeFormattingElements.bookmark=n;const s=Mt(e,t,n.element),r=e.openElements.getCommonAncestor(n.element);e.treeAdapter.detachNode(s),Dt(e,r,s),gt(e,t,n);}}function kt(){}function Ht(e){e._err(oe);}function Ut(e,t){e._appendCommentNode(t,e.openElements.currentTmplContent||e.openElements.current);}function Ft(e,t){e._appendCommentNode(t,e.document);}function Bt(e,t){e._insertCharacters(t);}function Gt(e){e.stopped=!0;}function Kt(e,t){e._err(Te,{beforeToken:!0}),e.treeAdapter.setDocumentMode(e.document,be.DOCUMENT_MODE.QUIRKS),e.insertionMode="BEFORE_HTML_MODE",e._processToken(t);}function bt(e,t){e._insertFakeRootElement(),e.insertionMode="BEFORE_HEAD_MODE",e._processToken(t);}function Yt(e,t){e._insertFakeElement(mt.HEAD),e.headElement=e.openElements.current,e.insertionMode="IN_HEAD_MODE",e._processToken(t);}function xt(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.BASE||n===mt.BASEFONT||n===mt.BGSOUND||n===mt.LINK||n===mt.META?(e._appendElement(t,pt.HTML),t.ackSelfClosing=!0):n===mt.TITLE?e._switchToTextParsing(t,Ge.MODE.RCDATA):n===mt.NOSCRIPT?e.options.scriptingEnabled?e._switchToTextParsing(t,Ge.MODE.RAWTEXT):(e._insertElement(t,pt.HTML),e.insertionMode="IN_HEAD_NO_SCRIPT_MODE"):n===mt.NOFRAMES||n===mt.STYLE?e._switchToTextParsing(t,Ge.MODE.RAWTEXT):n===mt.SCRIPT?e._switchToTextParsing(t,Ge.MODE.SCRIPT_DATA):n===mt.TEMPLATE?(e._insertTemplate(t,pt.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode="IN_TEMPLATE_MODE",e._pushTmplInsertionMode("IN_TEMPLATE_MODE")):n===mt.HEAD?e._err(ce):vt(e,t);}function yt(e,t){const n=t.tagName;n===mt.HEAD?(e.openElements.pop(),e.insertionMode="AFTER_HEAD_MODE"):n===mt.BODY||n===mt.BR||n===mt.HTML?vt(e,t):n===mt.TEMPLATE&&e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagName!==mt.TEMPLATE&&e._err(ae),e.openElements.popUntilTagNamePopped(mt.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode()):e._err(Ee);}function vt(e,t){e.openElements.pop(),e.insertionMode="AFTER_HEAD_MODE",e._processToken(t);}function wt(e,t){const n=t.type===Ge.EOF_TOKEN?Ae:_e;e._err(n),e.openElements.pop(),e.insertionMode="IN_HEAD_MODE",e._processToken(t);}function Qt(e,t){e._insertFakeElement(mt.BODY),e.insertionMode="IN_BODY_MODE",e._processToken(t);}function Xt(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t);}function Wt(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1;}function Vt(e,t){e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._insertElement(t,pt.HTML);}function jt(e,t){e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._insertElement(t,pt.HTML),e.skipNextNewLine=!0,e.framesetOk=!1;}function zt(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,pt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}function qt(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,pt.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1;}function Jt(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,pt.HTML),e.framesetOk=!1,t.ackSelfClosing=!0;}function Zt(e,t){e._appendElement(t,pt.HTML),t.ackSelfClosing=!0;}function $t(e,t){e._switchToTextParsing(t,Ge.MODE.RAWTEXT);}function en(e,t){e.openElements.currentTagName===mt.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,pt.HTML);}function tn(e,t){e.openElements.hasInScope(mt.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,pt.HTML);}function nn(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,pt.HTML);}function sn(e,t){const n=t.tagName;switch(n.length){case 1:n===mt.I||n===mt.S||n===mt.B||n===mt.U?zt(e,t):n===mt.P?Vt(e,t):n===mt.A?function(e,t){const n=e.activeFormattingElements.getElementEntryInScopeWithTagName(mt.A);n&&(Pt(e,t),e.openElements.remove(n.element),e.activeFormattingElements.removeEntry(n)),e._reconstructActiveFormattingElements(),e._insertElement(t,pt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t):nn(e,t);break;case 2:n===mt.DL||n===mt.OL||n===mt.UL?Vt(e,t):n===mt.H1||n===mt.H2||n===mt.H3||n===mt.H4||n===mt.H5||n===mt.H6?function(e,t){e.openElements.hasInButtonScope(mt.P)&&e._closePElement();const n=e.openElements.currentTagName;n!==mt.H1&&n!==mt.H2&&n!==mt.H3&&n!==mt.H4&&n!==mt.H5&&n!==mt.H6||e.openElements.pop(),e._insertElement(t,pt.HTML);}(e,t):n===mt.LI||n===mt.DD||n===mt.DT?function(e,t){e.framesetOk=!1;const n=t.tagName;for(let t=e.openElements.stackTop;t>=0;t--){const s=e.openElements.items[t],r=e.treeAdapter.getTagName(s);let i=null;if(n===mt.LI&&r===mt.LI?i=mt.LI:n!==mt.DD&&n!==mt.DT||r!==mt.DD&&r!==mt.DT||(i=r),i){e.openElements.generateImpliedEndTagsWithExclusion(i),e.openElements.popUntilTagNamePopped(i);break}if(r!==mt.ADDRESS&&r!==mt.DIV&&r!==mt.P&&e._isSpecialElement(s))break}e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._insertElement(t,pt.HTML);}(e,t):n===mt.EM||n===mt.TT?zt(e,t):n===mt.BR?Jt(e,t):n===mt.HR?function(e,t){e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._appendElement(t,pt.HTML),e.framesetOk=!1,e.ackSelfClosing=!0;}(e,t):n===mt.RB?tn(e,t):n===mt.RT||n===mt.RP?function(e,t){e.openElements.hasInScope(mt.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(mt.RTC),e._insertElement(t,pt.HTML);}(e,t):n!==mt.TH&&n!==mt.TD&&n!==mt.TR&&nn(e,t);break;case 3:n===mt.DIV||n===mt.DIR||n===mt.NAV?Vt(e,t):n===mt.PRE?jt(e,t):n===mt.BIG?zt(e,t):n===mt.IMG||n===mt.WBR?Jt(e,t):n===mt.XMP?function(e,t){e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,Ge.MODE.RAWTEXT);}(e,t):n===mt.SVG?function(e,t){e._reconstructActiveFormattingElements(),lt.adjustTokenSVGAttrs(t),lt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,pt.SVG):e._insertElement(t,pt.SVG),t.ackSelfClosing=!0;}(e,t):n===mt.RTC?tn(e,t):n!==mt.COL&&nn(e,t);break;case 4:n===mt.HTML?function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs);}(e,t):n===mt.BASE||n===mt.LINK||n===mt.META?xt(e,t):n===mt.BODY?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(n,t.attrs));}(e,t):n===mt.MAIN||n===mt.MENU?Vt(e,t):n===mt.FORM?function(e,t){const n=e.openElements.tmplCount>0;e.formElement&&!n||(e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._insertElement(t,pt.HTML),n||(e.formElement=e.openElements.current));}(e,t):n===mt.CODE||n===mt.FONT?zt(e,t):n===mt.NOBR?function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(mt.NOBR)&&(Pt(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,pt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t):n===mt.AREA?Jt(e,t):n===mt.MATH?function(e,t){e._reconstructActiveFormattingElements(),lt.adjustTokenMathMLAttrs(t),lt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,pt.MATHML):e._insertElement(t,pt.MATHML),t.ackSelfClosing=!0;}(e,t):n===mt.MENU?function(e,t){e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._insertElement(t,pt.HTML);}(e,t):n!==mt.HEAD&&nn(e,t);break;case 5:n===mt.STYLE||n===mt.TITLE?xt(e,t):n===mt.ASIDE?Vt(e,t):n===mt.SMALL?zt(e,t):n===mt.TABLE?function(e,t){e.treeAdapter.getDocumentMode(e.document)!==be.DOCUMENT_MODE.QUIRKS&&e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._insertElement(t,pt.HTML),e.framesetOk=!1,e.insertionMode=Ot;}(e,t):n===mt.EMBED?Jt(e,t):n===mt.INPUT?function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,pt.HTML);const n=Ge.getTokenAttr(t,Nt.TYPE);n&&"hidden"===n.toLowerCase()||(e.framesetOk=!1),t.ackSelfClosing=!0;}(e,t):n===mt.PARAM||n===mt.TRACK?Zt(e,t):n===mt.IMAGE?function(e,t){t.tagName=mt.IMG,Jt(e,t);}(e,t):n!==mt.FRAME&&n!==mt.TBODY&&n!==mt.TFOOT&&n!==mt.THEAD&&nn(e,t);break;case 6:n===mt.SCRIPT?xt(e,t):n===mt.CENTER||n===mt.FIGURE||n===mt.FOOTER||n===mt.HEADER||n===mt.HGROUP||n===mt.DIALOG?Vt(e,t):n===mt.BUTTON?function(e,t){e.openElements.hasInScope(mt.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(mt.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,pt.HTML),e.framesetOk=!1;}(e,t):n===mt.STRIKE||n===mt.STRONG?zt(e,t):n===mt.APPLET||n===mt.OBJECT?qt(e,t):n===mt.KEYGEN?Jt(e,t):n===mt.SOURCE?Zt(e,t):n===mt.IFRAME?function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,Ge.MODE.RAWTEXT);}(e,t):n===mt.SELECT?function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,pt.HTML),e.framesetOk=!1,e.insertionMode===Ot||"IN_CAPTION_MODE"===e.insertionMode||"IN_TABLE_BODY_MODE"===e.insertionMode||"IN_ROW_MODE"===e.insertionMode||"IN_CELL_MODE"===e.insertionMode?e.insertionMode="IN_SELECT_IN_TABLE_MODE":e.insertionMode="IN_SELECT_MODE";}(e,t):n===mt.OPTION?en(e,t):nn(e,t);break;case 7:n===mt.BGSOUND?xt(e,t):n===mt.DETAILS||n===mt.ADDRESS||n===mt.ARTICLE||n===mt.SECTION||n===mt.SUMMARY?Vt(e,t):n===mt.LISTING?jt(e,t):n===mt.MARQUEE?qt(e,t):n===mt.NOEMBED?$t(e,t):n!==mt.CAPTION&&nn(e,t);break;case 8:n===mt.BASEFONT?xt(e,t):n===mt.FRAMESET?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&n&&(e.treeAdapter.detachNode(n),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,pt.HTML),e.insertionMode="IN_FRAMESET_MODE");}(e,t):n===mt.FIELDSET?Vt(e,t):n===mt.TEXTAREA?function(e,t){e._insertElement(t,pt.HTML),e.skipNextNewLine=!0,e.tokenizer.state=Ge.MODE.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode="TEXT_MODE";}(e,t):n===mt.TEMPLATE?xt(e,t):n===mt.NOSCRIPT?e.options.scriptingEnabled?$t(e,t):nn(e,t):n===mt.OPTGROUP?en(e,t):n!==mt.COLGROUP&&nn(e,t);break;case 9:n===mt.PLAINTEXT?function(e,t){e.openElements.hasInButtonScope(mt.P)&&e._closePElement(),e._insertElement(t,pt.HTML),e.tokenizer.state=Ge.MODE.PLAINTEXT;}(e,t):nn(e,t);break;case 10:n===mt.BLOCKQUOTE||n===mt.FIGCAPTION?Vt(e,t):nn(e,t);break;default:nn(e,t);}}function rn(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n));}function Tn(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker());}function on(e,t){const n=t.tagName;for(let t=e.openElements.stackTop;t>0;t--){const s=e.openElements.items[t];if(e.treeAdapter.getTagName(s)===n){e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilElementPopped(s);break}if(e._isSpecialElement(s))break}}function En(e,t){const n=t.tagName;switch(n.length){case 1:n===mt.A||n===mt.B||n===mt.I||n===mt.S||n===mt.U?Pt(e,t):n===mt.P?function(e){e.openElements.hasInButtonScope(mt.P)||e._insertFakeElement(mt.P),e._closePElement();}(e):on(e,t);break;case 2:n===mt.DL||n===mt.UL||n===mt.OL?rn(e,t):n===mt.LI?function(e){e.openElements.hasInListItemScope(mt.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(mt.LI),e.openElements.popUntilTagNamePopped(mt.LI));}(e):n===mt.DD||n===mt.DT?function(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n));}(e,t):n===mt.H1||n===mt.H2||n===mt.H3||n===mt.H4||n===mt.H5||n===mt.H6?function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped());}(e):n===mt.BR?function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(mt.BR),e.openElements.pop(),e.framesetOk=!1;}(e):n===mt.EM||n===mt.TT?Pt(e,t):on(e,t);break;case 3:n===mt.BIG?Pt(e,t):n===mt.DIR||n===mt.DIV||n===mt.NAV||n===mt.PRE?rn(e,t):on(e,t);break;case 4:n===mt.BODY?function(e){e.openElements.hasInScope(mt.BODY)&&(e.insertionMode="AFTER_BODY_MODE");}(e):n===mt.HTML?function(e,t){e.openElements.hasInScope(mt.BODY)&&(e.insertionMode="AFTER_BODY_MODE",e._processToken(t));}(e,t):n===mt.FORM?function(e){const t=e.openElements.tmplCount>0,n=e.formElement;t||(e.formElement=null),(n||t)&&e.openElements.hasInScope(mt.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(mt.FORM):e.openElements.remove(n));}(e):n===mt.CODE||n===mt.FONT||n===mt.NOBR?Pt(e,t):n===mt.MAIN||n===mt.MENU?rn(e,t):on(e,t);break;case 5:n===mt.ASIDE?rn(e,t):n===mt.SMALL?Pt(e,t):on(e,t);break;case 6:n===mt.CENTER||n===mt.FIGURE||n===mt.FOOTER||n===mt.HEADER||n===mt.HGROUP||n===mt.DIALOG?rn(e,t):n===mt.APPLET||n===mt.OBJECT?Tn(e,t):n===mt.STRIKE||n===mt.STRONG?Pt(e,t):on(e,t);break;case 7:n===mt.ADDRESS||n===mt.ARTICLE||n===mt.DETAILS||n===mt.SECTION||n===mt.SUMMARY||n===mt.LISTING?rn(e,t):n===mt.MARQUEE?Tn(e,t):on(e,t);break;case 8:n===mt.FIELDSET?rn(e,t):n===mt.TEMPLATE?yt(e,t):on(e,t);break;case 10:n===mt.BLOCKQUOTE||n===mt.FIGCAPTION?rn(e,t):on(e,t);break;default:on(e,t);}}function an(e,t){e.tmplInsertionModeStackTop>-1?un(e,t):e.stopped=!0;}function _n(e,t){const n=e.openElements.currentTagName;n===mt.TABLE||n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD||n===mt.TR?(e.pendingCharacterTokens=[],e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode="IN_TABLE_TEXT_MODE",e._processToken(t)):cn(e,t);}function An(e,t){const n=t.tagName;switch(n.length){case 2:n===mt.TD||n===mt.TH||n===mt.TR?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(mt.TBODY),e.insertionMode="IN_TABLE_BODY_MODE",e._processToken(t);}(e,t):cn(e,t);break;case 3:n===mt.COL?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(mt.COLGROUP),e.insertionMode="IN_COLUMN_GROUP_MODE",e._processToken(t);}(e,t):cn(e,t);break;case 4:n===mt.FORM?function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,pt.HTML),e.formElement=e.openElements.current,e.openElements.pop());}(e,t):cn(e,t);break;case 5:n===mt.TABLE?function(e,t){e.openElements.hasInTableScope(mt.TABLE)&&(e.openElements.popUntilTagNamePopped(mt.TABLE),e._resetInsertionMode(),e._processToken(t));}(e,t):n===mt.STYLE?xt(e,t):n===mt.TBODY||n===mt.TFOOT||n===mt.THEAD?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,pt.HTML),e.insertionMode="IN_TABLE_BODY_MODE";}(e,t):n===mt.INPUT?function(e,t){const n=Ge.getTokenAttr(t,Nt.TYPE);n&&"hidden"===n.toLowerCase()?e._appendElement(t,pt.HTML):cn(e,t),t.ackSelfClosing=!0;}(e,t):cn(e,t);break;case 6:n===mt.SCRIPT?xt(e,t):cn(e,t);break;case 7:n===mt.CAPTION?function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,pt.HTML),e.insertionMode="IN_CAPTION_MODE";}(e,t):cn(e,t);break;case 8:n===mt.COLGROUP?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,pt.HTML),e.insertionMode="IN_COLUMN_GROUP_MODE";}(e,t):n===mt.TEMPLATE?xt(e,t):cn(e,t);break;default:cn(e,t);}}function hn(e,t){const n=t.tagName;n===mt.TABLE?e.openElements.hasInTableScope(mt.TABLE)&&(e.openElements.popUntilTagNamePopped(mt.TABLE),e._resetInsertionMode()):n===mt.TEMPLATE?yt(e,t):n!==mt.BODY&&n!==mt.CAPTION&&n!==mt.COL&&n!==mt.COLGROUP&&n!==mt.HTML&&n!==mt.TBODY&&n!==mt.TD&&n!==mt.TFOOT&&n!==mt.TH&&n!==mt.THEAD&&n!==mt.TR&&cn(e,t);}function cn(e,t){const n=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,e._processTokenInBodyMode(t),e.fosterParentingEnabled=n;}function ln(e,t){let n=0;if(e.hasNonWhitespacePendingCharacterToken)for(;n<e.pendingCharacterTokens.length;n++)cn(e,e.pendingCharacterTokens[n]);else for(;n<e.pendingCharacterTokens.length;n++)e._insertCharacters(e.pendingCharacterTokens[n]);e.insertionMode=e.originalInsertionMode,e._processToken(t);}function mn(e,t){e.openElements.currentTagName===mt.COLGROUP&&(e.openElements.pop(),e.insertionMode=Ot,e._processToken(t));}function pn(e,t){const n=t.tagName;n===mt.HTML?sn(e,t):n===mt.OPTION?(e.openElements.currentTagName===mt.OPTION&&e.openElements.pop(),e._insertElement(t,pt.HTML)):n===mt.OPTGROUP?(e.openElements.currentTagName===mt.OPTION&&e.openElements.pop(),e.openElements.currentTagName===mt.OPTGROUP&&e.openElements.pop(),e._insertElement(t,pt.HTML)):n===mt.INPUT||n===mt.KEYGEN||n===mt.TEXTAREA||n===mt.SELECT?e.openElements.hasInSelectScope(mt.SELECT)&&(e.openElements.popUntilTagNamePopped(mt.SELECT),e._resetInsertionMode(),n!==mt.SELECT&&e._processToken(t)):n!==mt.SCRIPT&&n!==mt.TEMPLATE||xt(e,t);}function Nn(e,t){const n=t.tagName;if(n===mt.OPTGROUP){const t=e.openElements.items[e.openElements.stackTop-1],n=t&&e.treeAdapter.getTagName(t);e.openElements.currentTagName===mt.OPTION&&n===mt.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagName===mt.OPTGROUP&&e.openElements.pop();}else n===mt.OPTION?e.openElements.currentTagName===mt.OPTION&&e.openElements.pop():n===mt.SELECT&&e.openElements.hasInSelectScope(mt.SELECT)?(e.openElements.popUntilTagNamePopped(mt.SELECT),e._resetInsertionMode()):n===mt.TEMPLATE&&yt(e,t);}function un(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(mt.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode(),e._processToken(t)):e.stopped=!0;}function On(e,t){e.insertionMode="IN_BODY_MODE",e._processToken(t);}function Sn(e,t){e.insertionMode="IN_BODY_MODE",e._processToken(t);}be.TAG_NAMES,be.NAMESPACES;return e.parse=function(e,t){return new Rt(t).parse(e)},e.parseFragment=function(e,t,n){return "string"==typeof e&&(n=t,t=e,e=null),new Rt(n).parseFragment(t,e)},e}({});function parse(e,t){return parse5.parse(e,t)}function parseFragment(e,t){return parse5.parseFragment(e,t)}

const docParser = new WeakMap();
function parseDocumentUtil(ownerDocument, html) {
  const doc = parse(html.trim(), getParser(ownerDocument));
  doc.documentElement = doc.firstElementChild;
  doc.head = doc.documentElement.firstElementChild;
  doc.body = doc.head.nextElementSibling;
  return doc;
}
function parseFragmentUtil(ownerDocument, html) {
  if (typeof html === 'string') {
    html = html.trim();
  }
  else {
    html = '';
  }
  const frag = parseFragment(html, getParser(ownerDocument));
  return frag;
}
function getParser(ownerDocument) {
  let parseOptions = docParser.get(ownerDocument);
  if (parseOptions != null) {
    return parseOptions;
  }
  const treeAdapter = {
    createDocument() {
      const doc = ownerDocument.createElement("#document" /* DOCUMENT_NODE */);
      doc['x-mode'] = 'no-quirks';
      return doc;
    },
    createDocumentFragment() {
      return ownerDocument.createDocumentFragment();
    },
    createElement(tagName, namespaceURI, attrs) {
      const elm = ownerDocument.createElementNS(namespaceURI, tagName);
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (attr.namespace == null || attr.namespace === 'http://www.w3.org/1999/xhtml') {
          elm.setAttribute(attr.name, attr.value);
        }
        else {
          elm.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
      return elm;
    },
    createCommentNode(data) {
      return ownerDocument.createComment(data);
    },
    appendChild(parentNode, newNode) {
      parentNode.appendChild(newNode);
    },
    insertBefore(parentNode, newNode, referenceNode) {
      parentNode.insertBefore(newNode, referenceNode);
    },
    setTemplateContent(templateElement, contentElement) {
      templateElement.content = contentElement;
    },
    getTemplateContent(templateElement) {
      return templateElement.content;
    },
    setDocumentType(doc, name, publicId, systemId) {
      let doctypeNode = doc.childNodes.find(n => n.nodeType === 10 /* DOCUMENT_TYPE_NODE */);
      if (doctypeNode == null) {
        doctypeNode = ownerDocument.createDocumentTypeNode();
        doc.insertBefore(doctypeNode, doc.firstChild);
      }
      doctypeNode.nodeValue = '!DOCTYPE';
      doctypeNode['x-name'] = name;
      doctypeNode['x-publicId'] = publicId;
      doctypeNode['x-systemId'] = systemId;
    },
    setDocumentMode(doc, mode) {
      doc['x-mode'] = mode;
    },
    getDocumentMode(doc) {
      return doc['x-mode'];
    },
    detachNode(node) {
      node.remove();
    },
    insertText(parentNode, text) {
      const lastChild = parentNode.lastChild;
      if (lastChild != null && lastChild.nodeType === 3 /* TEXT_NODE */) {
        lastChild.nodeValue += text;
      }
      else {
        parentNode.appendChild(ownerDocument.createTextNode(text));
      }
    },
    insertTextBefore(parentNode, text, referenceNode) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
      if (prevNode != null && prevNode.nodeType === 3 /* TEXT_NODE */) {
        prevNode.nodeValue += text;
      }
      else {
        parentNode.insertBefore(ownerDocument.createTextNode(text), referenceNode);
      }
    },
    adoptAttributes(recipient, attrs) {
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (recipient.hasAttributeNS(attr.namespace, attr.name) === false) {
          recipient.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
    },
    getFirstChild(node) {
      return node.childNodes[0];
    },
    getChildNodes(node) {
      return node.childNodes;
    },
    getParentNode(node) {
      return node.parentNode;
    },
    getAttrList(element) {
      const attrs = element.attributes.__items.map(attr => {
        return {
          name: attr.name,
          value: attr.value,
          namespace: attr.namespaceURI,
          prefix: null,
        };
      });
      return attrs;
    },
    getTagName(element) {
      if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
        return element.nodeName.toLowerCase();
      }
      else {
        return element.nodeName;
      }
    },
    getNamespaceURI(element) {
      return element.namespaceURI;
    },
    getTextNodeContent(textNode) {
      return textNode.nodeValue;
    },
    getCommentNodeContent(commentNode) {
      return commentNode.nodeValue;
    },
    getDocumentTypeNodeName(doctypeNode) {
      return doctypeNode['x-name'];
    },
    getDocumentTypeNodePublicId(doctypeNode) {
      return doctypeNode['x-publicId'];
    },
    getDocumentTypeNodeSystemId(doctypeNode) {
      return doctypeNode['x-systemId'];
    },
    isTextNode(node) {
      return node.nodeType === 3 /* TEXT_NODE */;
    },
    isCommentNode(node) {
      return node.nodeType === 8 /* COMMENT_NODE */;
    },
    isDocumentTypeNode(node) {
      return node.nodeType === 10 /* DOCUMENT_TYPE_NODE */;
    },
    isElementNode(node) {
      return node.nodeType === 1 /* ELEMENT_NODE */;
    },
  };
  parseOptions = {
    treeAdapter: treeAdapter,
  };
  docParser.set(ownerDocument, parseOptions);
  return parseOptions;
}

class MockNode {
  constructor(ownerDocument, nodeType, nodeName, nodeValue) {
    this.ownerDocument = ownerDocument;
    this.nodeType = nodeType;
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.parentNode = null;
    this.childNodes = [];
  }
  appendChild(newNode) {
    if (newNode.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      const nodes = newNode.childNodes.slice();
      for (const child of nodes) {
        this.appendChild(child);
      }
    }
    else {
      newNode.remove();
      newNode.parentNode = this;
      this.childNodes.push(newNode);
      connectNode(this.ownerDocument, newNode);
    }
    return newNode;
  }
  append(...items) {
    items.forEach(item => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      this.appendChild(isNode ? item : this.ownerDocument.createTextNode(String(item)));
    });
  }
  prepend(...items) {
    const firstChild = this.firstChild;
    items.forEach(item => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      this.insertBefore(isNode ? item : this.ownerDocument.createTextNode(String(item)), firstChild);
    });
  }
  cloneNode(deep) {
    throw new Error(`invalid node type to clone: ${this.nodeType}, deep: ${deep}`);
  }
  compareDocumentPosition(_other) {
    // unimplemented
    // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
    return -1;
  }
  get firstChild() {
    return this.childNodes[0] || null;
  }
  insertBefore(newNode, referenceNode) {
    if (newNode.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      for (let i = 0, ii = newNode.childNodes.length; i < ii; i++) {
        insertBefore(this, newNode.childNodes[i], referenceNode);
      }
    }
    else {
      insertBefore(this, newNode, referenceNode);
    }
    return newNode;
  }
  get isConnected() {
    let node = this;
    while (node != null) {
      if (node.nodeType === 9 /* DOCUMENT_NODE */) {
        return true;
      }
      node = node.parentNode;
      if (node != null && node.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
        node = node.host;
      }
    }
    return false;
  }
  isSameNode(node) {
    return this === node;
  }
  get lastChild() {
    return this.childNodes[this.childNodes.length - 1] || null;
  }
  get nextSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) + 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  get parentElement() {
    return this.parentNode || null;
  }
  set parentElement(value) {
    this.parentNode = value;
  }
  get previousSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) - 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  contains(otherNode) {
    return this.childNodes.includes(otherNode);
  }
  removeChild(childNode) {
    const index = this.childNodes.indexOf(childNode);
    if (index > -1) {
      this.childNodes.splice(index, 1);
      if (this.nodeType === 1 /* ELEMENT_NODE */) {
        const wasConnected = this.isConnected;
        childNode.parentNode = null;
        if (wasConnected === true) {
          disconnectNode(childNode);
        }
      }
      else {
        childNode.parentNode = null;
      }
    }
    else {
      throw new Error(`node not found within childNodes during removeChild`);
    }
    return childNode;
  }
  remove() {
    if (this.parentNode != null) {
      this.parentNode.removeChild(this);
    }
  }
  replaceChild(newChild, oldChild) {
    if (oldChild.parentNode === this) {
      this.insertBefore(newChild, oldChild);
      oldChild.remove();
      return newChild;
    }
    return null;
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(value) {
    this.nodeValue = String(value);
  }
}
MockNode.ELEMENT_NODE = 1;
MockNode.TEXT_NODE = 3;
MockNode.PROCESSING_INSTRUCTION_NODE = 7;
MockNode.COMMENT_NODE = 8;
MockNode.DOCUMENT_NODE = 9;
MockNode.DOCUMENT_TYPE_NODE = 10;
MockNode.DOCUMENT_FRAGMENT_NODE = 11;
class MockNodeList {
  constructor(ownerDocument, childNodes, length) {
    this.ownerDocument = ownerDocument;
    this.childNodes = childNodes;
    this.length = length;
  }
}
class MockElement extends MockNode {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, 1 /* ELEMENT_NODE */, typeof nodeName === 'string' ? nodeName : null, null);
    this.namespaceURI = null;
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  attachShadow(_opts) {
    const shadowRoot = this.ownerDocument.createDocumentFragment();
    this.shadowRoot = shadowRoot;
    return shadowRoot;
  }
  get shadowRoot() {
    return this.__shadowRoot || null;
  }
  set shadowRoot(shadowRoot) {
    if (shadowRoot != null) {
      shadowRoot.host = this;
      this.__shadowRoot = shadowRoot;
    }
    else {
      delete this.__shadowRoot;
    }
  }
  get attributes() {
    if (this.__attributeMap == null) {
      this.__attributeMap = createAttributeProxy(false);
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
  get children() {
    return this.childNodes.filter(n => n.nodeType === 1 /* ELEMENT_NODE */);
  }
  get childElementCount() {
    return this.childNodes.filter(n => n.nodeType === 1 /* ELEMENT_NODE */).length;
  }
  get className() {
    return this.getAttributeNS(null, 'class') || '';
  }
  set className(value) {
    this.setAttributeNS(null, 'class', value);
  }
  get classList() {
    return new MockClassList(this);
  }
  click() {
    dispatchEvent(this, new MockEvent('click', { bubbles: true, cancelable: true, composed: true }));
  }
  cloneNode(_deep) {
    // implemented on MockElement.prototype from within element.ts
    return null;
  }
  closest(selector) {
    let elm = this;
    while (elm != null) {
      if (elm.matches(selector)) {
        return elm;
      }
      elm = elm.parentNode;
    }
    return null;
  }
  get dataset() {
    return dataset(this);
  }
  get dir() {
    return this.getAttributeNS(null, 'dir') || '';
  }
  set dir(value) {
    this.setAttributeNS(null, 'dir', value);
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get firstElementChild() {
    return this.children[0] || null;
  }
  getAttribute(attrName) {
    if (attrName === 'style') {
      if (this.__style != null && this.__style.length > 0) {
        return this.style.cssText;
      }
      return null;
    }
    const attr = this.attributes.getNamedItem(attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getBoundingClientRect() {
    return { bottom: 0, height: 0, left: 0, right: 0, top: 0, width: 0, x: 0, y: 0 };
  }
  getRootNode(opts) {
    const isComposed = opts != null && opts.composed === true;
    let node = this;
    while (node.parentNode != null) {
      node = node.parentNode;
      if (isComposed === true && node.parentNode == null && node.host != null) {
        node = node.host;
      }
    }
    return node;
  }
  hasChildNodes() {
    return this.childNodes.length > 0;
  }
  get id() {
    return this.getAttributeNS(null, 'id') || '';
  }
  set id(value) {
    this.setAttributeNS(null, 'id', value);
  }
  get innerHTML() {
    if (this.childNodes.length === 0) {
      return '';
    }
    return serializeNodeToHtml(this, {
      newLines: false,
      indentSpaces: 0,
    });
  }
  set innerHTML(html) {
    if (NON_ESCAPABLE_CONTENT.has(this.nodeName) === true) {
      setTextContent(this, html);
    }
    else {
      for (let i = this.childNodes.length - 1; i >= 0; i--) {
        this.removeChild(this.childNodes[i]);
      }
      if (typeof html === 'string') {
        const frag = parseFragmentUtil(this.ownerDocument, html);
        while (frag.childNodes.length > 0) {
          this.appendChild(frag.childNodes[0]);
        }
      }
    }
  }
  get innerText() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set innerText(value) {
    setTextContent(this, value);
  }
  insertAdjacentElement(position, elm) {
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
    return elm;
  }
  insertAdjacentHTML(position, html) {
    const frag = parseFragmentUtil(this.ownerDocument, html);
    if (position === 'beforebegin') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[0], this);
      }
    }
    else if (position === 'afterbegin') {
      while (frag.childNodes.length > 0) {
        this.prepend(frag.childNodes[frag.childNodes.length - 1]);
      }
    }
    else if (position === 'beforeend') {
      while (frag.childNodes.length > 0) {
        this.appendChild(frag.childNodes[0]);
      }
    }
    else if (position === 'afterend') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[frag.childNodes.length - 1], this.nextSibling);
      }
    }
  }
  insertAdjacentText(position, text) {
    const elm = this.ownerDocument.createTextNode(text);
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
  }
  hasAttribute(attrName) {
    if (attrName === 'style') {
      return this.__style != null && this.__style.length > 0;
    }
    return this.getAttribute(attrName) !== null;
  }
  hasAttributeNS(namespaceURI, name) {
    return this.getAttributeNS(namespaceURI, name) !== null;
  }
  get hidden() {
    return this.hasAttributeNS(null, 'hidden');
  }
  set hidden(isHidden) {
    if (isHidden === true) {
      this.setAttributeNS(null, 'hidden', '');
    }
    else {
      this.removeAttributeNS(null, 'hidden');
    }
  }
  get lang() {
    return this.getAttributeNS(null, 'lang') || '';
  }
  set lang(value) {
    this.setAttributeNS(null, 'lang', value);
  }
  get lastElementChild() {
    const children = this.children;
    return children[children.length - 1] || null;
  }
  matches(selector) {
    return matches(selector, this);
  }
  get nextElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* ELEMENT_NODE */ || parentElement.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */ || parentElement.nodeType === 9 /* DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) + 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  get outerHTML() {
    return serializeNodeToHtml(this, {
      newLines: false,
      outerHtml: true,
      indentSpaces: 0,
    });
  }
  get previousElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* ELEMENT_NODE */ || parentElement.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */ || parentElement.nodeType === 9 /* DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) - 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  getElementsByClassName(classNames) {
    const classes = classNames
      .trim()
      .split(' ')
      .filter(c => c.length > 0);
    const results = [];
    getElementsByClassName(this, classes, results);
    return results;
  }
  getElementsByTagName(tagName) {
    const results = [];
    getElementsByTagName(this, tagName.toLowerCase(), results);
    return results;
  }
  querySelector(selector) {
    return selectOne(selector, this);
  }
  querySelectorAll(selector) {
    return selectAll(selector, this);
  }
  removeAttribute(attrName) {
    if (attrName === 'style') {
      delete this.__style;
    }
    else {
      const attr = this.attributes.getNamedItem(attrName);
      if (attr != null) {
        this.attributes.removeNamedItemNS(attr);
        if (checkAttributeChanged(this) === true) {
          attributeChanged(this, attrName, attr.value, null);
        }
      }
    }
  }
  removeAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      this.attributes.removeNamedItemNS(attr);
      if (checkAttributeChanged(this) === true) {
        attributeChanged(this, attrName, attr.value, null);
      }
    }
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  setAttribute(attrName, value) {
    if (attrName === 'style') {
      this.style = value;
    }
    else {
      const attributes = this.attributes;
      let attr = attributes.getNamedItem(attrName);
      const checkAttrChanged = checkAttributeChanged(this);
      if (attr != null) {
        if (checkAttrChanged === true) {
          const oldValue = attr.value;
          attr.value = value;
          if (oldValue !== attr.value) {
            attributeChanged(this, attr.name, oldValue, attr.value);
          }
        }
        else {
          attr.value = value;
        }
      }
      else {
        if (attributes.caseInsensitive) {
          attrName = attrName.toLowerCase();
        }
        attr = new MockAttr(attrName, value);
        attributes.__items.push(attr);
        if (checkAttrChanged === true) {
          attributeChanged(this, attrName, null, attr.value);
        }
      }
    }
  }
  setAttributeNS(namespaceURI, attrName, value) {
    const attributes = this.attributes;
    let attr = attributes.getNamedItemNS(namespaceURI, attrName);
    const checkAttrChanged = checkAttributeChanged(this);
    if (attr != null) {
      if (checkAttrChanged === true) {
        const oldValue = attr.value;
        attr.value = value;
        if (oldValue !== attr.value) {
          attributeChanged(this, attr.name, oldValue, attr.value);
        }
      }
      else {
        attr.value = value;
      }
    }
    else {
      attr = new MockAttr(attrName, value, namespaceURI);
      attributes.__items.push(attr);
      if (checkAttrChanged === true) {
        attributeChanged(this, attrName, null, attr.value);
      }
    }
  }
  get style() {
    if (this.__style == null) {
      this.__style = createCSSStyleDeclaration();
    }
    return this.__style;
  }
  set style(val) {
    if (typeof val === 'string') {
      if (this.__style == null) {
        this.__style = createCSSStyleDeclaration();
      }
      this.__style.cssText = val;
    }
    else {
      this.__style = val;
    }
  }
  get tabIndex() {
    return parseInt(this.getAttributeNS(null, 'tabindex') || '-1', 10);
  }
  set tabIndex(value) {
    this.setAttributeNS(null, 'tabindex', value);
  }
  get tagName() {
    return this.nodeName;
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get textContent() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set textContent(value) {
    setTextContent(this, value);
  }
  get title() {
    return this.getAttributeNS(null, 'title') || '';
  }
  set title(value) {
    this.setAttributeNS(null, 'title', value);
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
  toString(opts) {
    return serializeNodeToHtml(this, opts);
  }
}
function getElementsByClassName(elm, classNames, foundElms) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    for (let j = 0, jj = classNames.length; j < jj; j++) {
      if (childElm.classList.contains(classNames[j])) {
        foundElms.push(childElm);
      }
    }
    getElementsByClassName(childElm, classNames, foundElms);
  }
}
function getElementsByTagName(elm, tagName, foundElms) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (tagName === '*' || childElm.nodeName.toLowerCase() === tagName) {
      foundElms.push(childElm);
    }
    getElementsByTagName(childElm, tagName, foundElms);
  }
}
function resetElement(elm) {
  resetEventListeners(elm);
  delete elm.__attributeMap;
  delete elm.__shadowRoot;
  delete elm.__style;
}
function insertBefore(parentNode, newNode, referenceNode) {
  if (newNode !== referenceNode) {
    newNode.remove();
    newNode.parentNode = parentNode;
    newNode.ownerDocument = parentNode.ownerDocument;
    if (referenceNode != null) {
      const index = parentNode.childNodes.indexOf(referenceNode);
      if (index > -1) {
        parentNode.childNodes.splice(index, 0, newNode);
      }
      else {
        throw new Error(`referenceNode not found in parentNode.childNodes`);
      }
    }
    else {
      parentNode.childNodes.push(newNode);
    }
    connectNode(parentNode.ownerDocument, newNode);
  }
  return newNode;
}
class MockHTMLElement extends MockElement {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, typeof nodeName === 'string' ? nodeName.toUpperCase() : null);
    this.namespaceURI = 'http://www.w3.org/1999/xhtml';
  }
  get tagName() {
    return this.nodeName;
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get attributes() {
    if (this.__attributeMap == null) {
      this.__attributeMap = createAttributeProxy(true);
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
}
class MockTextNode extends MockNode {
  constructor(ownerDocument, text) {
    super(ownerDocument, 3 /* TEXT_NODE */, "#text" /* TEXT_NODE */, text);
  }
  cloneNode(_deep) {
    return new MockTextNode(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
  get data() {
    return this.nodeValue;
  }
  set data(text) {
    this.nodeValue = text;
  }
  get wholeText() {
    if (this.parentNode != null) {
      const text = [];
      for (let i = 0, ii = this.parentNode.childNodes.length; i < ii; i++) {
        const childNode = this.parentNode.childNodes[i];
        if (childNode.nodeType === 3 /* TEXT_NODE */) {
          text.push(childNode.nodeValue);
        }
      }
      return text.join('');
    }
    return this.nodeValue;
  }
}
function getTextContent(childNodes, text) {
  for (let i = 0, ii = childNodes.length; i < ii; i++) {
    const childNode = childNodes[i];
    if (childNode.nodeType === 3 /* TEXT_NODE */) {
      text.push(childNode.nodeValue);
    }
    else if (childNode.nodeType === 1 /* ELEMENT_NODE */) {
      getTextContent(childNode.childNodes, text);
    }
  }
}
function setTextContent(elm, text) {
  for (let i = elm.childNodes.length - 1; i >= 0; i--) {
    elm.removeChild(elm.childNodes[i]);
  }
  const textNode = new MockTextNode(elm.ownerDocument, text);
  elm.appendChild(textNode);
}

class MockComment extends MockNode {
  constructor(ownerDocument, data) {
    super(ownerDocument, 8 /* COMMENT_NODE */, "#comment" /* COMMENT_NODE */, data);
  }
  cloneNode(_deep) {
    return new MockComment(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
}

class MockDocumentFragment extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, null);
    this.nodeName = "#document-fragment" /* DOCUMENT_FRAGMENT_NODE */;
    this.nodeType = 11 /* DOCUMENT_FRAGMENT_NODE */;
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  cloneNode(deep) {
    const cloned = new MockDocumentFragment(null);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const childNode = this.childNodes[i];
        if (childNode.nodeType === 1 /* ELEMENT_NODE */ || childNode.nodeType === 3 /* TEXT_NODE */ || childNode.nodeType === 8 /* COMMENT_NODE */) {
          const clonedChildNode = this.childNodes[i].cloneNode(true);
          cloned.appendChild(clonedChildNode);
        }
      }
    }
    return cloned;
  }
}

class MockDocumentTypeNode extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, '!DOCTYPE');
    this.nodeType = 10 /* DOCUMENT_TYPE_NODE */;
    this.setAttribute('html', '');
  }
}

class MockCSSRule {
  constructor(parentStyleSheet) {
    this.parentStyleSheet = parentStyleSheet;
    this.cssText = '';
    this.type = 0;
  }
}
class MockCSSStyleSheet {
  constructor(ownerNode) {
    this.type = 'text/css';
    this.parentStyleSheet = null;
    this.cssRules = [];
    this.ownerNode = ownerNode;
  }
  get rules() {
    return this.cssRules;
  }
  set rules(rules) {
    this.cssRules = rules;
  }
  deleteRule(index) {
    if (index >= 0 && index < this.cssRules.length) {
      this.cssRules.splice(index, 1);
      updateStyleTextNode(this.ownerNode);
    }
  }
  insertRule(rule, index = 0) {
    if (typeof index !== 'number') {
      index = 0;
    }
    if (index < 0) {
      index = 0;
    }
    if (index > this.cssRules.length) {
      index = this.cssRules.length;
    }
    const cssRule = new MockCSSRule(this);
    cssRule.cssText = rule;
    this.cssRules.splice(index, 0, cssRule);
    updateStyleTextNode(this.ownerNode);
    return index;
  }
}
function getStyleElementText(styleElm) {
  const output = [];
  for (let i = 0; i < styleElm.childNodes.length; i++) {
    output.push(styleElm.childNodes[i].nodeValue);
  }
  return output.join('');
}
function setStyleElementText(styleElm, text) {
  // keeping the innerHTML and the sheet.cssRules connected
  // is not technically correct, but since we're doing
  // SSR we'll need to turn any assigned cssRules into
  // real text, not just properties that aren't rendered
  const sheet = styleElm.sheet;
  sheet.cssRules.length = 0;
  sheet.insertRule(text);
  updateStyleTextNode(styleElm);
}
function updateStyleTextNode(styleElm) {
  const childNodeLen = styleElm.childNodes.length;
  if (childNodeLen > 1) {
    for (let i = childNodeLen - 1; i >= 1; i--) {
      styleElm.removeChild(styleElm.childNodes[i]);
    }
  }
  else if (childNodeLen < 1) {
    styleElm.appendChild(styleElm.ownerDocument.createTextNode(''));
  }
  const textNode = styleElm.childNodes[0];
  textNode.nodeValue = styleElm.sheet.cssRules.map(r => r.cssText).join('\n');
}

function createElement(ownerDocument, tagName) {
  if (typeof tagName !== 'string' || tagName === '' || !/^[a-z0-9-_:]+$/i.test(tagName)) {
    throw new Error(`The tag name provided (${tagName}) is not a valid name.`);
  }
  tagName = tagName.toLowerCase();
  switch (tagName) {
    case 'a':
      return new MockAnchorElement(ownerDocument);
    case 'base':
      return new MockBaseElement(ownerDocument);
    case 'button':
      return new MockButtonElement(ownerDocument);
    case 'canvas':
      return new MockCanvasElement(ownerDocument);
    case 'form':
      return new MockFormElement(ownerDocument);
    case 'img':
      return new MockImageElement(ownerDocument);
    case 'input':
      return new MockInputElement(ownerDocument);
    case 'link':
      return new MockLinkElement(ownerDocument);
    case 'meta':
      return new MockMetaElement(ownerDocument);
    case 'script':
      return new MockScriptElement(ownerDocument);
    case 'style':
      return new MockStyleElement(ownerDocument);
    case 'template':
      return new MockTemplateElement(ownerDocument);
    case 'title':
      return new MockTitleElement(ownerDocument);
  }
  if (ownerDocument != null && tagName.includes('-')) {
    const win = ownerDocument.defaultView;
    if (win != null && win.customElements != null) {
      return createCustomElement(win.customElements, ownerDocument, tagName);
    }
  }
  return new MockHTMLElement(ownerDocument, tagName);
}
function createElementNS(ownerDocument, namespaceURI, tagName) {
  if (namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return createElement(ownerDocument, tagName);
  }
  else if (namespaceURI === 'http://www.w3.org/2000/svg') {
    return new MockSVGElement(ownerDocument, tagName);
  }
  else {
    return new MockElement(ownerDocument, tagName);
  }
}
class MockAnchorElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'a');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
class MockButtonElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'button');
  }
}
patchPropAttributes(MockButtonElement.prototype, {
  type: String,
}, {
  type: 'submit',
});
class MockImageElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'img');
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockImageElement.prototype, {
  height: Number,
  width: Number,
});
class MockInputElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'input');
  }
  get list() {
    const listId = this.getAttribute('list');
    if (listId) {
      return this.ownerDocument.getElementById(listId);
    }
    return null;
  }
}
patchPropAttributes(MockInputElement.prototype, {
  accept: String,
  autocomplete: String,
  autofocus: Boolean,
  capture: String,
  checked: Boolean,
  disabled: Boolean,
  form: String,
  formaction: String,
  formenctype: String,
  formmethod: String,
  formnovalidate: String,
  formtarget: String,
  height: Number,
  inputmode: String,
  max: String,
  maxLength: Number,
  min: String,
  minLength: Number,
  multiple: Boolean,
  name: String,
  pattern: String,
  placeholder: String,
  required: Boolean,
  readOnly: Boolean,
  size: Number,
  spellCheck: Boolean,
  src: String,
  step: String,
  type: String,
  value: String,
  width: Number,
}, {
  type: 'text',
});
class MockFormElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'form');
  }
}
patchPropAttributes(MockFormElement.prototype, {
  name: String,
});
class MockLinkElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'link');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
patchPropAttributes(MockLinkElement.prototype, {
  crossorigin: String,
  media: String,
  rel: String,
  type: String,
});
class MockMetaElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'meta');
  }
}
patchPropAttributes(MockMetaElement.prototype, {
  charset: String,
  content: String,
  name: String,
});
class MockScriptElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'script');
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockScriptElement.prototype, {
  type: String,
});
class MockStyleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'style');
    this.sheet = new MockCSSStyleSheet(this);
  }
  get innerHTML() {
    return getStyleElementText(this);
  }
  set innerHTML(value) {
    setStyleElementText(this, value);
  }
  get innerText() {
    return getStyleElementText(this);
  }
  set innerText(value) {
    setStyleElementText(this, value);
  }
  get textContent() {
    return getStyleElementText(this);
  }
  set textContent(value) {
    setStyleElementText(this, value);
  }
}
class MockSVGElement extends MockElement {
  // SVGElement properties and methods
  get ownerSVGElement() {
    return null;
  }
  get viewportElement() {
    return null;
  }
  focus() {
    /**/
  }
  onunload() {
    /**/
  }
  // SVGGeometryElement properties and methods
  get pathLength() {
    return 0;
  }
  isPointInFill(_pt) {
    return false;
  }
  isPointInStroke(_pt) {
    return false;
  }
  getTotalLength() {
    return 0;
  }
}
class MockBaseElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'base');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
class MockTemplateElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'template');
    this.content = new MockDocumentFragment(ownerDocument);
  }
  get innerHTML() {
    return this.content.innerHTML;
  }
  set innerHTML(html) {
    this.content.innerHTML = html;
  }
  cloneNode(deep) {
    const cloned = new MockTemplateElement(null);
    cloned.attributes = cloneAttributes(this.attributes);
    const styleCssText = this.getAttribute('style');
    if (styleCssText != null && styleCssText.length > 0) {
      cloned.setAttribute('style', styleCssText);
    }
    cloned.content = this.content.cloneNode(deep);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const clonedChildNode = this.childNodes[i].cloneNode(true);
        cloned.appendChild(clonedChildNode);
      }
    }
    return cloned;
  }
}
class MockTitleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'title');
  }
  get text() {
    return this.textContent;
  }
  set text(value) {
    this.textContent = value;
  }
}
class MockCanvasElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'canvas');
  }
  getContext() {
    return {
      fillRect: function () {
        return;
      },
      clearRect: function () {
        return;
      },
      getImageData: function (_, __, w, h) {
        return {
          data: new Array(w * h * 4),
        };
      },
      putImageData: function () {
        return;
      },
      createImageData: function () {
        return [];
      },
      setTransform: function () {
        return;
      },
      drawImage: function () {
        return;
      },
      save: function () {
        return;
      },
      fillText: function () {
        return;
      },
      restore: function () {
        return;
      },
      beginPath: function () {
        return;
      },
      moveTo: function () {
        return;
      },
      lineTo: function () {
        return;
      },
      closePath: function () {
        return;
      },
      stroke: function () {
        return;
      },
      translate: function () {
        return;
      },
      scale: function () {
        return;
      },
      rotate: function () {
        return;
      },
      arc: function () {
        return;
      },
      fill: function () {
        return;
      },
      measureText: function () {
        return { width: 0 };
      },
      transform: function () {
        return;
      },
      rect: function () {
        return;
      },
      clip: function () {
        return;
      },
    };
  }
}
function fullUrl(elm, attrName) {
  const val = elm.getAttribute(attrName) || '';
  if (elm.ownerDocument != null) {
    const win = elm.ownerDocument.defaultView;
    if (win != null) {
      const loc = win.location;
      if (loc != null) {
        try {
          const url = new URL(val, loc.href);
          return url.href;
        }
        catch (e) { }
      }
    }
  }
  return val.replace(/\'|\"/g, '').trim();
}
function patchPropAttributes(prototype, attrs, defaults = {}) {
  Object.keys(attrs).forEach(propName => {
    const attr = attrs[propName];
    const defaultValue = defaults[propName];
    if (attr === Boolean) {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName);
        },
        set(value) {
          if (value) {
            this.setAttribute(propName, '');
          }
          else {
            this.removeAttribute(propName);
          }
        },
      });
    }
    else if (attr === Number) {
      Object.defineProperty(prototype, propName, {
        get() {
          const value = this.getAttribute(propName);
          return value ? parseInt(value, 10) : defaultValue === undefined ? 0 : defaultValue;
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
    else {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName) ? this.getAttribute(propName) : defaultValue || '';
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
  });
}
MockElement.prototype.cloneNode = function (deep) {
  // because we're creating elements, which extending specific HTML base classes there
  // is a MockElement circular reference that bundling has trouble dealing with so
  // the fix is to add cloneNode() to MockElement's prototype after the HTML classes
  const cloned = createElement(this.ownerDocument, this.nodeName);
  cloned.attributes = cloneAttributes(this.attributes);
  const styleCssText = this.getAttribute('style');
  if (styleCssText != null && styleCssText.length > 0) {
    cloned.setAttribute('style', styleCssText);
  }
  if (deep) {
    for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
      const clonedChildNode = this.childNodes[i].cloneNode(true);
      cloned.appendChild(clonedChildNode);
    }
  }
  return cloned;
};

let sharedDocument;
function parseHtmlToDocument(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseDocumentUtil(ownerDocument, html);
}
function parseHtmlToFragment(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseFragmentUtil(ownerDocument, html);
}

class MockHeaders {
  constructor(init) {
    this._values = [];
    if (typeof init === 'object') {
      if (typeof init[Symbol.iterator] === 'function') {
        const kvs = [];
        for (const kv of init) {
          if (typeof kv[Symbol.iterator] === 'function') {
            kvs.push([...kv]);
          }
        }
        for (const kv of kvs) {
          this.append(kv[0], kv[1]);
        }
      }
      else {
        for (const key in init) {
          this.append(key, init[key]);
        }
      }
    }
  }
  append(key, value) {
    this._values.push([key, value + '']);
  }
  delete(key) {
    key = key.toLowerCase();
    for (let i = this._values.length - 1; i >= 0; i--) {
      if (this._values[i][0].toLowerCase() === key) {
        this._values.splice(i, 1);
      }
    }
  }
  entries() {
    const entries = [];
    for (const kv of this.keys()) {
      entries.push([kv, this.get(kv)]);
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: entries[index],
          done: !entries[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  forEach(cb) {
    for (const kv of this.entries()) {
      cb(kv[1], kv[0]);
    }
  }
  get(key) {
    const rtn = [];
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        rtn.push(kv[1]);
      }
    }
    return rtn.length > 0 ? rtn.join(', ') : null;
  }
  has(key) {
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        return true;
      }
    }
    return false;
  }
  keys() {
    const keys = [];
    for (const kv of this._values) {
      const key = kv[0].toLowerCase();
      if (!keys.includes(key)) {
        keys.push(key);
      }
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: keys[index],
          done: !keys[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  set(key, value) {
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key.toLowerCase()) {
        kv[1] = value + '';
        return;
      }
    }
    this.append(key, value);
  }
  values() {
    const values = this._values;
    let index = -1;
    return {
      next() {
        index++;
        const done = !values[index];
        return {
          value: done ? undefined : values[index][1],
          done,
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  [Symbol.iterator]() {
    return this.entries();
  }
}

class MockRequest {
  constructor(input, init = {}) {
    this._method = 'GET';
    this._url = '/';
    this.bodyUsed = false;
    this.cache = 'default';
    this.credentials = 'same-origin';
    this.integrity = '';
    this.keepalive = false;
    this.mode = 'cors';
    this.redirect = 'follow';
    this.referrer = 'about:client';
    this.referrerPolicy = '';
    if (typeof input === 'string') {
      this.url = input;
    }
    else if (input) {
      Object.assign(this, input);
      this.headers = new MockHeaders(input.headers);
    }
    Object.assign(this, init);
    if (init.headers) {
      this.headers = new MockHeaders(init.headers);
    }
    if (!this.headers) {
      this.headers = new MockHeaders();
    }
  }
  get url() {
    if (typeof this._url === 'string') {
      return new URL(this._url, location.href).href;
    }
    return new URL('/', location.href).href;
  }
  set url(value) {
    this._url = value;
  }
  get method() {
    if (typeof this._method === 'string') {
      return this._method.toUpperCase();
    }
    return 'GET';
  }
  set method(value) {
    this._method = value;
  }
  clone() {
    const clone = Object.assign({}, this);
    clone.headers = new MockHeaders(this.headers);
    return new MockRequest(clone);
  }
}
class MockResponse {
  constructor(body, init = {}) {
    this.ok = true;
    this.status = 200;
    this.statusText = '';
    this.type = 'default';
    this.url = '';
    this._body = body;
    if (init) {
      Object.assign(this, init);
    }
    this.headers = new MockHeaders(init.headers);
  }
  async json() {
    return JSON.parse(this._body);
  }
  async text() {
    return this._body;
  }
  clone() {
    const initClone = Object.assign({}, this);
    initClone.headers = new MockHeaders(this.headers);
    return new MockResponse(this._body, initClone);
  }
}

function setupGlobal(gbl) {
  if (gbl.window == null) {
    const win = (gbl.window = new MockWindow());
    WINDOW_FUNCTIONS.forEach(fnName => {
      if (!(fnName in gbl)) {
        gbl[fnName] = win[fnName].bind(win);
      }
    });
    WINDOW_PROPS.forEach(propName => {
      if (!(propName in gbl)) {
        Object.defineProperty(gbl, propName, {
          get() {
            return win[propName];
          },
          set(val) {
            win[propName] = val;
          },
          configurable: true,
          enumerable: true,
        });
      }
    });
    GLOBAL_CONSTRUCTORS.forEach(([cstrName]) => {
      gbl[cstrName] = win[cstrName];
    });
  }
  return gbl.window;
}
function teardownGlobal(gbl) {
  const win = gbl.window;
  if (win && typeof win.close === 'function') {
    win.close();
  }
}
function patchWindow(winToBePatched) {
  const mockWin = new MockWindow(false);
  WINDOW_FUNCTIONS.forEach(fnName => {
    if (typeof winToBePatched[fnName] !== 'function') {
      winToBePatched[fnName] = mockWin[fnName].bind(mockWin);
    }
  });
  WINDOW_PROPS.forEach(propName => {
    if (winToBePatched === undefined) {
      Object.defineProperty(winToBePatched, propName, {
        get() {
          return mockWin[propName];
        },
        set(val) {
          mockWin[propName] = val;
        },
        configurable: true,
        enumerable: true,
      });
    }
  });
}
function addGlobalsToWindowPrototype(mockWinPrototype) {
  GLOBAL_CONSTRUCTORS.forEach(([cstrName, Cstr]) => {
    Object.defineProperty(mockWinPrototype, cstrName, {
      get() {
        return this['__' + cstrName] || Cstr;
      },
      set(cstr) {
        this['__' + cstrName] = cstr;
      },
      configurable: true,
      enumerable: true,
    });
  });
}
const WINDOW_FUNCTIONS = [
  'addEventListener',
  'alert',
  'blur',
  'cancelAnimationFrame',
  'cancelIdleCallback',
  'clearInterval',
  'clearTimeout',
  'close',
  'confirm',
  'dispatchEvent',
  'focus',
  'getComputedStyle',
  'matchMedia',
  'open',
  'prompt',
  'removeEventListener',
  'requestAnimationFrame',
  'requestIdleCallback',
  'URL',
];
const WINDOW_PROPS = [
  'customElements',
  'devicePixelRatio',
  'document',
  'history',
  'innerHeight',
  'innerWidth',
  'localStorage',
  'location',
  'navigator',
  'pageXOffset',
  'pageYOffset',
  'performance',
  'screenLeft',
  'screenTop',
  'screenX',
  'screenY',
  'scrollX',
  'scrollY',
  'sessionStorage',
  'CSS',
  'CustomEvent',
  'Event',
  'Element',
  'HTMLElement',
  'Node',
  'NodeList',
  'KeyboardEvent',
  'MouseEvent',
];
const GLOBAL_CONSTRUCTORS = [
  ['CustomEvent', MockCustomEvent],
  ['Event', MockEvent],
  ['Headers', MockHeaders],
  ['KeyboardEvent', MockKeyboardEvent],
  ['MouseEvent', MockMouseEvent],
  ['Request', MockRequest],
  ['Response', MockResponse],
  ['HTMLAnchorElement', MockAnchorElement],
  ['HTMLBaseElement', MockBaseElement],
  ['HTMLButtonElement', MockButtonElement],
  ['HTMLCanvasElement', MockCanvasElement],
  ['HTMLFormElement', MockFormElement],
  ['HTMLImageElement', MockImageElement],
  ['HTMLInputElement', MockInputElement],
  ['HTMLLinkElement', MockLinkElement],
  ['HTMLMetaElement', MockMetaElement],
  ['HTMLScriptElement', MockScriptElement],
  ['HTMLStyleElement', MockStyleElement],
  ['HTMLTemplateElement', MockTemplateElement],
  ['HTMLTitleElement', MockTitleElement],
];

const consoleNoop = () => {
  /**/
};
function createConsole() {
  return {
    debug: consoleNoop,
    error: consoleNoop,
    info: consoleNoop,
    log: consoleNoop,
    warn: consoleNoop,
    dir: consoleNoop,
    dirxml: consoleNoop,
    table: consoleNoop,
    trace: consoleNoop,
    group: consoleNoop,
    groupCollapsed: consoleNoop,
    groupEnd: consoleNoop,
    clear: consoleNoop,
    count: consoleNoop,
    countReset: consoleNoop,
    assert: consoleNoop,
    profile: consoleNoop,
    profileEnd: consoleNoop,
    time: consoleNoop,
    timeLog: consoleNoop,
    timeEnd: consoleNoop,
    timeStamp: consoleNoop,
    context: consoleNoop,
    memory: consoleNoop,
  };
}

class MockHistory {
  constructor() {
    this.items = [];
  }
  get length() {
    return this.items.length;
  }
  back() {
    this.go(-1);
  }
  forward() {
    this.go(1);
  }
  go(_value) {
    //
  }
  pushState(_state, _title, _url) {
    //
  }
  replaceState(_state, _title, _url) {
    //
  }
}

class MockIntersectionObserver {
  constructor() {
    /**/
  }
  disconnect() {
    /**/
  }
  observe() {
    /**/
  }
  takeRecords() {
    return [];
  }
  unobserve() {
    /**/
  }
}

class MockLocation {
  constructor() {
    this.ancestorOrigins = null;
    this.protocol = '';
    this.host = '';
    this.hostname = '';
    this.port = '';
    this.pathname = '';
    this.search = '';
    this.hash = '';
    this.username = '';
    this.password = '';
    this.origin = '';
    this._href = '';
  }
  get href() {
    return this._href;
  }
  set href(value) {
    const url = new URL(value, 'http://mockdoc.stenciljs.com');
    this._href = url.href;
    this.protocol = url.protocol;
    this.host = url.host;
    this.port = url.port;
    this.pathname = url.pathname;
    this.search = url.search;
    this.hash = url.hash;
    this.username = url.username;
    this.password = url.password;
    this.origin = url.origin;
  }
  assign(_url) {
    //
  }
  reload(_forcedReload) {
    //
  }
  replace(_url) {
    //
  }
  toString() {
    return this.href;
  }
}

class MockNavigator {
  constructor() {
    this.appCodeName = 'MockNavigator';
    this.appName = 'MockNavigator';
    this.appVersion = 'MockNavigator';
    this.platform = 'MockNavigator';
    this.userAgent = 'MockNavigator';
  }
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/API/Performance
 */
class MockPerformance {
  constructor() {
    this.timeOrigin = Date.now();
  }
  addEventListener() {
    //
  }
  clearMarks() {
    //
  }
  clearMeasures() {
    //
  }
  clearResourceTimings() {
    //
  }
  dispatchEvent() {
    return true;
  }
  getEntries() {
    return [];
  }
  getEntriesByName() {
    return [];
  }
  getEntriesByType() {
    return [];
  }
  mark() {
    //
  }
  measure() {
    //
  }
  get navigation() {
    return {};
  }
  now() {
    return Date.now() - this.timeOrigin;
  }
  get onresourcetimingbufferfull() {
    return null;
  }
  removeEventListener() {
    //
  }
  setResourceTimingBufferSize() {
    //
  }
  get timing() {
    return {};
  }
  toJSON() {
    //
  }
}
function resetPerformance(perf) {
  if (perf != null) {
    try {
      perf.timeOrigin = Date.now();
    }
    catch (e) { }
  }
}

class MockStorage {
  constructor() {
    this.items = new Map();
  }
  key(_value) {
    //
  }
  getItem(key) {
    key = String(key);
    if (this.items.has(key)) {
      return this.items.get(key);
    }
    return null;
  }
  setItem(key, value) {
    if (value == null) {
      value = 'null';
    }
    this.items.set(String(key), String(value));
  }
  removeItem(key) {
    this.items.delete(String(key));
  }
  clear() {
    this.items.clear();
  }
}

const nativeClearInterval = clearInterval;
const nativeClearTimeout = clearTimeout;
const nativeSetInterval = setInterval;
const nativeSetTimeout = setTimeout;
const nativeURL = URL;
class MockWindow {
  constructor(html = null) {
    if (html !== false) {
      this.document = new MockDocument(html, this);
    }
    else {
      this.document = null;
    }
    this.performance = new MockPerformance();
    this.customElements = new MockCustomElementRegistry(this);
    this.console = createConsole();
    resetWindowDefaults(this);
    resetWindowDimensions(this);
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  alert(msg) {
    if (this.console) {
      this.console.debug(msg);
    }
    else {
      console.debug(msg);
    }
  }
  blur() {
    /**/
  }
  cancelAnimationFrame(id) {
    this.__clearTimeout(id);
  }
  cancelIdleCallback(id) {
    this.__clearTimeout(id);
  }
  get CharacterData() {
    if (this.__charDataCstr == null) {
      const ownerDocument = this.document;
      this.__charDataCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct CharacterData');
        }
      };
    }
    return this.__charDataCstr;
  }
  set CharacterData(charDataCstr) {
    this.__charDataCstr = charDataCstr;
  }
  clearInterval(id) {
    this.__clearInterval(id);
  }
  clearTimeout(id) {
    this.__clearTimeout(id);
  }
  close() {
    resetWindow(this);
  }
  confirm() {
    return false;
  }
  get CSS() {
    return {
      supports: () => true,
    };
  }
  get Document() {
    if (this.__docCstr == null) {
      const win = this;
      this.__docCstr = class extends MockDocument {
        constructor() {
          super(false, win);
          throw new Error('Illegal constructor: cannot construct Document');
        }
      };
    }
    return this.__docCstr;
  }
  set Document(docCstr) {
    this.__docCstr = docCstr;
  }
  get DocumentFragment() {
    if (this.__docFragCstr == null) {
      const ownerDocument = this.document;
      this.__docFragCstr = class extends MockDocumentFragment {
        constructor() {
          super(ownerDocument);
          throw new Error('Illegal constructor: cannot construct DocumentFragment');
        }
      };
    }
    return this.__docFragCstr;
  }
  set DocumentFragment(docFragCstr) {
    this.__docFragCstr = docFragCstr;
  }
  get DocumentType() {
    if (this.__docTypeCstr == null) {
      const ownerDocument = this.document;
      this.__docTypeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct DocumentType');
        }
      };
    }
    return this.__docTypeCstr;
  }
  set DocumentType(docTypeCstr) {
    this.__docTypeCstr = docTypeCstr;
  }
  get DOMTokenList() {
    if (this.__domTokenListCstr == null) {
      this.__domTokenListCstr = class MockDOMTokenList {
      };
    }
    return this.__domTokenListCstr;
  }
  set DOMTokenList(domTokenListCstr) {
    this.__domTokenListCstr = domTokenListCstr;
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get Element() {
    if (this.__elementCstr == null) {
      const ownerDocument = this.document;
      this.__elementCstr = class extends MockElement {
        constructor() {
          super(ownerDocument, '');
          throw new Error('Illegal constructor: cannot construct Element');
        }
      };
    }
    return this.__elementCstr;
  }
  focus() {
    /**/
  }
  getComputedStyle(_) {
    return {
      cssText: '',
      length: 0,
      parentRule: null,
      getPropertyPriority() {
        return null;
      },
      getPropertyValue() {
        return '';
      },
      item() {
        return null;
      },
      removeProperty() {
        return null;
      },
      setProperty() {
        return null;
      },
    };
  }
  get globalThis() {
    return this;
  }
  get history() {
    if (this.__history == null) {
      this.__history = new MockHistory();
    }
    return this.__history;
  }
  set history(hsty) {
    this.__history = hsty;
  }
  get JSON() {
    return JSON;
  }
  get HTMLElement() {
    if (this.__htmlElementCstr == null) {
      const ownerDocument = this.document;
      this.__htmlElementCstr = class extends MockHTMLElement {
        constructor() {
          super(ownerDocument, '');
          const observedAttributes = this.constructor.observedAttributes;
          if (Array.isArray(observedAttributes) && typeof this.attributeChangedCallback === 'function') {
            observedAttributes.forEach(attrName => {
              const attrValue = this.getAttribute(attrName);
              if (attrValue != null) {
                this.attributeChangedCallback(attrName, null, attrValue);
              }
            });
          }
        }
      };
    }
    return this.__htmlElementCstr;
  }
  set HTMLElement(htmlElementCstr) {
    this.__htmlElementCstr = htmlElementCstr;
  }
  get IntersectionObserver() {
    return MockIntersectionObserver;
  }
  get localStorage() {
    if (this.__localStorage == null) {
      this.__localStorage = new MockStorage();
    }
    return this.__localStorage;
  }
  set localStorage(locStorage) {
    this.__localStorage = locStorage;
  }
  get location() {
    if (this.__location == null) {
      this.__location = new MockLocation();
    }
    return this.__location;
  }
  set location(val) {
    if (typeof val === 'string') {
      if (this.__location == null) {
        this.__location = new MockLocation();
      }
      this.__location.href = val;
    }
    else {
      this.__location = val;
    }
  }
  matchMedia() {
    return {
      matches: false,
    };
  }
  get Node() {
    if (this.__nodeCstr == null) {
      const ownerDocument = this.document;
      this.__nodeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct Node');
        }
      };
    }
    return this.__nodeCstr;
  }
  get NodeList() {
    if (this.__nodeListCstr == null) {
      const ownerDocument = this.document;
      this.__nodeListCstr = class extends MockNodeList {
        constructor() {
          super(ownerDocument, [], 0);
          throw new Error('Illegal constructor: cannot construct NodeList');
        }
      };
    }
    return this.__nodeListCstr;
  }
  get navigator() {
    if (this.__navigator == null) {
      this.__navigator = new MockNavigator();
    }
    return this.__navigator;
  }
  set navigator(nav) {
    this.__navigator = nav;
  }
  get parent() {
    return null;
  }
  prompt() {
    return '';
  }
  open() {
    return null;
  }
  get origin() {
    return this.location.origin;
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  requestAnimationFrame(callback) {
    return this.setTimeout(() => {
      callback(Date.now());
    }, 0);
  }
  requestIdleCallback(callback) {
    return this.setTimeout(() => {
      callback({
        didTimeout: false,
        timeRemaining: () => 0,
      });
    }, 0);
  }
  scroll(_x, _y) {
    /**/
  }
  scrollBy(_x, _y) {
    /**/
  }
  scrollTo(_x, _y) {
    /**/
  }
  get self() {
    return this;
  }
  get sessionStorage() {
    if (this.__sessionStorage == null) {
      this.__sessionStorage = new MockStorage();
    }
    return this.__sessionStorage;
  }
  set sessionStorage(locStorage) {
    this.__sessionStorage = locStorage;
  }
  setInterval(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    if (this.__allowInterval) {
      const intervalId = this.__setInterval(() => {
        this.__timeouts.delete(intervalId);
        try {
          callback(...args);
        }
        catch (e) {
          if (this.console) {
            this.console.error(e);
          }
          else {
            console.error(e);
          }
        }
      }, ms);
      this.__timeouts.add(intervalId);
      return intervalId;
    }
    const timeoutId = this.__setTimeout(() => {
      this.__timeouts.delete(timeoutId);
      try {
        callback(...args);
      }
      catch (e) {
        if (this.console) {
          this.console.error(e);
        }
        else {
          console.error(e);
        }
      }
    }, ms);
    this.__timeouts.add(timeoutId);
    return timeoutId;
  }
  setTimeout(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    const timeoutId = this.__setTimeout(() => {
      this.__timeouts.delete(timeoutId);
      try {
        callback(...args);
      }
      catch (e) {
        if (this.console) {
          this.console.error(e);
        }
        else {
          console.error(e);
        }
      }
    }, ms);
    this.__timeouts.add(timeoutId);
    return timeoutId;
  }
  get top() {
    return this;
  }
  get window() {
    return this;
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
}
addGlobalsToWindowPrototype(MockWindow.prototype);
function resetWindowDefaults(win) {
  win.__clearInterval = nativeClearInterval;
  win.__clearTimeout = nativeClearTimeout;
  win.__setInterval = nativeSetInterval;
  win.__setTimeout = nativeSetTimeout;
  win.__maxTimeout = 30000;
  win.__allowInterval = true;
  win.URL = nativeURL;
}
function cloneWindow(srcWin, opts = {}) {
  if (srcWin == null) {
    return null;
  }
  const clonedWin = new MockWindow(false);
  if (!opts.customElementProxy) {
    srcWin.customElements = null;
  }
  if (srcWin.document != null) {
    const clonedDoc = new MockDocument(false, clonedWin);
    clonedWin.document = clonedDoc;
    clonedDoc.documentElement = srcWin.document.documentElement.cloneNode(true);
  }
  else {
    clonedWin.document = new MockDocument(null, clonedWin);
  }
  return clonedWin;
}
function cloneDocument(srcDoc) {
  if (srcDoc == null) {
    return null;
  }
  const dstWin = cloneWindow(srcDoc.defaultView);
  return dstWin.document;
}
/**
 * Constrain setTimeout() to 1ms, but still async. Also
 * only allow setInterval() to fire once, also constrained to 1ms.
 */
function constrainTimeouts(win) {
  win.__allowInterval = false;
  win.__maxTimeout = 0;
}
function resetWindow(win) {
  if (win != null) {
    if (win.__timeouts) {
      win.__timeouts.forEach(timeoutId => {
        nativeClearInterval(timeoutId);
        nativeClearTimeout(timeoutId);
      });
      win.__timeouts.clear();
    }
    if (win.customElements && win.customElements.clear) {
      win.customElements.clear();
    }
    resetDocument(win.document);
    resetPerformance(win.performance);
    for (const key in win) {
      if (win.hasOwnProperty(key) && key !== 'document' && key !== 'performance' && key !== 'customElements') {
        delete win[key];
      }
    }
    resetWindowDefaults(win);
    resetWindowDimensions(win);
    resetEventListeners(win);
    if (win.document != null) {
      try {
        win.document.defaultView = win;
      }
      catch (e) { }
    }
  }
}
function resetWindowDimensions(win) {
  try {
    win.devicePixelRatio = 1;
    win.innerHeight = 768;
    win.innerWidth = 1366;
    win.pageXOffset = 0;
    win.pageYOffset = 0;
    win.screenLeft = 0;
    win.screenTop = 0;
    win.screenX = 0;
    win.screenY = 0;
    win.scrollX = 0;
    win.scrollY = 0;
    win.screen = {
      availHeight: win.innerHeight,
      availLeft: 0,
      availTop: 0,
      availWidth: win.innerWidth,
      colorDepth: 24,
      height: win.innerHeight,
      keepAwake: false,
      orientation: {
        angle: 0,
        type: 'portrait-primary',
      },
      pixelDepth: 24,
      width: win.innerWidth,
    };
  }
  catch (e) { }
}

class MockDocument extends MockHTMLElement {
  constructor(html = null, win = null) {
    super(null, null);
    this.nodeName = "#document" /* DOCUMENT_NODE */;
    this.nodeType = 9 /* DOCUMENT_NODE */;
    this.defaultView = win;
    this.cookie = '';
    this.referrer = '';
    this.appendChild(this.createDocumentTypeNode());
    if (typeof html === 'string') {
      const parsedDoc = parseDocumentUtil(this, html);
      const documentElement = parsedDoc.children.find(elm => elm.nodeName === 'HTML');
      if (documentElement != null) {
        this.appendChild(documentElement);
        setOwnerDocument(documentElement, this);
      }
    }
    else if (html !== false) {
      const documentElement = new MockHTMLElement(this, 'html');
      this.appendChild(documentElement);
      documentElement.appendChild(new MockHTMLElement(this, 'head'));
      documentElement.appendChild(new MockHTMLElement(this, 'body'));
    }
  }
  get location() {
    if (this.defaultView != null) {
      return this.defaultView.location;
    }
    return null;
  }
  set location(val) {
    if (this.defaultView != null) {
      this.defaultView.location = val;
    }
  }
  get baseURI() {
    const baseNode = this.head.childNodes.find(node => node.nodeName === 'BASE');
    if (baseNode) {
      return baseNode.href;
    }
    return this.URL;
  }
  get URL() {
    return this.location.href;
  }
  get styleSheets() {
    return this.querySelectorAll('style');
  }
  get scripts() {
    return this.querySelectorAll('script');
  }
  get forms() {
    return this.querySelectorAll('form');
  }
  get images() {
    return this.querySelectorAll('img');
  }
  get scrollingElement() {
    return this.documentElement;
  }
  get documentElement() {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeName === 'HTML') {
        return this.childNodes[i];
      }
    }
    const documentElement = new MockHTMLElement(this, 'html');
    this.appendChild(documentElement);
    return documentElement;
  }
  set documentElement(documentElement) {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeType !== 10 /* DOCUMENT_TYPE_NODE */) {
        this.childNodes[i].remove();
      }
    }
    if (documentElement != null) {
      this.appendChild(documentElement);
      setOwnerDocument(documentElement, this);
    }
  }
  get head() {
    const documentElement = this.documentElement;
    for (let i = 0; i < documentElement.childNodes.length; i++) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        return documentElement.childNodes[i];
      }
    }
    const head = new MockHTMLElement(this, 'head');
    documentElement.insertBefore(head, documentElement.firstChild);
    return head;
  }
  set head(head) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        documentElement.childNodes[i].remove();
      }
    }
    if (head != null) {
      documentElement.insertBefore(head, documentElement.firstChild);
      setOwnerDocument(head, this);
    }
  }
  get body() {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        return documentElement.childNodes[i];
      }
    }
    const body = new MockHTMLElement(this, 'body');
    documentElement.appendChild(body);
    return body;
  }
  set body(body) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        documentElement.childNodes[i].remove();
      }
    }
    if (body != null) {
      documentElement.appendChild(body);
      setOwnerDocument(body, this);
    }
  }
  appendChild(newNode) {
    newNode.remove();
    newNode.parentNode = this;
    this.childNodes.push(newNode);
    return newNode;
  }
  createComment(data) {
    return new MockComment(this, data);
  }
  createAttribute(attrName) {
    return new MockAttr(attrName.toLowerCase(), '');
  }
  createAttributeNS(namespaceURI, attrName) {
    return new MockAttr(attrName, '', namespaceURI);
  }
  createElement(tagName) {
    if (tagName === "#document" /* DOCUMENT_NODE */) {
      const doc = new MockDocument(false);
      doc.nodeName = tagName;
      doc.parentNode = null;
      return doc;
    }
    return createElement(this, tagName);
  }
  createElementNS(namespaceURI, tagName) {
    const elmNs = createElementNS(this, namespaceURI, tagName);
    elmNs.namespaceURI = namespaceURI;
    return elmNs;
  }
  createTextNode(text) {
    return new MockTextNode(this, text);
  }
  createDocumentFragment() {
    return new MockDocumentFragment(this);
  }
  createDocumentTypeNode() {
    return new MockDocumentTypeNode(this);
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  getElementsByName(elmName) {
    return getElementsByName(this, elmName.toLowerCase());
  }
  get title() {
    const title = this.head.childNodes.find(elm => elm.nodeName === 'TITLE');
    if (title != null) {
      return title.textContent;
    }
    return '';
  }
  set title(value) {
    const head = this.head;
    let title = head.childNodes.find(elm => elm.nodeName === 'TITLE');
    if (title == null) {
      title = this.createElement('title');
      head.appendChild(title);
    }
    title.textContent = value;
  }
}
function createDocument(html = null) {
  return new MockWindow(html).document;
}
function createFragment(html) {
  return parseHtmlToFragment(html, null);
}
function resetDocument(doc) {
  if (doc != null) {
    resetEventListeners(doc);
    const documentElement = doc.documentElement;
    if (documentElement != null) {
      resetElement(documentElement);
      for (let i = 0, ii = documentElement.childNodes.length; i < ii; i++) {
        const childNode = documentElement.childNodes[i];
        resetElement(childNode);
        childNode.childNodes.length = 0;
      }
    }
    for (const key in doc) {
      if (doc.hasOwnProperty(key) && !DOC_KEY_KEEPERS.has(key)) {
        delete doc[key];
      }
    }
    try {
      doc.nodeName = "#document" /* DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.nodeType = 9 /* DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.cookie = '';
    }
    catch (e) { }
    try {
      doc.referrer = '';
    }
    catch (e) { }
  }
}
const DOC_KEY_KEEPERS = new Set(['nodeName', 'nodeType', 'nodeValue', 'ownerDocument', 'parentNode', 'childNodes', '_shadowRoot']);
function getElementById(elm, id) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.id === id) {
      return childElm;
    }
    const childElmFound = getElementById(childElm, id);
    if (childElmFound != null) {
      return childElmFound;
    }
  }
  return null;
}
function getElementsByName(elm, elmName, foundElms = []) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.name && childElm.name.toLowerCase() === elmName) {
      foundElms.push(childElm);
    }
    getElementsByName(childElm, elmName, foundElms);
  }
  return foundElms;
}
function setOwnerDocument(elm, ownerDocument) {
  for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
    elm.childNodes[i].ownerDocument = ownerDocument;
    if (elm.childNodes[i].nodeType === 1 /* ELEMENT_NODE */) {
      setOwnerDocument(elm.childNodes[i], ownerDocument);
    }
  }
}

function hydrateFactory($stencilWindow, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve) {
  var globalThis = $stencilWindow;
  var self = $stencilWindow;
  var top = $stencilWindow;
  var parent = $stencilWindow;

  var addEventListener = $stencilWindow.addEventListener.bind($stencilWindow);
  var alert = $stencilWindow.alert.bind($stencilWindow);
  var blur = $stencilWindow.blur.bind($stencilWindow);
  var cancelAnimationFrame = $stencilWindow.cancelAnimationFrame.bind($stencilWindow);
  var cancelIdleCallback = $stencilWindow.cancelIdleCallback.bind($stencilWindow);
  var clearInterval = $stencilWindow.clearInterval.bind($stencilWindow);
  var clearTimeout = $stencilWindow.clearTimeout.bind($stencilWindow);
  var close = () => {};
  var confirm = $stencilWindow.confirm.bind($stencilWindow);
  var dispatchEvent = $stencilWindow.dispatchEvent.bind($stencilWindow);
  var focus = $stencilWindow.focus.bind($stencilWindow);
  var getComputedStyle = $stencilWindow.getComputedStyle.bind($stencilWindow);
  var matchMedia = $stencilWindow.matchMedia.bind($stencilWindow);
  var open = $stencilWindow.open.bind($stencilWindow);
  var prompt = $stencilWindow.prompt.bind($stencilWindow);
  var removeEventListener = $stencilWindow.removeEventListener.bind($stencilWindow);
  var requestAnimationFrame = $stencilWindow.requestAnimationFrame.bind($stencilWindow);
  var requestIdleCallback = $stencilWindow.requestIdleCallback.bind($stencilWindow);
  var setInterval = $stencilWindow.setInterval.bind($stencilWindow);
  var setTimeout = $stencilWindow.setTimeout.bind($stencilWindow);

  var CharacterData = $stencilWindow.CharacterData;
  var CSS = $stencilWindow.CSS;
  var CustomEvent = $stencilWindow.CustomEvent;
  var Document = $stencilWindow.Document;
  var DocumentFragment = $stencilWindow.DocumentFragment;
  var DocumentType = $stencilWindow.DocumentType;
  var DOMTokenList = $stencilWindow.DOMTokenList;
  var Element = $stencilWindow.Element;
  var Event = $stencilWindow.Event;
  var HTMLElement = $stencilWindow.HTMLElement;
  var IntersectionObserver = $stencilWindow.IntersectionObserver;
  var KeyboardEvent = $stencilWindow.KeyboardEvent;
  var MouseEvent = $stencilWindow.MouseEvent;
  var Node = $stencilWindow.Node;
  var NodeList = $stencilWindow.NodeList;
  var URL = $stencilWindow.URL;

  var console = $stencilWindow.console;
  var customElements = $stencilWindow.customElements;
  var history = $stencilWindow.history;
  var localStorage = $stencilWindow.localStorage;
  var location = $stencilWindow.location;
  var navigator = $stencilWindow.navigator;
  var performance = $stencilWindow.performance;
  var sessionStorage = $stencilWindow.sessionStorage;

  var devicePixelRatio = $stencilWindow.devicePixelRatio;
  var innerHeight = $stencilWindow.innerHeight;
  var innerWidth = $stencilWindow.innerWidth;
  var origin = $stencilWindow.origin;
  var pageXOffset = $stencilWindow.pageXOffset;
  var pageYOffset = $stencilWindow.pageYOffset;
  var screen = $stencilWindow.screen;
  var screenLeft = $stencilWindow.screenLeft;
  var screenTop = $stencilWindow.screenTop;
  var screenX = $stencilWindow.screenX;
  var screenY = $stencilWindow.screenY;
  var scrollX = $stencilWindow.scrollX;
  var scrollY = $stencilWindow.scrollY;
  var exports = {};

  function hydrateAppClosure($stencilWindow) {
  const window = $stencilWindow;
  const document = $stencilWindow.document;
  /*hydrateAppClosure start*/


const NAMESPACE = 'se-components';

/*
 Stencil Hydrate Platform v1.13.0 | MIT Licensed | https://stenciljs.com
 */

const addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {
    if ( listeners) {
        listeners.map(([flags, name, method]) => {
            const target =  getHostListenerTarget(elm, flags) ;
            const handler = hostListenerProxy(hostRef, method);
            const opts = hostListenerOpts(flags);
            plt.ael(target, name, handler, opts);
            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));
        });
    }
};
const hostListenerProxy = (hostRef, methodName) => (ev) => {
    {
        if (hostRef.$flags$ & 256 /* isListenReady */) {
            // instance is ready, let's call it's member method for this event
            hostRef.$lazyInstance$[methodName](ev);
        }
        else {
            (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);
        }
    }
};
const getHostListenerTarget = (elm, flags) => {
    if ( flags & 4 /* TargetDocument */)
        return doc;
    if ( flags & 8 /* TargetWindow */)
        return win;
    return elm;
};
// prettier-ignore
const hostListenerOpts = (flags) =>  (flags & 2 /* Capture */) !== 0;

const CONTENT_REF_ID = 'r';
const ORG_LOCATION_ID = 'o';
const SLOT_NODE_ID = 's';
const TEXT_NODE_ID = 't';
const HYDRATE_ID = 's-id';
const HYDRATED_STYLE_ID = 'sty-id';
const HYDRATE_CHILD_ID = 'c-id';
const XLINK_NS = 'http://www.w3.org/1999/xlink';
const createTime = (fnName, tagName = '') => {
    {
        return () => {
            return;
        };
    }
};
const uniqueTime = (key, measureText) => {
    {
        return () => {
            return;
        };
    }
};

const rootAppliedStyles = new WeakMap();
const registerStyle = (scopeId, cssText, allowCS) => {
    let style = styles.get(scopeId);
    {
        style = cssText;
    }
    styles.set(scopeId, style);
};
const addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {
    let scopeId =  getScopeId(cmpMeta.$tagName$);
    let style = styles.get(scopeId);
    // if an element is NOT connected then getRootNode() will return the wrong root node
    // so the fallback is to always use the document for the root node in those cases
    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;
    if (style) {
        if (typeof style === 'string') {
            styleContainerNode = styleContainerNode.head || styleContainerNode;
            let appliedStyles = rootAppliedStyles.get(styleContainerNode);
            let styleElm;
            if (!appliedStyles) {
                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));
            }
            if (!appliedStyles.has(scopeId)) {
                if ( styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId}"]`))) {
                    // This is only happening on native shadow-dom, do not needs CSS var shim
                    styleElm.innerHTML = style;
                }
                else {
                    {
                        styleElm = doc.createElement('style');
                        styleElm.innerHTML = style;
                    }
                    {
                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);
                    }
                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));
                }
                if (appliedStyles) {
                    appliedStyles.add(scopeId);
                }
            }
        }
    }
    return scopeId;
};
const attachStyles = (hostRef) => {
    const cmpMeta = hostRef.$cmpMeta$;
    const elm = hostRef.$hostElement$;
    const flags = cmpMeta.$flags$;
    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);
    const scopeId = addStyle( elm.getRootNode(), cmpMeta);
    if ( flags & 10 /* needsScopedEncapsulation */) {
        // only required when we're NOT using native shadow dom (slot)
        // or this browser doesn't support native shadow dom
        // and this host element was NOT created with SSR
        // let's pick out the inner content for slot projection
        // create a node to represent where the original
        // content was first placed, which is useful later on
        // DOM WRITE!!
        elm['s-sc'] = scopeId;
        elm.classList.add(scopeId + '-h');
    }
    endAttachStyles();
};
const getScopeId = (tagName, mode) => 'sc-' + ( tagName);

/**
 * Default style mode id
 */
/**
 * Reusable empty obj/array
 * Don't add values to these!!
 */
const EMPTY_OBJ = {};
/**
 * Namespaces
 */
const SVG_NS = 'http://www.w3.org/2000/svg';
const HTML_NS = 'http://www.w3.org/1999/xhtml';

const isDef = (v) => v != null;
const isComplexType = (o) => {
    // https://jsperf.com/typeof-fn-object/5
    o = typeof o;
    return o === 'object' || o === 'function';
};

/**
 * Production h() function based on Preact by
 * Jason Miller (@developit)
 * Licensed under the MIT License
 * https://github.com/developit/preact/blob/master/LICENSE
 *
 * Modified for Stencil's compiler and vdom
 */
// const stack: any[] = [];
// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;
// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;
const h = (nodeName, vnodeData, ...children) => {
    let child = null;
    let key = null;
    let slotName = null;
    let simple = false;
    let lastSimple = false;
    let vNodeChildren = [];
    const walk = (c) => {
        for (let i = 0; i < c.length; i++) {
            child = c[i];
            if (Array.isArray(child)) {
                walk(child);
            }
            else if (child != null && typeof child !== 'boolean') {
                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {
                    child = String(child);
                }
                if (simple && lastSimple) {
                    // If the previous child was simple (string), we merge both
                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;
                }
                else {
                    // Append a new vNode, if it's text, we create a text vNode
                    vNodeChildren.push(simple ? newVNode(null, child) : child);
                }
                lastSimple = simple;
            }
        }
    };
    walk(children);
    if (vnodeData) {
        // normalize class / classname attributes
        if ( vnodeData.key) {
            key = vnodeData.key;
        }
        if ( vnodeData.name) {
            slotName = vnodeData.name;
        }
        {
            const classData = vnodeData.className || vnodeData.class;
            if (classData) {
                vnodeData.class =
                    typeof classData !== 'object'
                        ? classData
                        : Object.keys(classData)
                            .filter(k => classData[k])
                            .join(' ');
            }
        }
    }
    if ( typeof nodeName === 'function') {
        // nodeName is a functional component
        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);
    }
    const vnode = newVNode(nodeName, null);
    vnode.$attrs$ = vnodeData;
    if (vNodeChildren.length > 0) {
        vnode.$children$ = vNodeChildren;
    }
    {
        vnode.$key$ = key;
    }
    {
        vnode.$name$ = slotName;
    }
    return vnode;
};
const newVNode = (tag, text) => {
    const vnode = {
        $flags$: 0,
        $tag$: tag,
        $text$: text,
        $elm$: null,
        $children$: null,
    };
    {
        vnode.$attrs$ = null;
    }
    {
        vnode.$key$ = null;
    }
    {
        vnode.$name$ = null;
    }
    return vnode;
};
const Host = {};
const isHost = (node) => node && node.$tag$ === Host;
const vdomFnUtils = {
    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),
    map: (children, cb) => children
        .map(convertToPublic)
        .map(cb)
        .map(convertToPrivate),
};
const convertToPublic = (node) => ({
    vattrs: node.$attrs$,
    vchildren: node.$children$,
    vkey: node.$key$,
    vname: node.$name$,
    vtag: node.$tag$,
    vtext: node.$text$,
});
const convertToPrivate = (node) => {
    const vnode = newVNode(node.vtag, node.vtext);
    vnode.$attrs$ = node.vattrs;
    vnode.$children$ = node.vchildren;
    vnode.$key$ = node.vkey;
    vnode.$name$ = node.vname;
    return vnode;
};

/**
 * Production setAccessor() function based on Preact by
 * Jason Miller (@developit)
 * Licensed under the MIT License
 * https://github.com/developit/preact/blob/master/LICENSE
 *
 * Modified for Stencil's compiler and vdom
 */
const setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {
    if (oldValue !== newValue) {
        let isProp = isMemberInElement(elm, memberName);
        let ln = memberName.toLowerCase();
        if ( memberName === 'class') {
            const classList = elm.classList;
            const oldClasses = parseClassList(oldValue);
            const newClasses = parseClassList(newValue);
            classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));
            classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));
        }
        else if ( memberName === 'style') {
            // update style attribute, css properties and values
            {
                for (const prop in oldValue) {
                    if (!newValue || newValue[prop] == null) {
                        {
                            elm.style[prop] = '';
                        }
                    }
                }
            }
            for (const prop in newValue) {
                if (!oldValue || newValue[prop] !== oldValue[prop]) {
                    {
                        elm.style[prop] = newValue[prop];
                    }
                }
            }
        }
        else if ( memberName === 'key') ;
        else if ( memberName === 'ref') {
            // minifier will clean this up
            if (newValue) {
                newValue(elm);
            }
        }
        else if ( ( !isProp ) && memberName[0] === 'o' && memberName[1] === 'n') {
            // Event Handlers
            // so if the member name starts with "on" and the 3rd characters is
            // a capital letter, and it's not already a member on the element,
            // then we're assuming it's an event listener
            if (memberName[2] === '-') {
                // on- prefixed events
                // allows to be explicit about the dom event to listen without any magic
                // under the hood:
                // <my-cmp on-click> // listens for "click"
                // <my-cmp on-Click> // listens for "Click"
                // <my-cmp on-ionChange> // listens for "ionChange"
                // <my-cmp on-EVENTS> // listens for "EVENTS"
                memberName = memberName.slice(3);
            }
            else if (isMemberInElement(win, ln)) {
                // standard event
                // the JSX attribute could have been "onMouseOver" and the
                // member name "onmouseover" is on the window's prototype
                // so let's add the listener "mouseover", which is all lowercased
                memberName = ln.slice(2);
            }
            else {
                // custom event
                // the JSX attribute could have been "onMyCustomEvent"
                // so let's trim off the "on" prefix and lowercase the first character
                // and add the listener "myCustomEvent"
                // except for the first character, we keep the event name case
                memberName = ln[2] + memberName.slice(3);
            }
            if (oldValue) {
                plt.rel(elm, memberName, oldValue, false);
            }
            if (newValue) {
                plt.ael(elm, memberName, newValue, false);
            }
        }
        else {
            // Set property if it exists and it's not a SVG
            const isComplex = isComplexType(newValue);
            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {
                try {
                    if (!elm.tagName.includes('-')) {
                        let n = newValue == null ? '' : newValue;
                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued
                        if (memberName === 'list') {
                            isProp = false;
                            // tslint:disable-next-line: triple-equals
                        }
                        else if (oldValue == null || elm[memberName] != n) {
                            elm[memberName] = n;
                        }
                    }
                    else {
                        elm[memberName] = newValue;
                    }
                }
                catch (e) { }
            }
            /**
             * Need to manually update attribute if:
             * - memberName is not an attribute
             * - if we are rendering the host element in order to reflect attribute
             * - if it's a SVG, since properties might not work in <svg>
             * - if the newValue is null/undefined or 'false'.
             */
            let xlink = false;
            {
                if (ln !== (ln = ln.replace(/^xlink\:?/, ''))) {
                    memberName = ln;
                    xlink = true;
                }
            }
            if (newValue == null || newValue === false) {
                if ( xlink) {
                    elm.removeAttributeNS(XLINK_NS, memberName);
                }
                else {
                    elm.removeAttribute(memberName);
                }
            }
            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {
                newValue = newValue === true ? '' : newValue;
                if ( xlink) {
                    elm.setAttributeNS(XLINK_NS, memberName, newValue);
                }
                else {
                    elm.setAttribute(memberName, newValue);
                }
            }
        }
    }
};
const parseClassListRegex = /\s/;
const parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));

const updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {
    // if the element passed in is a shadow root, which is a document fragment
    // then we want to be adding attrs/props to the shadow root's "host" element
    // if it's not a shadow root, then we add attrs/props to the same element
    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;
    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;
    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;
    {
        // remove attributes no longer present on the vnode by setting them to undefined
        for (memberName in oldVnodeAttrs) {
            if (!(memberName in newVnodeAttrs)) {
                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);
            }
        }
    }
    // add new & update changed attributes
    for (memberName in newVnodeAttrs) {
        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);
    }
};

let scopeId;
let contentRef;
let hostTagName;
let useNativeShadowDom = false;
let checkSlotFallbackVisibility = false;
let checkSlotRelocate = false;
let isSvgMode = false;
const createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {
    // tslint:disable-next-line: prefer-const
    let newVNode = newParentVNode.$children$[childIndex];
    let i = 0;
    let elm;
    let childNode;
    let oldVNode;
    if ( !useNativeShadowDom) {
        // remember for later we need to check to relocate nodes
        checkSlotRelocate = true;
        if (newVNode.$tag$ === 'slot') {
            if (scopeId) {
                // scoped css needs to add its scoped id to the parent element
                parentElm.classList.add(scopeId + '-s');
            }
            newVNode.$flags$ |= newVNode.$children$
                ? // slot element has fallback content
                    2 /* isSlotFallback */
                : // slot element does not have fallback content
                    1 /* isSlotReference */;
        }
    }
    if ( newVNode.$text$ !== null) {
        // create text node
        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);
    }
    else if ( newVNode.$flags$ & 1 /* isSlotReference */) {
        // create a slot reference node
        elm = newVNode.$elm$ =  slotReferenceDebugNode(newVNode) ;
    }
    else {
        if ( !isSvgMode) {
            isSvgMode = newVNode.$tag$ === 'svg';
        }
        // create element
        elm = newVNode.$elm$ = ( doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS,  newVNode.$flags$ & 2 /* isSlotFallback */ ? 'slot-fb' : newVNode.$tag$)
            );
        if ( isSvgMode && newVNode.$tag$ === 'foreignObject') {
            isSvgMode = false;
        }
        // add css classes, attrs, props, listeners, etc.
        {
            updateElement(null, newVNode, isSvgMode);
        }
        if ( isDef(scopeId) && elm['s-si'] !== scopeId) {
            // if there is a scopeId and this is the initial render
            // then let's add the scopeId as a css class
            elm.classList.add((elm['s-si'] = scopeId));
        }
        if (newVNode.$children$) {
            for (i = 0; i < newVNode.$children$.length; ++i) {
                // create the node
                childNode = createElm(oldParentVNode, newVNode, i, elm);
                // return node could have been null
                if (childNode) {
                    // append our new node
                    elm.appendChild(childNode);
                }
            }
        }
        {
            if (newVNode.$tag$ === 'svg') {
                // Only reset the SVG context when we're exiting <svg> element
                isSvgMode = false;
            }
            else if (elm.tagName === 'foreignObject') {
                // Reenter SVG context when we're exiting <foreignObject> element
                isSvgMode = true;
            }
        }
    }
    {
        elm['s-hn'] = hostTagName;
        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {
            // remember the content reference comment
            elm['s-sr'] = true;
            // remember the content reference comment
            elm['s-cr'] = contentRef;
            // remember the slot name, or empty string for default slot
            elm['s-sn'] = newVNode.$name$ || '';
            // check if we've got an old vnode for this slot
            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];
            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {
                // we've got an old slot vnode and the wrapper is being replaced
                // so let's move the old slot content back to it's original location
                putBackInOriginalLocation(oldParentVNode.$elm$, false);
            }
        }
    }
    return elm;
};
const putBackInOriginalLocation = (parentElm, recursive) => {
    plt.$flags$ |= 1 /* isTmpDisconnected */;
    const oldSlotChildNodes = parentElm.childNodes;
    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {
        const childNode = oldSlotChildNodes[i];
        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {
            // // this child node in the old element is from another component
            // // remove this node from the old slot's parent
            // childNode.remove();
            // and relocate it back to it's original location
            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));
            // remove the old original location comment entirely
            // later on the patch function will know what to do
            // and move this to the correct spot in need be
            childNode['s-ol'].remove();
            childNode['s-ol'] = undefined;
            checkSlotRelocate = true;
        }
        if (recursive) {
            putBackInOriginalLocation(childNode, recursive);
        }
    }
    plt.$flags$ &= ~1 /* isTmpDisconnected */;
};
const addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {
    let containerElm = (( parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);
    let childNode;
    if ( containerElm.shadowRoot && containerElm.tagName === hostTagName) {
        containerElm = containerElm.shadowRoot;
    }
    for (; startIdx <= endIdx; ++startIdx) {
        if (vnodes[startIdx]) {
            childNode = createElm(null, parentVNode, startIdx, parentElm);
            if (childNode) {
                vnodes[startIdx].$elm$ = childNode;
                containerElm.insertBefore(childNode,  referenceNode(before) );
            }
        }
    }
};
const removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {
    for (; startIdx <= endIdx; ++startIdx) {
        if ((vnode = vnodes[startIdx])) {
            elm = vnode.$elm$;
            callNodeRefs(vnode);
            {
                // we're removing this element
                // so it's possible we need to show slot fallback content now
                checkSlotFallbackVisibility = true;
                if (elm['s-ol']) {
                    // remove the original location comment
                    elm['s-ol'].remove();
                }
                else {
                    // it's possible that child nodes of the node
                    // that's being removed are slot nodes
                    putBackInOriginalLocation(elm, true);
                }
            }
            // remove the vnode's element from the dom
            elm.remove();
        }
    }
};
const updateChildren = (parentElm, oldCh, newVNode, newCh) => {
    let oldStartIdx = 0;
    let newStartIdx = 0;
    let idxInOld = 0;
    let i = 0;
    let oldEndIdx = oldCh.length - 1;
    let oldStartVnode = oldCh[0];
    let oldEndVnode = oldCh[oldEndIdx];
    let newEndIdx = newCh.length - 1;
    let newStartVnode = newCh[0];
    let newEndVnode = newCh[newEndIdx];
    let node;
    let elmToMove;
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (oldStartVnode == null) {
            // Vnode might have been moved left
            oldStartVnode = oldCh[++oldStartIdx];
        }
        else if (oldEndVnode == null) {
            oldEndVnode = oldCh[--oldEndIdx];
        }
        else if (newStartVnode == null) {
            newStartVnode = newCh[++newStartIdx];
        }
        else if (newEndVnode == null) {
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldStartVnode, newStartVnode)) {
            patch(oldStartVnode, newStartVnode);
            oldStartVnode = oldCh[++oldStartIdx];
            newStartVnode = newCh[++newStartIdx];
        }
        else if (isSameVnode(oldEndVnode, newEndVnode)) {
            patch(oldEndVnode, newEndVnode);
            oldEndVnode = oldCh[--oldEndIdx];
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldStartVnode, newEndVnode)) {
            // Vnode moved right
            if ( (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {
                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);
            }
            patch(oldStartVnode, newEndVnode);
            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);
            oldStartVnode = oldCh[++oldStartIdx];
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldEndVnode, newStartVnode)) {
            // Vnode moved left
            if ( (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {
                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);
            }
            patch(oldEndVnode, newStartVnode);
            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);
            oldEndVnode = oldCh[--oldEndIdx];
            newStartVnode = newCh[++newStartIdx];
        }
        else {
            // createKeyToOldIdx
            idxInOld = -1;
            {
                for (i = oldStartIdx; i <= oldEndIdx; ++i) {
                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {
                        idxInOld = i;
                        break;
                    }
                }
            }
            if ( idxInOld >= 0) {
                elmToMove = oldCh[idxInOld];
                if (elmToMove.$tag$ !== newStartVnode.$tag$) {
                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);
                }
                else {
                    patch(elmToMove, newStartVnode);
                    oldCh[idxInOld] = undefined;
                    node = elmToMove.$elm$;
                }
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                // new element
                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);
                newStartVnode = newCh[++newStartIdx];
            }
            if (node) {
                {
                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));
                }
            }
        }
    }
    if (oldStartIdx > oldEndIdx) {
        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);
    }
    else if ( newStartIdx > newEndIdx) {
        removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
};
const isSameVnode = (vnode1, vnode2) => {
    // compare if two vnode to see if they're "technically" the same
    // need to have the same element tag, and same key to be the same
    if (vnode1.$tag$ === vnode2.$tag$) {
        if ( vnode1.$tag$ === 'slot') {
            return vnode1.$name$ === vnode2.$name$;
        }
        {
            return vnode1.$key$ === vnode2.$key$;
        }
    }
    return false;
};
const referenceNode = (node) => {
    // this node was relocated to a new location in the dom
    // because of some other component's slot
    // but we still have an html comment in place of where
    // it's original location was according to it's original vdom
    return (node && node['s-ol']) || node;
};
const parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;
const patch = (oldVNode, newVNode) => {
    const elm = (newVNode.$elm$ = oldVNode.$elm$);
    const oldChildren = oldVNode.$children$;
    const newChildren = newVNode.$children$;
    const tag = newVNode.$tag$;
    const text = newVNode.$text$;
    let defaultHolder;
    if ( text === null) {
        {
            // test if we're rendering an svg element, or still rendering nodes inside of one
            // only add this to the when the compiler sees we're using an svg somewhere
            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;
        }
        // element node
        {
            if ( tag === 'slot') ;
            else {
                // either this is the first render of an element OR it's an update
                // AND we already know it's possible it could have changed
                // this updates the element's css classes, attrs, props, listeners, etc.
                updateElement(oldVNode, newVNode, isSvgMode);
            }
        }
        if ( oldChildren !== null && newChildren !== null) {
            // looks like there's child vnodes for both the old and new vnodes
            updateChildren(elm, oldChildren, newVNode, newChildren);
        }
        else if (newChildren !== null) {
            // no old child vnodes, but there are new child vnodes to add
            if ( oldVNode.$text$ !== null) {
                // the old vnode was text, so be sure to clear it out
                elm.textContent = '';
            }
            // add the new vnode children
            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);
        }
        else if ( oldChildren !== null) {
            // no new child vnodes, but there are old child vnodes to remove
            removeVnodes(oldChildren, 0, oldChildren.length - 1);
        }
        if ( isSvgMode && tag === 'svg') {
            isSvgMode = false;
        }
    }
    else if ( (defaultHolder = elm['s-cr'])) {
        // this element has slotted content
        defaultHolder.parentNode.textContent = text;
    }
    else if ( oldVNode.$text$ !== text) {
        // update the text content for the text only vnode
        // and also only if the text is different than before
        elm.data = text;
    }
};
const updateFallbackSlotVisibility = (elm) => {
    // tslint:disable-next-line: prefer-const
    let childNodes = elm.childNodes;
    let childNode;
    let i;
    let ilen;
    let j;
    let slotNameAttr;
    let nodeType;
    for (i = 0, ilen = childNodes.length; i < ilen; i++) {
        childNode = childNodes[i];
        if (childNode.nodeType === 1 /* ElementNode */) {
            if (childNode['s-sr']) {
                // this is a slot fallback node
                // get the slot name for this slot reference node
                slotNameAttr = childNode['s-sn'];
                // by default always show a fallback slot node
                // then hide it if there are other slots in the light dom
                childNode.hidden = false;
                for (j = 0; j < ilen; j++) {
                    if (childNodes[j]['s-hn'] !== childNode['s-hn']) {
                        // this sibling node is from a different component
                        nodeType = childNodes[j].nodeType;
                        if (slotNameAttr !== '') {
                            // this is a named fallback slot node
                            if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {
                                childNode.hidden = true;
                                break;
                            }
                        }
                        else {
                            // this is a default fallback slot node
                            // any element or text node (with content)
                            // should hide the default fallback slot node
                            if (nodeType === 1 /* ElementNode */ || (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {
                                childNode.hidden = true;
                                break;
                            }
                        }
                    }
                }
            }
            // keep drilling down
            updateFallbackSlotVisibility(childNode);
        }
    }
};
const relocateNodes = [];
const relocateSlotContent = (elm) => {
    // tslint:disable-next-line: prefer-const
    let childNode;
    let node;
    let hostContentNodes;
    let slotNameAttr;
    let relocateNodeData;
    let j;
    let i = 0;
    let childNodes = elm.childNodes;
    let ilen = childNodes.length;
    for (; i < ilen; i++) {
        childNode = childNodes[i];
        if (childNode['s-sr'] && (node = childNode['s-cr'])) {
            // first got the content reference comment node
            // then we got it's parent, which is where all the host content is in now
            hostContentNodes = node.parentNode.childNodes;
            slotNameAttr = childNode['s-sn'];
            for (j = hostContentNodes.length - 1; j >= 0; j--) {
                node = hostContentNodes[j];
                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {
                    // let's do some relocating to its new home
                    // but never relocate a content reference node
                    // that is suppose to always represent the original content location
                    if (isNodeLocatedInSlot(node, slotNameAttr)) {
                        // it's possible we've already decided to relocate this node
                        relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);
                        // made some changes to slots
                        // let's make sure we also double check
                        // fallbacks are correctly hidden or shown
                        checkSlotFallbackVisibility = true;
                        node['s-sn'] = node['s-sn'] || slotNameAttr;
                        if (relocateNodeData) {
                            // previously we never found a slot home for this node
                            // but turns out we did, so let's remember it now
                            relocateNodeData.$slotRefNode$ = childNode;
                        }
                        else {
                            // add to our list of nodes to relocate
                            relocateNodes.push({
                                $slotRefNode$: childNode,
                                $nodeToRelocate$: node,
                            });
                        }
                        if (node['s-sr']) {
                            relocateNodes.map(relocateNode => {
                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {
                                    relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);
                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {
                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;
                                    }
                                }
                            });
                        }
                    }
                    else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {
                        // so far this element does not have a slot home, not setting slotRefNode on purpose
                        // if we never find a home for this element then we'll need to hide it
                        relocateNodes.push({
                            $nodeToRelocate$: node,
                        });
                    }
                }
            }
        }
        if (childNode.nodeType === 1 /* ElementNode */) {
            relocateSlotContent(childNode);
        }
    }
};
const isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {
    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {
        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {
            return true;
        }
        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {
            return true;
        }
        return false;
    }
    if (nodeToRelocate['s-sn'] === slotNameAttr) {
        return true;
    }
    return slotNameAttr === '';
};
const callNodeRefs = (vNode) => {
    {
        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);
        vNode.$children$ && vNode.$children$.map(callNodeRefs);
    }
};
const renderVdom = (hostRef, renderFnResults) => {
    const hostElm = hostRef.$hostElement$;
    const oldVNode = hostRef.$vnode$ || newVNode(null, null);
    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);
    hostTagName = hostElm.tagName;
    rootVnode.$tag$ = null;
    rootVnode.$flags$ |= 4 /* isHost */;
    hostRef.$vnode$ = rootVnode;
    rootVnode.$elm$ = oldVNode.$elm$ = ( hostElm.shadowRoot || hostElm );
    {
        scopeId = hostElm['s-sc'];
    }
    {
        contentRef = hostElm['s-cr'];
        useNativeShadowDom = supportsShadow ;
        // always reset
        checkSlotFallbackVisibility = false;
    }
    // synchronous patch
    patch(oldVNode, rootVnode);
    {
        // while we're moving nodes around existing nodes, temporarily disable
        // the disconnectCallback from working
        plt.$flags$ |= 1 /* isTmpDisconnected */;
        if (checkSlotRelocate) {
            relocateSlotContent(rootVnode.$elm$);
            let relocateData;
            let nodeToRelocate;
            let orgLocationNode;
            let parentNodeRef;
            let insertBeforeNode;
            let refNode;
            let i = 0;
            for (; i < relocateNodes.length; i++) {
                relocateData = relocateNodes[i];
                nodeToRelocate = relocateData.$nodeToRelocate$;
                if (!nodeToRelocate['s-ol']) {
                    // add a reference node marking this node's original location
                    // keep a reference to this node for later lookups
                    orgLocationNode =  originalLocationDebugNode(nodeToRelocate) ;
                    orgLocationNode['s-nr'] = nodeToRelocate;
                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);
                }
            }
            for (i = 0; i < relocateNodes.length; i++) {
                relocateData = relocateNodes[i];
                nodeToRelocate = relocateData.$nodeToRelocate$;
                if (relocateData.$slotRefNode$) {
                    // by default we're just going to insert it directly
                    // after the slot reference node
                    parentNodeRef = relocateData.$slotRefNode$.parentNode;
                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;
                    orgLocationNode = nodeToRelocate['s-ol'];
                    while ((orgLocationNode = orgLocationNode.previousSibling)) {
                        refNode = orgLocationNode['s-nr'];
                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {
                            refNode = refNode.nextSibling;
                            if (!refNode || !refNode['s-nr']) {
                                insertBeforeNode = refNode;
                                break;
                            }
                        }
                    }
                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) || nodeToRelocate.nextSibling !== insertBeforeNode) {
                        // we've checked that it's worth while to relocate
                        // since that the node to relocate
                        // has a different next sibling or parent relocated
                        if (nodeToRelocate !== insertBeforeNode) {
                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {
                                // probably a component in the index.html that doesn't have it's hostname set
                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;
                            }
                            // add it back to the dom but in its new home
                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);
                        }
                    }
                }
                else {
                    // this node doesn't have a slot home to go to, so let's hide it
                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {
                        nodeToRelocate.hidden = true;
                    }
                }
            }
        }
        if (checkSlotFallbackVisibility) {
            updateFallbackSlotVisibility(rootVnode.$elm$);
        }
        // done moving nodes around
        // allow the disconnect callback to work again
        plt.$flags$ &= ~1 /* isTmpDisconnected */;
        // always reset
        relocateNodes.length = 0;
    }
};
// slot comment debug nodes only created with the `--debug` flag
// otherwise these nodes are text nodes w/out content
const slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name="' + slotVNode.$name$ + '"' : ''}> (host=${hostTagName.toLowerCase()})`);
const originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})` : `[${nodeToRelocate.textContent}]`));

const getElement = (ref) => ( getHostRef(ref).$hostElement$ );

const createEvent = (ref, name, flags) => {
    const elm = getElement(ref);
    return {
        emit: (detail) => {
            return emitEvent(elm, name, {
                bubbles: !!(flags & 4 /* Bubbles */),
                composed: !!(flags & 2 /* Composed */),
                cancelable: !!(flags & 1 /* Cancellable */),
                detail,
            });
        },
    };
};
const emitEvent = (elm, name, opts) => {
    const ev = new ( win.CustomEvent )(name, opts);
    elm.dispatchEvent(ev);
    return ev;
};

const attachToAncestor = (hostRef, ancestorComponent) => {
    if ( ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {
        ancestorComponent['s-p'].push(new Promise(r => (hostRef.$onRenderResolve$ = r)));
    }
};
const scheduleUpdate = (hostRef, isInitialLoad) => {
    {
        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;
    }
    if ( hostRef.$flags$ & 4 /* isWaitingForChildren */) {
        hostRef.$flags$ |= 512 /* needsRerender */;
        return;
    }
    attachToAncestor(hostRef, hostRef.$ancestorComponent$);
    // there is no ancestorc omponent or the ancestor component
    // has already fired off its lifecycle update then
    // fire off the initial update
    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);
    return  writeTask(dispatch) ;
};
const dispatchHooks = (hostRef, isInitialLoad) => {
    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);
    const instance =  hostRef.$lazyInstance$ ;
    let promise;
    if (isInitialLoad) {
        {
            hostRef.$flags$ |= 256 /* isListenReady */;
            if (hostRef.$queuedListeners$) {
                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));
                hostRef.$queuedListeners$ = null;
            }
        }
        {
            promise = safeCall(instance, 'componentWillLoad');
        }
    }
    else {
        {
            promise = safeCall(instance, 'componentWillUpdate');
        }
    }
    endSchedule();
    return then(promise, () => (updateComponent(hostRef, instance, isInitialLoad)));
};
const updateComponent = (hostRef, instance, isInitialLoad) => {
    // updateComponent
    const elm = hostRef.$hostElement$;
    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);
    const rc = elm['s-rc'];
    if ( isInitialLoad) {
        // DOM WRITE!
        attachStyles(hostRef);
    }
    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);
    {
        {
            // looks like we've got child nodes to render into this host element
            // or we need to update the css class/attrs on the host element
            // DOM WRITE!
            renderVdom(hostRef, callRender(instance));
        }
    }
    {
        hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;
    }
    {
        try {
            // manually connected child components during server-side hydrate
            serverSideConnected(elm);
            if (isInitialLoad) {
                // using only during server-side hydrate
                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {
                    elm['s-en'] = '';
                }
                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {
                    elm['s-en'] = 'c';
                }
            }
        }
        catch (e) {
            consoleError(e);
        }
    }
    {
        hostRef.$flags$ |= 2 /* hasRendered */;
    }
    if ( rc) {
        // ok, so turns out there are some child host elements
        // waiting on this parent element to load
        // let's fire off all update callbacks waiting
        rc.map(cb => cb());
        elm['s-rc'] = undefined;
    }
    endRender();
    endUpdate();
    {
        const childrenPromises = elm['s-p'];
        const postUpdate = () => postUpdateComponent(hostRef);
        if (childrenPromises.length === 0) {
            postUpdate();
        }
        else {
            Promise.all(childrenPromises).then(postUpdate);
            hostRef.$flags$ |= 4 /* isWaitingForChildren */;
            childrenPromises.length = 0;
        }
    }
};
const callRender = (instance) => {
    try {
        instance =  instance.render() ;
    }
    catch (e) {
        consoleError(e);
    }
    return instance;
};
const postUpdateComponent = (hostRef) => {
    const tagName = hostRef.$cmpMeta$.$tagName$;
    const elm = hostRef.$hostElement$;
    const endPostUpdate = createTime('postUpdate', tagName);
    const instance =  hostRef.$lazyInstance$ ;
    const ancestorComponent = hostRef.$ancestorComponent$;
    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {
        hostRef.$flags$ |= 64 /* hasLoadedComponent */;
        {
            // DOM WRITE!
            addHydratedFlag(elm);
        }
        {
            safeCall(instance, 'componentDidLoad');
        }
        endPostUpdate();
        {
            hostRef.$onReadyResolve$(elm);
            if (!ancestorComponent) {
                appDidLoad();
            }
        }
    }
    else {
        {
            safeCall(instance, 'componentDidUpdate');
        }
        endPostUpdate();
    }
    {
        hostRef.$onInstanceResolve$(elm);
    }
    // load events fire from bottom to top
    // the deepest elements load first then bubbles up
    {
        if (hostRef.$onRenderResolve$) {
            hostRef.$onRenderResolve$();
            hostRef.$onRenderResolve$ = undefined;
        }
        if (hostRef.$flags$ & 512 /* needsRerender */) {
            nextTick(() => scheduleUpdate(hostRef, false));
        }
        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);
    }
    // ( •_•)
    // ( •_•)>⌐■-■
    // (⌐■_■)
};
const appDidLoad = (who) => {
    // on appload
    // we have finish the first big initial render
    {
        addHydratedFlag(doc.documentElement);
    }
    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));
};
const safeCall = (instance, method, arg) => {
    if (instance && instance[method]) {
        try {
            return instance[method](arg);
        }
        catch (e) {
            consoleError(e);
        }
    }
    return undefined;
};
const then = (promise, thenFn) => {
    return promise && promise.then ? promise.then(thenFn) : thenFn();
};
const addHydratedFlag = (elm) => ( elm.classList.add('hydrated') );
const serverSideConnected = (elm) => {
    const children = elm.children;
    if (children != null) {
        for (let i = 0, ii = children.length; i < ii; i++) {
            const childElm = children[i];
            if (typeof childElm.connectedCallback === 'function') {
                childElm.connectedCallback();
            }
            serverSideConnected(childElm);
        }
    }
};

const initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {
    const endHydrate = createTime('hydrateClient', tagName);
    const shadowRoot = hostElm.shadowRoot;
    const childRenderNodes = [];
    const slotNodes = [];
    const shadowRootNodes =  shadowRoot ? [] : null;
    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));
    if (!plt.$orgLocNodes$) {
        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));
    }
    hostElm[HYDRATE_ID] = hostId;
    hostElm.removeAttribute(HYDRATE_ID);
    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);
    childRenderNodes.map(c => {
        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;
        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);
        const node = c.$elm$;
        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {
            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);
        }
        if (!shadowRoot) {
            node['s-hn'] = tagName;
            if (orgLocationNode) {
                node['s-ol'] = orgLocationNode;
                node['s-ol']['s-nr'] = node;
            }
        }
        plt.$orgLocNodes$.delete(orgLocationId);
    });
    if ( shadowRoot) {
        shadowRootNodes.map(shadowRootNode => {
            if (shadowRootNode) {
                shadowRoot.appendChild(shadowRootNode);
            }
        });
    }
    endHydrate();
};
const clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {
    let childNodeType;
    let childIdSplt;
    let childVNode;
    let i;
    if (node.nodeType === 1 /* ElementNode */) {
        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);
        if (childNodeType) {
            // got the node data from the element's attribute
            // `${hostId}.${nodeId}.${depth}.${index}`
            childIdSplt = childNodeType.split('.');
            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {
                childVNode = {
                    $flags$: 0,
                    $hostId$: childIdSplt[0],
                    $nodeId$: childIdSplt[1],
                    $depth$: childIdSplt[2],
                    $index$: childIdSplt[3],
                    $tag$: node.tagName.toLowerCase(),
                    $elm$: node,
                    $attrs$: null,
                    $children$: null,
                    $key$: null,
                    $name$: null,
                    $text$: null,
                };
                childRenderNodes.push(childVNode);
                node.removeAttribute(HYDRATE_CHILD_ID);
                // this is a new child vnode
                // so ensure its parent vnode has the vchildren array
                if (!parentVNode.$children$) {
                    parentVNode.$children$ = [];
                }
                // add our child vnode to a specific index of the vnode's children
                parentVNode.$children$[childVNode.$index$] = childVNode;
                // this is now the new parent vnode for all the next child checks
                parentVNode = childVNode;
                if (shadowRootNodes && childVNode.$depth$ === '0') {
                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                }
            }
        }
        // recursively drill down, end to start so we can remove nodes
        for (i = node.childNodes.length - 1; i >= 0; i--) {
            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);
        }
        if (node.shadowRoot) {
            // keep drilling down through the shadow root nodes
            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {
                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);
            }
        }
    }
    else if (node.nodeType === 8 /* CommentNode */) {
        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`
        childIdSplt = node.nodeValue.split('.');
        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {
            // comment node for either the host id or a 0 host id
            childNodeType = childIdSplt[0];
            childVNode = {
                $flags$: 0,
                $hostId$: childIdSplt[1],
                $nodeId$: childIdSplt[2],
                $depth$: childIdSplt[3],
                $index$: childIdSplt[4],
                $elm$: node,
                $attrs$: null,
                $children$: null,
                $key$: null,
                $name$: null,
                $tag$: null,
                $text$: null,
            };
            if (childNodeType === TEXT_NODE_ID) {
                childVNode.$elm$ = node.nextSibling;
                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {
                    childVNode.$text$ = childVNode.$elm$.textContent;
                    childRenderNodes.push(childVNode);
                    // remove the text comment since it's no longer needed
                    node.remove();
                    if (!parentVNode.$children$) {
                        parentVNode.$children$ = [];
                    }
                    parentVNode.$children$[childVNode.$index$] = childVNode;
                    if (shadowRootNodes && childVNode.$depth$ === '0') {
                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                    }
                }
            }
            else if (childVNode.$hostId$ === hostId) {
                // this comment node is specifcally for this host id
                if (childNodeType === SLOT_NODE_ID) {
                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;
                    childVNode.$tag$ = 'slot';
                    if (childIdSplt[5]) {
                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];
                    }
                    else {
                        node['s-sn'] = '';
                    }
                    node['s-sr'] = true;
                    if ( shadowRootNodes) {
                        // browser support shadowRoot and this is a shadow dom component
                        // create an actual slot element
                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);
                        if (childVNode.$name$) {
                            // add the slot name attribute
                            childVNode.$elm$.setAttribute('name', childVNode.$name$);
                        }
                        // insert the new slot element before the slot comment
                        node.parentNode.insertBefore(childVNode.$elm$, node);
                        // remove the slot comment since it's not needed for shadow
                        node.remove();
                        if (childVNode.$depth$ === '0') {
                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                        }
                    }
                    slotNodes.push(childVNode);
                    if (!parentVNode.$children$) {
                        parentVNode.$children$ = [];
                    }
                    parentVNode.$children$[childVNode.$index$] = childVNode;
                }
                else if (childNodeType === CONTENT_REF_ID) {
                    // `${CONTENT_REF_ID}.${hostId}`;
                    if ( shadowRootNodes) {
                        // remove the content ref comment since it's not needed for shadow
                        node.remove();
                    }
                    else {
                        hostElm['s-cr'] = node;
                        node['s-cn'] = true;
                    }
                }
            }
        }
    }
    else if (parentVNode && parentVNode.$tag$ === 'style') {
        const vnode = newVNode(null, node.textContent);
        vnode.$elm$ = node;
        vnode.$index$ = '0';
        parentVNode.$children$ = [vnode];
    }
};
const initializeDocumentHydrate = (node, orgLocNodes) => {
    if (node.nodeType === 1 /* ElementNode */) {
        let i = 0;
        for (; i < node.childNodes.length; i++) {
            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);
        }
        if (node.shadowRoot) {
            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {
                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);
            }
        }
    }
    else if (node.nodeType === 8 /* CommentNode */) {
        const childIdSplt = node.nodeValue.split('.');
        if (childIdSplt[0] === ORG_LOCATION_ID) {
            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);
            node.nodeValue = '';
            // useful to know if the original location is
            // the root light-dom of a shadow dom component
            node['s-en'] = childIdSplt[3];
        }
    }
};

const parsePropertyValue = (propValue, propType) => {
    // ensure this value is of the correct prop type
    if (propValue != null && !isComplexType(propValue)) {
        if ( propType & 4 /* Boolean */) {
            // per the HTML spec, any string value means it is a boolean true value
            // but we'll cheat here and say that the string "false" is the boolean false
            return propValue === 'false' ? false : propValue === '' || !!propValue;
        }
        if ( propType & 2 /* Number */) {
            // force it to be a number
            return parseFloat(propValue);
        }
        if ( propType & 1 /* String */) {
            // could have been passed as a number or boolean
            // but we still want it as a string
            return String(propValue);
        }
        // redundant return here for better minification
        return propValue;
    }
    // not sure exactly what type we want
    // so no need to change to a different type
    return propValue;
};

const getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);
const setValue = (ref, propName, newVal, cmpMeta) => {
    // check our new property value against our internal value
    const hostRef = getHostRef(ref);
    const oldVal = hostRef.$instanceValues$.get(propName);
    const flags = hostRef.$flags$;
    const instance =  hostRef.$lazyInstance$ ;
    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);
    if (( !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {
        // gadzooks! the property's value has changed!!
        // set our new value!
        hostRef.$instanceValues$.set(propName, newVal);
        if ( instance) {
            // get an array of method names of watch functions to call
            if ( cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {
                const watchMethods = cmpMeta.$watchers$[propName];
                if (watchMethods) {
                    // this instance is watching for when this property changed
                    watchMethods.map(watchMethodName => {
                        try {
                            // fire off each of the watch methods that are watching this property
                            instance[watchMethodName](newVal, oldVal, propName);
                        }
                        catch (e) {
                            consoleError(e);
                        }
                    });
                }
            }
            if ( (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {
                // looks like this value actually changed, so we've got work to do!
                // but only if we've already rendered, otherwise just chill out
                // queue that we need to do an update, but don't worry about queuing
                // up millions cuz this function ensures it only runs once
                scheduleUpdate(hostRef, false);
            }
        }
    }
};

const proxyComponent = (Cstr, cmpMeta, flags) => {
    if ( cmpMeta.$members$) {
        if ( Cstr.watchers) {
            cmpMeta.$watchers$ = Cstr.watchers;
        }
        // It's better to have a const than two Object.entries()
        const members = Object.entries(cmpMeta.$members$);
        const prototype = Cstr.prototype;
        members.map(([memberName, [memberFlags]]) => {
            if ( (memberFlags & 31 /* Prop */ || (( flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {
                // proxyComponent - prop
                Object.defineProperty(prototype, memberName, {
                    get() {
                        // proxyComponent, get value
                        return getValue(this, memberName);
                    },
                    set(newValue) {
                        // proxyComponent, set value
                        setValue(this, memberName, newValue, cmpMeta);
                    },
                    configurable: true,
                    enumerable: true,
                });
            }
            else if ( flags & 1 /* isElementConstructor */ && memberFlags & 64 /* Method */) {
                // proxyComponent - method
                Object.defineProperty(prototype, memberName, {
                    value(...args) {
                        const ref = getHostRef(this);
                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));
                    },
                });
            }
        });
        if ( ( flags & 1 /* isElementConstructor */)) {
            const attrNameToPropName = new Map();
            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {
                plt.jmp(() => {
                    const propName = attrNameToPropName.get(attrName);
                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;
                });
            };
            // create an array of attributes to observe
            // and also create a map of html attribute name to js property name
            Cstr.observedAttributes = members
                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes
                .map(([propName, m]) => {
                const attrName = m[1] || propName;
                attrNameToPropName.set(attrName, propName);
                return attrName;
            });
        }
    }
    return Cstr;
};

const initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {
    // initializeComponent
    if ( (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {
        // we haven't initialized this element yet
        hostRef.$flags$ |= 32 /* hasInitializedComponent */;
        if ( hostRef.$modeName$) {
            elm.setAttribute('s-mode', hostRef.$modeName$);
        }
        {
            // lazy loaded components
            // request the component's implementation to be
            // wired up with the host element
            Cstr = loadModule(cmpMeta);
            if (Cstr.then) {
                // Await creates a micro-task avoid if possible
                const endLoad = uniqueTime();
                Cstr = await Cstr;
                endLoad();
            }
            if ( !Cstr.isProxied) {
                // we'eve never proxied this Constructor before
                // let's add the getters/setters to its prototype before
                // the first time we create an instance of the implementation
                {
                    cmpMeta.$watchers$ = Cstr.watchers;
                }
                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);
                Cstr.isProxied = true;
            }
            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);
            // ok, time to construct the instance
            // but let's keep track of when we start and stop
            // so that the getters/setters don't incorrectly step on data
            {
                hostRef.$flags$ |= 8 /* isConstructingInstance */;
            }
            // construct the lazy-loaded component implementation
            // passing the hostRef is very important during
            // construction in order to directly wire together the
            // host element and the lazy-loaded instance
            try {
                new Cstr(hostRef);
            }
            catch (e) {
                consoleError(e);
            }
            {
                hostRef.$flags$ &= ~8 /* isConstructingInstance */;
            }
            {
                hostRef.$flags$ |= 128 /* isWatchReady */;
            }
            endNewInstance();
        }
        const scopeId =  getScopeId(cmpMeta.$tagName$);
        if ( !styles.has(scopeId) && Cstr.style) {
            const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);
            // this component has styles but we haven't registered them yet
            let style = Cstr.style;
            registerStyle(scopeId, style);
            endRegisterStyles();
        }
    }
    // we've successfully created a lazy instance
    const ancestorComponent = hostRef.$ancestorComponent$;
    const schedule = () => scheduleUpdate(hostRef, true);
    if ( ancestorComponent && ancestorComponent['s-rc']) {
        // this is the intial load and this component it has an ancestor component
        // but the ancestor component has NOT fired its will update lifecycle yet
        // so let's just cool our jets and wait for the ancestor to continue first
        // this will get fired off when the ancestor component
        // finally gets around to rendering its lazy self
        // fire off the initial update
        ancestorComponent['s-rc'].push(schedule);
    }
    else {
        schedule();
    }
};

const connectedCallback = (elm) => {
    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {
        const hostRef = getHostRef(elm);
        const cmpMeta = hostRef.$cmpMeta$;
        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);
        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {
            // first time this component has connected
            hostRef.$flags$ |= 1 /* hasConnected */;
            let hostId;
            {
                hostId = elm.getAttribute(HYDRATE_ID);
                if (hostId) {
                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);
                }
            }
            if ( !hostId) {
                // initUpdate
                // if the slot polyfill is required we'll need to put some nodes
                // in here to act as original content anchors as we move nodes around
                // host element has been connected to the DOM
                {
                    setContentReference(elm);
                }
            }
            {
                // find the first ancestor component (if there is one) and register
                // this component as one of the actively loading child components for its ancestor
                let ancestorComponent = elm;
                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {
                    // climb up the ancestors looking for the first
                    // component that hasn't finished its lifecycle update yet
                    if (( ancestorComponent.nodeType === 1 /* ElementNode */ && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p']) ||
                        ancestorComponent['s-p']) {
                        // we found this components first ancestor component
                        // keep a reference to this component's ancestor component
                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));
                        break;
                    }
                }
            }
            {
                initializeComponent(elm, hostRef, cmpMeta);
            }
        }
        else {
            // not the first time this has connected
            // reattach any event listeners to the host
            // since they would have been removed when disconnected
            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);
        }
        endConnected();
    }
};
const setContentReference = (elm) => {
    // only required when we're NOT using native shadow dom (slot)
    // or this browser doesn't support native shadow dom
    // and this host element was NOT created with SSR
    // let's pick out the inner content for slot projection
    // create a node to represent where the original
    // content was first placed, which is useful later on
    const contentRefElm = (elm['s-cr'] = doc.createComment( ''));
    contentRefElm['s-cn'] = true;
    elm.insertBefore(contentRefElm, elm.firstChild);
};

const insertVdomAnnotations = (doc, staticComponents) => {
    if (doc != null) {
        const docData = {
            hostIds: 0,
            rootLevelIds: 0,
            staticComponents: new Set(staticComponents),
        };
        const orgLocationNodes = [];
        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);
        orgLocationNodes.forEach(orgLocationNode => {
            if (orgLocationNode != null) {
                const nodeRef = orgLocationNode['s-nr'];
                let hostId = nodeRef['s-host-id'];
                let nodeId = nodeRef['s-node-id'];
                let childId = `${hostId}.${nodeId}`;
                if (hostId == null) {
                    hostId = 0;
                    docData.rootLevelIds++;
                    nodeId = docData.rootLevelIds;
                    childId = `${hostId}.${nodeId}`;
                    if (nodeRef.nodeType === 1 /* ElementNode */) {
                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);
                    }
                    else if (nodeRef.nodeType === 3 /* TextNode */) {
                        if (hostId === 0) {
                            const textContent = nodeRef.nodeValue.trim();
                            if (textContent === '') {
                                // useless whitespace node at the document root
                                orgLocationNode.remove();
                                return;
                            }
                        }
                        const commentBeforeTextNode = doc.createComment(childId);
                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;
                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);
                    }
                }
                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;
                const orgLocationParentNode = orgLocationNode.parentElement;
                if (orgLocationParentNode) {
                    if (orgLocationParentNode['s-en'] === '') {
                        // ending with a "." means that the parent element
                        // of this node's original location is a SHADOW dom element
                        // and this node is apart of the root level light dom
                        orgLocationNodeId += `.`;
                    }
                    else if (orgLocationParentNode['s-en'] === 'c') {
                        // ending with a ".c" means that the parent element
                        // of this node's original location is a SCOPED element
                        // and this node is apart of the root level light dom
                        orgLocationNodeId += `.c`;
                    }
                }
                orgLocationNode.nodeValue = orgLocationNodeId;
            }
        });
    }
};
const parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {
    if (node == null) {
        return;
    }
    if (node['s-nr'] != null) {
        orgLocationNodes.push(node);
    }
    if (node.nodeType === 1 /* ElementNode */) {
        node.childNodes.forEach(childNode => {
            const hostRef = getHostRef(childNode);
            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {
                const cmpData = {
                    nodeIds: 0,
                };
                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);
            }
            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);
        });
    }
};
const insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {
    if (vnode != null) {
        const hostId = ++docData.hostIds;
        hostElm.setAttribute(HYDRATE_ID, hostId);
        if (hostElm['s-cr'] != null) {
            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;
        }
        if (vnode.$children$ != null) {
            const depth = 0;
            vnode.$children$.forEach((vnodeChild, index) => {
                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);
            });
        }
    }
};
const insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {
    const childElm = vnodeChild.$elm$;
    if (childElm == null) {
        return;
    }
    const nodeId = cmpData.nodeIds++;
    const childId = `${hostId}.${nodeId}.${depth}.${index}`;
    childElm['s-host-id'] = hostId;
    childElm['s-node-id'] = nodeId;
    if (childElm.nodeType === 1 /* ElementNode */) {
        childElm.setAttribute(HYDRATE_CHILD_ID, childId);
    }
    else if (childElm.nodeType === 3 /* TextNode */) {
        const parentNode = childElm.parentNode;
        if (parentNode.nodeName !== 'STYLE') {
            const textNodeId = `${TEXT_NODE_ID}.${childId}`;
            const commentBeforeTextNode = doc.createComment(textNodeId);
            parentNode.insertBefore(commentBeforeTextNode, childElm);
        }
    }
    else if (childElm.nodeType === 8 /* CommentNode */) {
        if (childElm['s-sr']) {
            const slotName = childElm['s-sn'] || '';
            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;
            childElm.nodeValue = slotNodeId;
        }
    }
    if (vnodeChild.$children$ != null) {
        const childDepth = depth + 1;
        vnodeChild.$children$.forEach((vnode, index) => {
            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);
        });
    }
};

function proxyHostElement(elm, cmpMeta) {
    if (typeof elm.componentOnReady !== 'function') {
        elm.componentOnReady = componentOnReady;
    }
    if (typeof elm.forceUpdate !== 'function') {
        elm.forceUpdate = forceUpdate$1;
    }
    if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {
        elm.shadowRoot = elm;
    }
    if (cmpMeta.$members$ != null) {
        const hostRef = getHostRef(elm);
        const members = Object.entries(cmpMeta.$members$);
        members.forEach(([memberName, m]) => {
            const memberFlags = m[0];
            if (memberFlags & 31 /* Prop */) {
                const attributeName = m[1] || memberName;
                const attrValue = elm.getAttribute(attributeName);
                if (attrValue != null) {
                    const parsedAttrValue = parsePropertyValue(attrValue, memberFlags);
                    hostRef.$instanceValues$.set(memberName, parsedAttrValue);
                }
                const ownValue = elm[memberName];
                if (ownValue !== undefined) {
                    // we've got an actual value already set on the host element
                    // let's add that to our instance values and pull it off the element
                    // so the getter/setter kicks in instead, but still getting this value
                    hostRef.$instanceValues$.set(memberName, ownValue);
                    delete elm[memberName];
                }
                // create the getter/setter on the host element for this property name
                Object.defineProperty(elm, memberName, {
                    get() {
                        // proxyComponent, get value
                        return getValue(this, memberName);
                    },
                    set(newValue) {
                        // proxyComponent, set value
                        setValue(this, memberName, newValue, cmpMeta);
                    },
                    configurable: true,
                    enumerable: true,
                });
            }
            else if (memberFlags & 64 /* Method */) {
                Object.defineProperty(elm, memberName, {
                    value() {
                        const ref = getHostRef(this);
                        const args = arguments;
                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName].apply(ref.$lazyInstance$, args)).catch(consoleError);
                    },
                });
            }
        });
    }
}
function componentOnReady() {
    return getHostRef(this).$onReadyPromise$;
}
function forceUpdate$1() {
    /**/
}

function hydrateApp(win, opts, results, afterHydrate, resolve) {
    const connectedElements = new Set();
    const createdElements = new Set();
    const waitingElements = new Set();
    const orgDocumentCreateElement = win.document.createElement;
    const orgDocumentCreateElementNS = win.document.createElementNS;
    const resolved = Promise.resolve();
    let tmrId;
    function hydratedComplete() {
        global.clearTimeout(tmrId);
        createdElements.clear();
        connectedElements.clear();
        try {
            if (opts.clientHydrateAnnotations) {
                insertVdomAnnotations(win.document, opts.staticComponents);
            }
            win.document.createElement = orgDocumentCreateElement;
            win.document.createElementNS = orgDocumentCreateElementNS;
        }
        catch (e) {
            renderCatchError(opts, results, e);
        }
        afterHydrate(win, opts, results, resolve);
    }
    function hydratedError(err) {
        renderCatchError(opts, results, err);
        hydratedComplete();
    }
    function timeoutExceeded() {
        hydratedError(`Hydrate exceeded timeout${waitingOnElementsMsg(waitingElements)}`);
    }
    try {
        function patchedConnectedCallback() {
            return connectElement(this);
        }
        function patchElement(elm) {
            if (isValidComponent(elm, opts)) {
                // this element is a valid component
                const hostRef = getHostRef(elm);
                if (!hostRef) {
                    // we haven't registered this component's host element yet
                    // get the component's constructor
                    const Cstr = loadModule({
                        $tagName$: elm.nodeName.toLowerCase(),
                        $flags$: null,
                    });
                    if (Cstr != null && Cstr.cmpMeta != null) {
                        // we found valid component metadata
                        createdElements.add(elm);
                        elm.connectedCallback = patchedConnectedCallback;
                        // register the host element
                        registerHost(elm, Cstr.cmpMeta);
                        // proxy the host element with the component's metadata
                        proxyHostElement(elm, Cstr.cmpMeta);
                    }
                }
            }
        }
        function patchChild(elm) {
            if (elm != null && elm.nodeType === 1) {
                patchElement(elm);
                const children = elm.children;
                for (let i = 0, ii = children.length; i < ii; i++) {
                    patchChild(children[i]);
                }
            }
        }
        function connectElement(elm) {
            createdElements.delete(elm);
            if (isValidComponent(elm, opts) && results.hydratedCount < opts.maxHydrateCount) {
                // this is a valid component to hydrate
                // and we haven't hit our max hydrated count yet
                if (!connectedElements.has(elm) && shouldHydrate(elm)) {
                    // we haven't connected this component yet
                    // and all of its ancestor elements are valid too
                    // add it to our Set so we know it's already being connected
                    connectedElements.add(elm);
                    return hydrateComponent(win, results, elm.nodeName, elm, waitingElements);
                }
            }
            return resolved;
        }
        function waitLoop() {
            const toConnect = Array.from(createdElements).filter(elm => elm.parentElement);
            if (toConnect.length > 0) {
                return Promise.all(toConnect.map(connectElement)).then(waitLoop);
            }
            return resolved;
        }
        win.document.createElement = function patchedCreateElement(tagName) {
            const elm = orgDocumentCreateElement.call(win.document, tagName);
            patchElement(elm);
            return elm;
        };
        win.document.createElementNS = function patchedCreateElement(namespaceURI, tagName) {
            const elm = orgDocumentCreateElementNS.call(win.document, namespaceURI, tagName);
            patchElement(elm);
            return elm;
        };
        // ensure we use nodejs's native setTimeout, not the mocked hydrate app scoped one
        tmrId = global.setTimeout(timeoutExceeded, opts.timeout);
        plt.$resourcesUrl$ = new URL(opts.resourcesUrl || './', doc.baseURI).href;
        patchChild(win.document.body);
        waitLoop().then(hydratedComplete).catch(hydratedError);
    }
    catch (e) {
        hydratedError(e);
    }
}
async function hydrateComponent(win, results, tagName, elm, waitingElements) {
    tagName = tagName.toLowerCase();
    const Cstr = loadModule({
        $tagName$: tagName,
        $flags$: null,
    });
    if (Cstr != null) {
        const cmpMeta = Cstr.cmpMeta;
        if (cmpMeta != null) {
            waitingElements.add(elm);
            try {
                connectedCallback(elm);
                await elm.componentOnReady();
                results.hydratedCount++;
                const ref = getHostRef(elm);
                const modeName = !ref.$modeName$ ? '$' : ref.$modeName$;
                if (!results.components.some(c => c.tag === tagName && c.mode === modeName)) {
                    results.components.push({
                        tag: tagName,
                        mode: modeName,
                        count: 0,
                        depth: -1,
                    });
                }
            }
            catch (e) {
                win.console.error(e);
            }
            waitingElements.delete(elm);
        }
    }
}
function isValidComponent(elm, opts) {
    if (elm != null && elm.nodeType === 1) {
        // playing it safe and not using elm.tagName or elm.localName on purpose
        const tagName = elm.nodeName;
        if (typeof tagName === 'string' && tagName.includes('-')) {
            if (opts.excludeComponents.includes(tagName.toLowerCase())) {
                // this tagName we DO NOT want to hydrate
                return false;
            }
            // all good, this is a valid component
            return true;
        }
    }
    return false;
}
function shouldHydrate(elm) {
    if (elm.nodeType === 9) {
        return true;
    }
    if (NO_HYDRATE_TAGS.has(elm.nodeName)) {
        return false;
    }
    if (elm.hasAttribute('no-prerender')) {
        return false;
    }
    const parentNode = elm.parentNode;
    if (parentNode == null) {
        return true;
    }
    return shouldHydrate(parentNode);
}
const NO_HYDRATE_TAGS = new Set(['CODE', 'HEAD', 'IFRAME', 'INPUT', 'OBJECT', 'OUTPUT', 'NOSCRIPT', 'PRE', 'SCRIPT', 'SELECT', 'STYLE', 'TEMPLATE', 'TEXTAREA']);
function renderCatchError(opts, results, err) {
    const diagnostic = {
        level: 'error',
        type: 'build',
        header: 'Hydrate Error',
        messageText: '',
        relFilePath: null,
        absFilePath: null,
        lines: [],
    };
    if (opts.url) {
        try {
            const u = new URL(opts.url);
            if (u.pathname !== '/') {
                diagnostic.header += ': ' + u.pathname;
            }
        }
        catch (e) { }
    }
    if (err != null) {
        if (err.stack != null) {
            diagnostic.messageText = err.stack.toString();
        }
        else if (err.message != null) {
            diagnostic.messageText = err.message.toString();
        }
        else {
            diagnostic.messageText = err.toString();
        }
    }
    results.diagnostics.push(diagnostic);
}
function printTag(elm) {
    let tag = `<${elm.nodeName.toLowerCase()}`;
    if (Array.isArray(elm.attributes)) {
        for (let i = 0; i < elm.attributes.length; i++) {
            const attr = elm.attributes[i];
            tag += ` ${attr.name}`;
            if (attr.value !== '') {
                tag += `="${attr.value}"`;
            }
        }
    }
    tag += `>`;
    return tag;
}
function waitingOnElementMsg(waitingElement) {
    let msg = '';
    if (waitingElement) {
        const lines = [];
        msg = ' - waiting on:';
        let elm = waitingElement;
        while (elm && elm.nodeType !== 9 && elm.nodeName !== 'BODY') {
            lines.unshift(printTag(elm));
            elm = elm.parentElement;
        }
        let indent = '';
        for (const ln of lines) {
            indent += '  ';
            msg += `\n${indent}${ln}`;
        }
    }
    return msg;
}
function waitingOnElementsMsg(waitingElements) {
    return Array.from(waitingElements).map(waitingOnElementMsg);
}

const cmpModules = new Map();
const getModule = (tagName) => {
    if (typeof tagName === 'string') {
        tagName = tagName.toLowerCase();
        const cmpModule = cmpModules.get(tagName);
        if (cmpModule != null) {
            return cmpModule[tagName];
        }
    }
    return null;
};
const loadModule = (cmpMeta, _hostRef, _hmrVersionId) => {
    return getModule(cmpMeta.$tagName$);
};
const isMemberInElement = (elm, memberName) => {
    if (elm != null) {
        if (memberName in elm) {
            return true;
        }
        const cstr = getModule(elm.nodeName);
        if (cstr != null) {
            const hostRef = cstr;
            if (hostRef != null && hostRef.cmpMeta != null && hostRef.cmpMeta.$members$ != null) {
                return memberName in hostRef.cmpMeta.$members$;
            }
        }
    }
    return false;
};
const registerComponents = (Cstrs) => {
    for (const Cstr of Cstrs) {
        // using this format so it follows exactly how client-side modules work
        const exportName = Cstr.cmpMeta.$tagName$;
        cmpModules.set(exportName, {
            [exportName]: Cstr,
        });
    }
};
const win = window;
const doc = win.document;
const writeTask = (cb) => {
    process.nextTick(() => {
        try {
            cb();
        }
        catch (e) {
            consoleError(e);
        }
    });
};
const resolved = /*@__PURE__*/ Promise.resolve();
const nextTick = /*@__PURE__*/ (cb) => resolved.then(cb);
const consoleError = (e) => {
    if (e != null) {
        console.error(e.stack || e.message || e);
    }
};
const plt = {
    $flags$: 0,
    $resourcesUrl$: '',
    jmp: h => h(),
    raf: h => requestAnimationFrame(h),
    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),
    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),
};
const supportsShadow = false;
const hostRefs = new WeakMap();
const getHostRef = (ref) => hostRefs.get(ref);
const registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);
const registerHost = (elm, cmpMeta) => {
    const hostRef = {
        $flags$: 0,
        $cmpMeta$: cmpMeta,
        $hostElement$: elm,
        $instanceValues$: new Map(),
        $renderCount$: 0,
    };
    hostRef.$onInstancePromise$ = new Promise(r => (hostRef.$onInstanceResolve$ = r));
    hostRef.$onReadyPromise$ = new Promise(r => (hostRef.$onReadyResolve$ = r));
    elm['s-p'] = [];
    elm['s-rc'] = [];
    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);
    return hostRefs.set(elm, hostRef);
};
const styles = new Map();

function getFullTitle(appTitle) {
    let last = '';
    let first = '';
    if (appTitle && appTitle.length) {
        const titleArray = appTitle.split(" ");
        if (titleArray.length > 1) {
            last = titleArray.pop();
        }
        first = titleArray.length ? titleArray.join(" ") : '';
    }
    return {
        first,
        last
    };
}
function getFullCopyright(copyright) {
    let last = '';
    let first = '';
    if (copyright && copyright.length) {
        const titleArray = copyright.split(" ©");
        if (titleArray.length > 1) {
            last = "©" + titleArray.pop();
        }
        first = titleArray.length ? titleArray.join(" ") : '';
    }
    return {
        first,
        last
    };
}

const AppInfo = {
    link: "www.schneider-electric.com",
    domain: "ecostruxure",
    copyright: "This application is protected by copyright law and international treaties. © 2020 Schneider Electric Industries SAS. All Rights Reserved."
};

const aboutCss = "/*!@:host*/.sc-se-about-h{position:absolute;top:0;bottom:0;left:0;right:0}/*!@.about-section-wrapper*/.about-section-wrapper.sc-se-about{position:absolute;top:0;bottom:0;left:0;right:0;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:end;justify-content:flex-end;padding-bottom:100px}/*!@.information*/.information.sc-se-about{color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF);background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);padding:32px 64px 21px}/*!@.information .header-title*/.information.sc-se-about .header-title.sc-se-about{font-size:40px;font-weight:600;line-height:1;padding:0;margin:0}/*!@.information .header-title span*/.information.sc-se-about .header-title.sc-se-about span.sc-se-about{display:inline-block}/*!@.information .header-title .light*/.information.sc-se-about .header-title.sc-se-about .light.sc-se-about{font-weight:300}/*!@.information .version*/.information.sc-se-about .version.sc-se-about{margin-top:12px;margin-bottom:26px;line-height:19px}/*!@.information .copyright-info-first,\n.information .copyright-info-last*/.information.sc-se-about .copyright-info-first.sc-se-about,.information.sc-se-about .copyright-info-last.sc-se-about{font-size:12px;line-height:14px}/*!@.image-container*/.image-container.sc-se-about{position:absolute;top:0;bottom:0;left:0;right:0;width:100%;height:100%;overflow:hidden;position:relative;transform:translate3d(0, 0, 0);-webkit-transform:translate3d(0, 0, 0)}/*!@.image-background*/.image-background.sc-se-about{position:absolute;width:102%;height:102%;left:-2px;top:-2px;background-position:center, center;background-repeat:no-repeat;background-origin:content-box;background-size:cover}/*!@se-icon-ecostruxure img*/se-icon-ecostruxure.sc-se-about img.sc-se-about{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);padding:0 8px;margin-bottom:8px}";

class AboutComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        this.domain = AppInfo.domain;
        /**
         * The copyright you would like to display.
         */
        this.copyright = AppInfo.copyright;
    }
    render() {
        const title = getFullTitle(this.appTitle);
        const fullCopyright = getFullCopyright(this.copyright);
        let domain;
        if (this.domain.toLowerCase() === `ecostruxure`) {
            domain = h("se-icon-ecostruxure", { size: "medium", color: "inherited" });
        }
        else if (this.domain.toLowerCase() !== "none") {
            domain = h("span", { class: "header-title-type" }, this.domain);
        }
        return [
            h("div", { class: "image-container" }, h("div", { class: "image-background", style: { backgroundImage: this.imageUrl } })),
            h("div", { class: "about-section-wrapper" }, h("div", { class: "information" }, domain, h("h1", { class: "header-title" }, h("span", null, title.first), h("span", { class: "light" }, "\u00A0", title.last)), h("p", { class: "version" }, "Version ", this.version), h("slot", { name: "custom-info" }), h("div", { class: "copyright-info-first" }, fullCopyright.first), h("div", { class: "copyright-info-last" }, fullCopyright.last)))
        ];
    }
    static get style() { return aboutCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-about",
        "$members$": {
            "appTitle": [1, "app-title"],
            "version": [1],
            "domain": [1],
            "copyright": [1],
            "imageUrl": [1, "image-url"]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const appCss = ":host{width:100%}:root{--se-standard:#EDEDED;--se-alternative:#FFFFFF;--se-primary:#3DCD58;--se-secondary:#42B4E6;--se-success:#3DCD58;--se-warning:#E47F00;--se-error:#DC0A0A;--se-standard-contrast:#0F0F0F;--se-alternative-contrast:#0F0F0F;--se-primary-contrast:#FFFFFF;--se-secondary-contrast:#FFFFFF;--se-success-contrast:#FFFFFF;--se-warning-contrast:#0F0F0F;--se-error-contrast:#FFFFFF;--se-hover-standard:#CBCBCB;--se-hover-alternative:#CBCBCB;--se-hover-primary:#32AD3C;--se-hover-secondary:#0087CD;--se-hover-standard-contrast:#0F0F0F;--se-hover-alternative-contrast:#0F0F0F;--se-hover-primary-contrast:#FFFFFF;--se-hover-secondary-contrast:#FFFFFF;--se-selected:#626469;--se-selected-contrast:#FFFFFF;--se-focus:#434343;--se-focus-contrast:#FFFFFF;--se-background:#F7F7F7}.se-app-body{overflow:hidden;margin:0 !important;padding:0;position:absolute;top:0;bottom:0;left:0;right:0;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}body{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}.color-standard{color:#EDEDED;color:var(--se-standard, #EDEDED)}.bg-standard{background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}.color-alternative{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}.bg-alternative{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}.color-primary{color:#3DCD58;color:var(--se-primary, #3DCD58)}.bg-primary{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}.color-secondary{color:#42B4E6;color:var(--se-secondary, #42B4E6)}.bg-secondary{background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6)}.color-success{color:#3DCD58;color:var(--se-success, #3DCD58)}.bg-success{background-color:#3DCD58;background-color:var(--se-success, #3DCD58)}.color-warning{color:#E47F00;color:var(--se-warning, #E47F00)}.bg-warning{background-color:#E47F00;background-color:var(--se-warning, #E47F00)}.color-error{color:#DC0A0A;color:var(--se-error, #DC0A0A)}.bg-error{background-color:#DC0A0A;background-color:var(--se-error, #DC0A0A)}.color-standard-contrast{color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F)}.bg-standard-contrast{background-color:#0F0F0F;background-color:var(--se-standard-contrast, #0F0F0F)}.color-alternative-contrast{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}.bg-alternative-contrast{background-color:#0F0F0F;background-color:var(--se-alternative-contrast, #0F0F0F)}.color-primary-contrast{color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}.bg-primary-contrast{background-color:#FFFFFF;background-color:var(--se-primary-contrast, #FFFFFF)}.color-secondary-contrast{color:#FFFFFF;color:var(--se-secondary-contrast, #FFFFFF)}.bg-secondary-contrast{background-color:#FFFFFF;background-color:var(--se-secondary-contrast, #FFFFFF)}.color-success-contrast{color:#FFFFFF;color:var(--se-success-contrast, #FFFFFF)}.bg-success-contrast{background-color:#FFFFFF;background-color:var(--se-success-contrast, #FFFFFF)}.color-warning-contrast{color:#0F0F0F;color:var(--se-warning-contrast, #0F0F0F)}.bg-warning-contrast{background-color:#0F0F0F;background-color:var(--se-warning-contrast, #0F0F0F)}.color-error-contrast{color:#FFFFFF;color:var(--se-error-contrast, #FFFFFF)}.bg-error-contrast{background-color:#FFFFFF;background-color:var(--se-error-contrast, #FFFFFF)}.color-background{color:#F7F7F7;color:var(--se-background, #F7F7F7)}.bg-background{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:\"\";content:none}table{border-collapse:collapse;border-spacing:0}a{text-decoration:none}body,html{font-weight:300;font-size:16px;color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}body strong,body .bold,html strong,html .bold{font-weight:bold}body.small,body small,html.small,html small{line-height:1.2 !important;font-size:14px}body.nano,html.nano{font-size:12px}body.large,html.large{font-size:18px}body h1 a,body h2 a,body h3 a,body h4 a,body h5 a,body h6 a,html h1 a,html h2 a,html h3 a,html h4 a,html h5 a,html h6 a{font-weight:inherit}body h1,html h1{font-weight:300;line-height:50px;font-size:42px}body h2,html h2{font-weight:300;line-height:45px;font-size:37px}body h3,html h3{font-weight:300;line-height:40px;font-size:30px}body h4,html h4{font-weight:300;line-height:30px;font-size:22px}body h5,html h5{font-weight:300;line-height:25px;font-size:16px;font-weight:bold}body h6,html h6{font-weight:300;line-height:20px;font-size:14px;font-weight:bold}body p,html p{font-weight:300;font-size:16px}body p strong,body p .bold,html p strong,html p .bold{font-weight:bold}body p.small,body p small,html p.small,html p small{line-height:1.2 !important;font-size:14px}body p.nano,html p.nano{font-size:12px}body p.large,html p.large{font-size:18px}body em,html em{font-style:italic}strong,.bold{font-weight:500}small{font-size:75%}.light{font-weight:300}.thin{font-weight:200}@media only screen and (min-width: 360px){.flow-text{font-size:1.2rem}}@media only screen and (min-width: 390px){.flow-text{font-size:1.224rem}}@media only screen and (min-width: 420px){.flow-text{font-size:1.248rem}}@media only screen and (min-width: 450px){.flow-text{font-size:1.272rem}}@media only screen and (min-width: 480px){.flow-text{font-size:1.296rem}}@media only screen and (min-width: 510px){.flow-text{font-size:1.32rem}}@media only screen and (min-width: 540px){.flow-text{font-size:1.344rem}}@media only screen and (min-width: 570px){.flow-text{font-size:1.368rem}}@media only screen and (min-width: 600px){.flow-text{font-size:1.392rem}}@media only screen and (min-width: 630px){.flow-text{font-size:1.416rem}}@media only screen and (min-width: 660px){.flow-text{font-size:1.44rem}}@media only screen and (min-width: 690px){.flow-text{font-size:1.464rem}}@media only screen and (min-width: 720px){.flow-text{font-size:1.488rem}}@media only screen and (min-width: 750px){.flow-text{font-size:1.512rem}}@media only screen and (min-width: 780px){.flow-text{font-size:1.536rem}}@media only screen and (min-width: 810px){.flow-text{font-size:1.56rem}}@media only screen and (min-width: 840px){.flow-text{font-size:1.584rem}}@media only screen and (min-width: 870px){.flow-text{font-size:1.608rem}}@media only screen and (min-width: 900px){.flow-text{font-size:1.632rem}}@media only screen and (min-width: 930px){.flow-text{font-size:1.656rem}}@media only screen and (min-width: 960px){.flow-text{font-size:1.68rem}}@media only screen and (max-width: 360px){.flow-text{font-size:1.2rem}}.uppercase{text-transform:uppercase}body ::-webkit-scrollbar,html ::-webkit-scrollbar{height:12px;width:12px}body ::-webkit-scrollbar-track,body ::-webkit-scrollbar-thumb,html ::-webkit-scrollbar-track,html ::-webkit-scrollbar-thumb{border:4px solid transparent;background-clip:padding-box;border-radius:16px}body ::-webkit-scrollbar-track,html ::-webkit-scrollbar-track{background-color:#F7F7F7}body ::-webkit-scrollbar-thumb,html ::-webkit-scrollbar-thumb{background-color:#CBCBCB}body ::-webkit-scrollbar-thumb:hover,html ::-webkit-scrollbar-thumb:hover{background-color:#626469;background-color:var(--se-selected, #626469);border:2px solid transparent}.technical se-block ::slotted(se-block){border:4px solid red}";

class AppComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Define the type of application. updating the option will impact the font used.
         * - `technical`: For technical application (i.e. EcoStuxure), the font used will be `Nunito`.
         * - `website` or `dcx`: For `se.com` application, the font used will be `Arial Rounded`.
         */
        this.option = 'technical';
    }
    updateBodyClass(newClass) {
        // Update the body class to make sure all component affected by the framework are affected by the font family
        if (document && document.body) {
            // Remove the class if already there
            ['se-font-technical', 'se-font-website'].forEach(classItem => {
                document.body.classList.remove(classItem);
            });
            // Add the new class
            document.body.classList.add(newClass);
        }
    }
    render() {
        const bodyClass = this.option === "technical" ? 'se-font-technical' : 'se-font-website';
        this.updateBodyClass(bodyClass);
        return h(Host, { class: ['se-app-body', this.option, bodyClass].join(' ') }, h("slot", null));
    }
    static get style() { return appCss; }
    static get cmpMeta() { return {
        "$flags$": 4,
        "$tagName$": "se-app",
        "$members$": {
            "option": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const authenticationCss = "/*!@.se-authentication*/.se-authentication.sc-se-authentication{position:absolute;top:0;bottom:0;left:0;right:0;background-color:#EDEDED;background-color:var(--se-standard, #EDEDED);z-index:300}/*!@.se-authentication.hide*/.se-authentication.hide.sc-se-authentication{display:none}/*!@.content-wrapper*/.content-wrapper.sc-se-authentication{display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;position:relative;-ms-flex-pack:justify;justify-content:space-between;overflow:hidden;padding:0;-webkit-box-shadow:0 1px 1px 1px #c2c2c2;box-shadow:0 1px 1px 1px #c2c2c2}@media only screen and (min-width: 600px){/*!@.content-wrapper*/.content-wrapper.sc-se-authentication{margin:18px auto;max-width:960px;min-height:575px;height:auto}}/*!@.header-title*/.header-title.sc-se-authentication{color:#3DCD58;color:var(--se-primary, #3DCD58);padding-left:18px;font-size:20px;line-height:20px;margin:0}/*!@.image-container*/.image-container.sc-se-authentication{position:absolute;top:0;bottom:0;left:0;right:0;width:100%;height:100%;overflow:hidden;transform:translate3d(0, 0, 0);-webkit-transform:translate3d(0, 0, 0)}/*!@.image-background*/.image-background.sc-se-authentication{position:absolute;width:102%;height:102%;left:-2px;top:-2px;background-position:center, center;background-repeat:no-repeat;background-origin:content-box;background-size:cover}/*!@.login-container*/.login-container.sc-se-authentication{height:100%;z-index:1;background-color:white;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}/*!@main*/main.sc-se-authentication{height:36.5%;overflow:hidden;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:end;justify-content:flex-end}@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){/*!@main*/main.sc-se-authentication{-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;min-height:210px}}/*!@main .green-bars*/main.sc-se-authentication .green-bars.sc-se-authentication{z-index:2;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;display:-ms-flexbox;display:flex;-moz-flex:0 0 36.5%;-ms-flex:0 0 36.5%;flex:0 0 36.5%}/*!@main .dark-green-bar,\nmain .light-green-bar*/main.sc-se-authentication .dark-green-bar.sc-se-authentication,main.sc-se-authentication .light-green-bar.sc-se-authentication{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);height:40px;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}/*!@main .dark-green-bar*/main.sc-se-authentication .dark-green-bar.sc-se-authentication{opacity:0.5}/*!@.information,\n.form*/.information.sc-se-authentication,.form.sc-se-authentication{background:#fff;overflow:hidden;z-index:2;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;display:-ms-flexbox;display:flex}/*!@.form*/.form.sc-se-authentication{padding:0 60px;-ms-flex-line-pack:center;align-content:center;-ms-flex-pack:center;justify-content:center;max-width:300px}/*!@.information*/.information.sc-se-authentication{padding:60px;padding-right:0;-ms-flex-pack:end;justify-content:flex-end;color:#3DCD58;color:var(--se-primary, #3DCD58)}/*!@.information .header-title*/.information.sc-se-authentication .header-title.sc-se-authentication{font-size:40px;padding-top:14px;padding-bottom:24px;padding-left:0}/*!@.information .header-title .light*/.information.sc-se-authentication .header-title.sc-se-authentication .light.sc-se-authentication{font-weight:300}/*!@footer*/footer.sc-se-authentication{height:17%;overflow:hidden;color:#FFFFFF;font-size:14px;z-index:2;display:-ms-flexbox;display:flex;-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;-moz-align-items:center;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}/*!@footer .copyright-note*/footer.sc-se-authentication .copyright-note.sc-se-authentication{margin-left:25px;max-width:450px}/*!@footer .footer-logo*/footer.sc-se-authentication .footer-logo.sc-se-authentication{text-align:right;-moz-flex:auto 1 auto;-ms-flex:auto 1 auto;flex:auto 1 auto;max-width:300px}@media only screen and (min-width: 600px){/*!@.footer-logo*/.footer-logo.sc-se-authentication{margin-right:25px}}";

class AuthenticationComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        this.domain = AppInfo.domain;
        /**
         * The copyright you would like to display.
         */
        this.copyright = AppInfo.copyright;
        /**
         * If set to `true`, this will hide the authentication screen.
         */
        this.hide = false;
    }
    renderAuthentication() {
        const title = getFullTitle(this.appTitle);
        let domain;
        if (this.domain.toLowerCase() === `ecostruxure`) {
            domain = h("se-icon-ecostruxure", { size: "medium" });
        }
        else if (this.domain.toLowerCase() !== 'none') {
            domain = h("span", { class: "header-title-type" }, this.domain);
        }
        return (h("div", { class: "content-wrapper" }, h("div", { class: "image-container" }, h("img", { class: "image-background", style: { 'backgroundImage': this.imageUrl } })), h("main", null, h("div", { class: "green-bars" }, h("div", { class: "dark-green-bar" }), h("div", { class: "light-green-bar" }))), h("div", { class: "login-container" }, h("div", { class: "information" }, domain, h("h1", { class: "header-title" }, h("span", null, title.first), h("span", { class: "light" }, "\u00A0", title.last)), h("p", { class: "version" }, "version ", this.version)), h("div", { class: "form" }, h("slot", null))), h("footer", null, h("div", { class: "copyright-note" }, h("span", null, this.copyright)), h("div", { class: "footer-logo align-end" }, h("se-icon-lifeison", null)))));
    }
    render() {
        return (h("div", { class: ['se-authentication', this.hide ? 'hide' : ''].join(' ') }, !this.hide ? this.renderAuthentication() : ''));
    }
    static get style() { return authenticationCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-authentication",
        "$members$": {
            "appTitle": [1, "app-title"],
            "version": [1],
            "domain": [1],
            "copyright": [1],
            "imageUrl": [1, "image-url"],
            "hide": [4]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var arrow2_left = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 1024 1024" style="enable-background:new 0 0 1024 1024;" xml:space="preserve">
<path d="M561.8,366.5c8-8,22-8,30,0c4,4,6,10,6,15c0,6-2,11-6,15l-115,115l115,116c4,4,6,9,6,15c0,5-2,11-6,15c-8,8-22,8-30,0
	l-130-130c-8-9-8-22,0-31L561.8,366.5z"/>
</svg>
`;

var arrow2_right = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 1024 1024" style="enable-background:new 0 0 1024 1024;" xml:space="preserve">
<path d="M461.8,657.5c-8,8-22,8-30,0c-4-4-6-10-6-15c0-6,2-11,6-15l115-115l-115-116c-4-4-6-9-6-15c0-5,2-11,6-15c8-8,22-8,30,0
	l130,130c8,9,8,22,0,31L461.8,657.5z"/>
</svg>
`;

const bannerCss = "/*!@.banner-items*/.banner-items.sc-se-banner{display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;position:relative;-webkit-transition:right 0.5s;transition:right 0.5s}/*!@.banner-indicators*/.banner-indicators.sc-se-banner{position:absolute;left:0;right:0;top:90px;margin:0;padding-left:0;-ms-flex-pack:center;justify-content:center;display:-ms-inline-flexbox;display:inline-flex;list-style:none;z-index:2}/*!@.banner-indicators li*/.banner-indicators.sc-se-banner li.sc-se-banner{width:5px;height:5px;border-radius:50%;background-color:#FFFFFF;opacity:0.7;margin-right:5px}/*!@.banner-indicators li.active*/.banner-indicators.sc-se-banner li.active.sc-se-banner{background-color:#3DCD58;opacity:1}/*!@.banner-indicators li.small-indicator*/.banner-indicators.sc-se-banner li.small-indicator.sc-se-banner{width:3px;height:3px;margin-top:1px}/*!@.previous-indicator,\n.next-indicator*/.previous-indicator.sc-se-banner,.next-indicator.sc-se-banner{display:-ms-flexbox;display:flex;position:absolute;top:45px;font-family:\"se-icon\";cursor:pointer;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;text-decoration:none;z-index:3;color:#9FA0A4}/*!@.previous-indicator:hover,\n.next-indicator:hover*/.previous-indicator.sc-se-banner:hover,.next-indicator.sc-se-banner:hover{color:#FFFFFF}/*!@.se-banner*/.se-banner.sc-se-banner{position:relative;padding-top:15px;width:100%;margin:0;overflow:hidden}/*!@.previous-indicator*/.previous-indicator.sc-se-banner{left:-5px}/*!@.next-indicator*/.next-indicator.sc-se-banner{right:-5px}@media screen and (min-width: 768px){/*!@.banner-indicators*/.banner-indicators.sc-se-banner{top:345px}/*!@.previous-indicator,\n.next-indicator*/.previous-indicator.sc-se-banner,.next-indicator.sc-se-banner{top:165px}}@media screen and (min-width: 900px){/*!@.se-banner*/.se-banner.sc-se-banner{height:350px}}@media screen and (min-width: 1281px){/*!@.banner-indicators*/.banner-indicators.sc-se-banner{top:340px}/*!@.previous-indicator,\n.next-indicator*/.previous-indicator.sc-se-banner,.next-indicator.sc-se-banner{top:160px}}";

class BannerComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Set the duration (in ms) that the banner will automatically switch slides.
         * Default is `6000`.
         */
        this.duration = 6000;
        this.items = [];
    }
    handleTouchStart(event) {
        clearInterval(this.interval);
        this.xStart = event.touches[0].clientX;
    }
    handleTouchMove(event) {
        this.xEnd = event.touches[0].clientX;
        let xDiff = this.xStart - this.xEnd;
        if (xDiff > 0) {
            this.changeActive('next');
        }
        else {
            this.changeActive('previous');
        }
    }
    windowSizeDidChange() {
        this.setIconSize();
    }
    setActiveItem(item) {
        if (this.items.length) {
            this.items.forEach((item) => {
                item.active = false;
                item.isThreeAway = false;
                item.isFourAway = false;
            });
            item.active = true;
            this.activeIndex = this.items.indexOf(item);
            this.items.forEach((item) => {
                let diff = Math.abs(this.items.indexOf(item) - this.activeIndex);
                if (diff == 3) {
                    item.isThreeAway = true;
                }
            });
            this.assignSelectedItem(item);
        }
    }
    assignSelectedItem(item) {
        this.xStart = undefined;
        this.xEnd = undefined;
        this.selectedItem = item;
        this.selectedItemIndex = this.items.indexOf(item);
        this.bannerIndicatorEl.style.right = '' + this.selectedItemIndex * 100 + '%';
        this.setInterval();
    }
    changeActive(index) {
        // reset timer to rotate when clicking on arrow button
        clearInterval(this.interval);
        let item;
        if (index === 'previous') {
            item = this.items[this.selectedItemIndex - 1] || this.items[this.items.length - 1];
        }
        if (index === 'next') {
            item = this.items[this.selectedItemIndex + 1] || this.items[0];
        }
        this.setActiveItem(item);
    }
    setInterval() {
        if (this.duration > 500) {
            this.interval = setInterval(() => {
                // Rotate carousel to the right based on the specified duration.
                // Must be greater than 500ms, as it takes that amount of time to switch slides.
                this.changeActive('next');
            }, this.duration);
        }
    }
    watchItemList() {
        this.observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    clearInterval(this.interval);
                    this.setBannerItemWidth();
                    this.setInterval();
                }
                if (mutation.removedNodes.length) {
                    clearInterval(this.interval);
                    this.setBannerItemWidth();
                    this.setActiveItem(this.items[0]);
                }
            });
        });
        this.observer.observe(this.el, { childList: true });
    }
    renderList() {
        return this.items.map((item) => {
            return [
                h("li", { class: { 'active': item.active, 'small-indicator': item.isThreeAway, 'hide': item.isFourAway } }),
            ];
        });
    }
    setBannerItemWidth() {
        this.items = Array.from(this.el.querySelectorAll('se-banner-item'));
        if (this.items.length) {
            this.items.forEach((item) => {
                item.style.width = '' + 100 / this.items.length + '%';
            });
        }
    }
    setIconSize() {
        let icons = Array.from(this.el.shadowRoot.querySelectorAll('se-icon'));
        icons.forEach((icon) => {
            if (window.innerWidth > 1280) {
                icon.size = 'xlarge';
            }
            else if (window.innerWidth > 767) {
                icon.size = 'large';
            }
            else {
                icon.size = 'medium';
            }
        });
    }
    componentWillLoad() {
        this.watchItemList();
    }
    componentDidLoad() {
        this.setBannerItemWidth();
        this.setActiveItem(this.items[0]);
        this.setIconSize();
    }
    componentDidUpdate() {
        this.setIconSize();
    }
    ;
    componentDidUnload() {
        clearInterval(this.interval);
        this.items.length = 0;
        this.selectedItem = undefined;
        this.selectedItemIndex = undefined;
    }
    render() {
        return [
            h("div", { class: "se-banner" }, h("div", { class: "banner-items", ref: el => this.bannerIndicatorEl = el, style: { width: '' + this.items.length * 100 + '%' } }, h("slot", null)), this.items.length > 1 ? [
                h("ol", { class: "banner-indicators" }, this.renderList()),
                h("se-icon", { class: "previous-indicator", onClick: () => this.changeActive('previous') }, h("span", { innerHTML: arrow2_left })),
                h("se-icon", { class: "next-indicator", onClick: () => this.changeActive('next') }, h("span", { innerHTML: arrow2_right }))
            ]
                : '')
        ];
    }
    get el() { return getElement(this); }
    static get style() { return bannerCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-banner",
        "$members$": {
            "duration": [2],
            "items": [32],
            "selectedItem": [32],
            "selectedItemIndex": [32]
        },
        "$listeners$": [[9, "touchstart", "handleTouchStart"], [9, "touchmove", "handleTouchMove"], [9, "resize", "windowSizeDidChange"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const bannerItemCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}/*!@:host*/.sc-se-banner-item-h{height:100%;position:relative}/*!@:host(.active)*/.active.sc-se-banner-item-h{display:block;left:0;right:0}/*!@:host(.active) .banner-section-wrapper*/.active.sc-se-banner-item-h .banner-section-wrapper.sc-se-banner-item{opacity:1}/*!@.banner-section-wrapper*/.banner-section-wrapper.sc-se-banner-item{opacity:0;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:start;justify-content:flex-start;z-index:2}/*!@.image-container*/.image-container.sc-se-banner-item{width:100%;position:relative;height:85px;overflow:hidden;transform:translate3d(0, 0, 0);-webkit-transform:translate3d(0, 0, 0)}/*!@.image-background*/.image-background.sc-se-banner-item{position:absolute;width:100%;height:85px;left:0;top:0;background-position:center, center;background-repeat:no-repeat;background-origin:content-box;background-size:cover}/*!@.background-overlay*/.background-overlay.sc-se-banner-item{position:absolute;top:0;bottom:0;left:0;right:0;width:100%;height:100%;background-image:-webkit-gradient(linear, right top, left top, from(rgba(98, 100, 105, 0)), to(rgba(0, 0, 0, 0.8)));background-image:linear-gradient(270deg, rgba(98, 100, 105, 0) 0%, rgba(0, 0, 0, 0.8) 100%)}@media screen and (min-width: 768px){/*!@.image-container,\n.image-background*/.image-container.sc-se-banner-item,.image-background.sc-se-banner-item{height:350px}}@media screen and (min-width: 900px){/*!@.image-container*/.image-container.sc-se-banner-item{position:absolute;top:0;bottom:0;left:0;right:0}/*!@.banner-section-wrapper*/.banner-section-wrapper.sc-se-banner-item{padding:50px 95px;height:250px}/*!@::slotted(se-block)*/.sc-se-banner-item-s>se-block{width:40% !important;min-width:330px}/*!@::slotted(se-block.block-bg-none)*/.sc-se-banner-item-s>se-block.block-bg-none{color:#FFFFFF}}";

class BannerItemComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates the active banner item in your banner component.
         */
        this.active = false;
        this.didChange = createEvent(this, "didChange", 7);
    }
    activeDidChange() {
        if (this.active) {
            this.didChange.emit();
        }
    }
    setBlockTransparency() {
        Array.from(this.el.querySelectorAll('se-block')).forEach((item) => {
            item.classList.add('banner-child');
        });
    }
    setButtonClass() {
        Array.from(this.el.querySelectorAll('se-button')).forEach((item) => {
            item.classList.add('banner-child');
        });
    }
    componentWillLoad() {
        this.setBlockTransparency();
        this.setButtonClass();
    }
    componentWillUpdate() {
        this.setBlockTransparency();
        this.setButtonClass();
    }
    render() {
        return (h(Host, { class: { 'active': this.active } }, h("div", { class: "image-container" }, h("div", { class: "image-background", style: { backgroundImage: this.imageUrl } }), h("div", { class: "background-overlay" })), h("div", { class: "banner-section-wrapper" }, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "active": ["activeDidChange"]
    }; }
    static get style() { return bannerItemCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-banner-item",
        "$members$": {
            "imageUrl": [1, "image-url"],
            "active": [1028]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const blockCss = "/*!@:host*/.sc-se-block-h{position:relative;display:-ms-flexbox;display:flex}/*!@:host(.block-flex)*/.block-flex.sc-se-block-h{width:100%;height:100%;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}/*!@:host(.block-block)*/.block-block.sc-se-block-h{width:auto;height:auto}/*!@:host(.block-block) .block-body*/.block-block.sc-se-block-h .block-body.sc-se-block{overflow:unset}/*!@:host(.block-grid)*/.block-grid.sc-se-block-h{width:100%;height:100%}/*!@:host(.block-grid) .block-body*/.block-grid.sc-se-block-h .block-body.sc-se-block{overflow:unset}/*!@:host(.grid-large)*/.grid-large.sc-se-block-h{grid-column:span 2;grid-row:span 2}/*!@:host(.grid-vertical)*/.grid-vertical.sc-se-block-h{grid-row:span 2}/*!@:host(.grid-horizontal)*/.grid-horizontal.sc-se-block-h{grid-column:span 2}/*!@:host(a *:not(a))*/a.sc-se-block-h *.sc-se-block:not(a){color:initial;text-decoration:none}/*!@.clickable, .clickable-nobar*/.clickable.sc-se-block,.clickable-nobar.sc-se-block{position:relative}/*!@.clickable:hover, .clickable-nobar:hover*/.clickable.sc-se-block:hover,.clickable-nobar.sc-se-block:hover{cursor:pointer;-webkit-box-shadow:0 0 16px 2px rgba(0, 0, 0, 0.15);box-shadow:0 0 16px 2px rgba(0, 0, 0, 0.15)}/*!@.clickable:not(-nobar):hover:before*/.clickable.sc-se-block:not(-nobar):hover:before{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);height:3px}/*!@.clickable:not(-nobar):before*/.clickable.sc-se-block:not(-nobar):before{content:\"\";background:rgba(255, 255, 255, 0);position:absolute;top:0;left:0;width:calc(100%);max-width:calc(100%);text-align:center;-webkit-transition:0.2s;transition:0.2s}/*!@.clickable.corner-none:before*/.clickable.corner-none.sc-se-block:before{border-radius:0 0 0 0}/*!@.clickable.corner-nano:before*/.clickable.corner-nano.sc-se-block:before{border-radius:2px 2px 0 0}/*!@.clickable.corner-small:before*/.clickable.corner-small.sc-se-block:before{border-radius:4px 4px 0 0}/*!@.block-body*/.block-body.sc-se-block{-webkit-transition:0.2s;transition:0.2s;overflow:auto;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}/*!@.block-body.basic*/.block-body.basic.sc-se-block{margin:0}/*!@.block-body.widget*/.block-body.widget.sc-se-block{margin:8px}/*!@.block-body.card*/.block-body.card.sc-se-block{border-radius:4px;margin:16px;border:1px solid;border-color:#E6E6E6}/*!@.block-body.card-old*/.block-body.card-old.sc-se-block{border-radius:4px;margin:16px;-webkit-box-shadow:0 0 1px 0 rgba(51, 51, 51, 0.14), 0 2px 7px 0 rgba(51, 51, 51, 0.2);box-shadow:0 0 1px 0 rgba(51, 51, 51, 0.14), 0 2px 7px 0 rgba(51, 51, 51, 0.2)}/*!@.block-body.corner-none*/.block-body.corner-none.sc-se-block{border-radius:0}/*!@.block-body.corner-nano*/.block-body.corner-nano.sc-se-block{border-radius:2px}/*!@.block-body.corner-small*/.block-body.corner-small.sc-se-block{border-radius:4px}/*!@.block-body.margin-none*/.block-body.margin-none.sc-se-block{margin:0}/*!@.block-body.margin-small*/.block-body.margin-small.sc-se-block{margin:4px}/*!@.block-body.margin-medium*/.block-body.margin-medium.sc-se-block{margin:8px}/*!@.block-body.margin-large*/.block-body.margin-large.sc-se-block{margin:16px}/*!@.block-body.margin-xlarge*/.block-body.margin-xlarge.sc-se-block{margin:32px}/*!@.block-body.outline-standard*/.block-body.outline-standard.sc-se-block{border:1px solid;border-color:#E6E6E6}/*!@.block-body.outline-primary*/.block-body.outline-primary.sc-se-block{border:1px solid;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}/*!@.block-body.outline-secondary*/.block-body.outline-secondary.sc-se-block{border:1px solid;border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}/*!@.block-body.block-bg-standard*/.block-body.block-bg-standard.sc-se-block{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}/*!@.block-body.block-bg-none*/.block-body.block-bg-none.sc-se-block{background-color:transparent}";

class BlockComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines whether or not a divider will be applied to the se-block header and footer.
         * `true` will add a divider to the se-block-header and se-block-footer, if they are present.
         * `false` will remove dividers on the se-block header and se-block-footer, if they are present.
         */
        this.divider = false;
        /**
         * Defines the se-block outline.
         * Default setting is `false`.
         * Setting this property to `true` will add a 1px border.
         */
        this.outline = false;
        /**
         * Defines the se-block outline color.
         * Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color.
         * `primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected.
         * `secondary` defines the outline color as `$se-sky-blue`.
         */
        this.outlineColor = "standard";
        /**
         * Defines the se-block item's ability to appear clickable / selectable.
         * Default setting is `false`, resulting in no hover effects on the block level.
         * `true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block.
         */
        this.clickable = false;
        /**
         * Defines clickable se-block item's bar on hover.
         * Default setting is `false`.
         * `true` renders a `$se-life-green` colored bar on a hover.
         */
        this.clickableBar = false;
        /**
         * Defines how to display the element.
         * `flex` is the default display.
         * `block` helps in specific cases. Make sure you know what you are doing.
         */
        this.display = "flex";
        /**
         * Optional property that defines the background color of the block.
         * Default setting is `alternative`, rendering the "alternative" theme background.
         * `none` has no background.
         * `standard` renders the "standard" theme background.
         */
        this.color = "alternative";
        /**
         * When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item.
         * Default setting is `false`, spanning 1 row and 1 column (1/1).
         * `true` spans 2 rows and 2 columns (2/2).
         * `vertical` spans 2 rows (2/1).
         * `horizontal` spans 2 columns (1/2).
         */
        this.enlarged = false;
        /**
         * Displays the loading icon if set to `true`.  Default setting is `false`.
         */
        this.loading = false;
        /**
         * Defines the visual appearance of a block.
         * Default setting is `basic`, which will remove any spacing.
         * `widget` will create a flat widget look and feel with a `medium` margin around it.
         * `card` will create a card look and feel with rounded corners, and with a `large` margin around it.
         * Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         */
        this.option = "basic";
    }
    dividerDidChange() {
        this.updateItem();
    }
    widthDidChange() {
        this.updateSize();
    }
    heightDidChange() {
        this.updateSize();
    }
    optionDidChange() {
        this.updateItem();
    }
    componentWillLoad() {
        this.updateSize();
        this.updateItem();
    }
    updateItem() {
        if (this.option !== undefined && this.divider === undefined) {
            if (this.option === "card" || this.option === "card-old") {
                this.divider = false;
            }
            else
                this.divider = true;
        }
        const childElms = "se-block-header, se-block-content, se-block-footer";
        Array.from(this.el.querySelectorAll(childElms)).forEach((item) => {
            // have to do this because otherwise blocks inside other blocks get settings overridden by higher ancestors
            // Using "closest" function in case the current element is wrapped inside another one
            if (item.closest('se-block') === this.el) {
                item.divider = this.divider;
                !item.option ? item.option = this.option : '';
            }
        });
    }
    updateSize() {
        // reset all sizes first
        this.el.style.width = '';
        this.el.style.minWidth = '';
        this.el.style.height = '';
        this.el.style.minHeight = '';
        if (this.width) {
            this.el.style.width = this.width;
            this.el.style.minWidth = this.width;
        }
        if (this.height) {
            this.el.style.height = this.height;
            this.el.style.minHeight = this.width;
        }
    }
    render() {
        const outlineColor = this.outlineColor ? `-${this.outlineColor}` : '';
        const outline = this.outline === true ? `outline${outlineColor}` : 'outline-false';
        let enlargedClass = "";
        if (this.display === "grid") {
            switch (this.enlarged) {
                case false:
                    break;
                case "vertical":
                    enlargedClass = "grid-vertical";
                    break;
                case "horizontal":
                    enlargedClass = "grid-horizontal";
                    break;
                default:
                    enlargedClass = "grid-large";
                    break;
            }
        }
        return (h(Host, { class: [
                this.display ? `block-${this.display}` : '',
                enlargedClass,
                `block-bg-${this.color}`
            ].join(' ') }, h("div", { class: [
                'block-body',
                this.clickable === true ? `${this.clickableBar !== false ? "clickable" : "clickable-nobar"}` : '',
                this.option,
                this.outline !== undefined ? outline : '',
                this.corner !== undefined ? `corner-${this.corner}` : '',
                this.margin !== undefined ? `margin-${this.margin}` : '',
                this.color !== undefined ? `block-bg-${this.color}` : 'block-bg-alternative'
            ].join(' ') }, this.loading ? h("se-loading", { loading: this.loading }) : '', h("slot", null))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "divider": ["dividerDidChange"],
        "width": ["widthDidChange"],
        "height": ["heightDidChange"],
        "option": ["optionDidChange"]
    }; }
    static get style() { return blockCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-block",
        "$members$": {
            "divider": [4],
            "outline": [4],
            "outlineColor": [1, "outline-color"],
            "corner": [1],
            "clickable": [4],
            "clickableBar": [4, "clickable-bar"],
            "margin": [1],
            "display": [1],
            "color": [1],
            "width": [1],
            "height": [1],
            "enlarged": [1032],
            "loading": [1028],
            "option": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const blockContentCss = "/*!@:host*/.sc-se-block-content-h{overflow-x:hidden;position:relative;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}/*!@.se-block-content*/.se-block-content.sc-se-block-content{padding:8px 16px}/*!@.fill-content*/.fill-content.sc-se-block-content{padding:0}";

class BlockContent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return (h("div", { class: ['se-block-content', this.option ? `${this.option}-content` : ''].join(' ') }, h("slot", null)));
    }
    get el() { return getElement(this); }
    static get style() { return blockContentCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-block-content",
        "$members$": {
            "option": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const blockFooterCss = "/*!@.se-block-footer*/.se-block-footer.sc-se-block-footer{position:relative;padding:4px;min-height:40px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}/*!@.flex*/.flex.sc-se-block-footer{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}/*!@.card*/.card.sc-se-block-footer{border-top:none}/*!@.column*/.column.sc-se-block-footer{-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}";

class BlockFooter {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the direction of the flex element.
         * Default setting is `row`. This is perfect to use with flex content.
         * `column` is useful in specific cases. Make sure you know what you are doing.
         */
        this.direction = "row";
    }
    render() {
        return (h(Host, null, this.divider ? h("se-divider", null) : null, h("div", { class: ['se-block-footer', this.option, this.direction].join(' ') }, h("div", { class: "flex" }, h("slot", { name: "start" })), h("slot", null))));
    }
    get el() { return getElement(this); }
    static get style() { return blockFooterCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-block-footer",
        "$members$": {
            "divider": [4],
            "option": [1],
            "direction": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const blockHeaderCss = "/*!@.se-block-header*/.se-block-header.sc-se-block-header{position:relative;padding:4px 4px 2px 8px;font-size:20px;min-height:40px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}/*!@.flex*/.flex.sc-se-block-header{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}/*!@div.middle*/div.middle.sc-se-block-header{font-weight:300;line-height:30px;font-size:22px;margin:8px}/*!@.card*/.card.sc-se-block-header{padding-bottom:4px}/*!@.fill*/.fill.sc-se-block-header{padding:0}/*!@.fill div.middle*/.fill.sc-se-block-header div.middle.sc-se-block-header{margin:0;max-width:100%}/*!@::slotted(h1), ::slotted(h2), ::slotted(h3),\n::slotted(h4), ::slotted(h5), ::slotted(h6)*/.sc-se-block-header-s>h1,.sc-se-block-header-s>h2,.sc-se-block-header-s>h3,.sc-se-block-header-s>h4,.sc-se-block-header-s>h5,.sc-se-block-header-s>h6{margin-top:0 !important;margin-bottom:0 !important}";

class BlockHeader {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return (h(Host, null, h("div", { class: ['se-block-header', this.option].join(' ') }, h("slot", { name: "start" }), h("div", { class: "flex middle" }, h("slot", null)), h("slot", { name: "end" })), this.divider ? h("se-divider", null) : null));
    }
    get el() { return getElement(this); }
    static get style() { return blockHeaderCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-block-header",
        "$members$": {
            "divider": [4],
            "option": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const breadcrumbCss = "/*!@:host*/.sc-se-breadcrumb-h{display:-ms-flexbox;display:flex;cursor:pointer}/*!@:host ol*/.sc-se-breadcrumb-h ol.sc-se-breadcrumb{margin:0;padding:0}";

class BreadcrumbComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.items = [];
    }
    updateLastItem() {
        this.items = Array.from(this.el.querySelectorAll('se-breadcrumb-item'));
        this.items.forEach((item) => {
            item.isLast = (item === this.items[this.items.length - 1]);
        });
    }
    watchItemList() {
        this.observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length || mutation.removedNodes.length) {
                    this.updateLastItem();
                }
            });
        });
        this.observer.observe(this.el, { childList: true });
    }
    componentWillLoad() {
        this.updateLastItem();
        this.watchItemList();
    }
    componentDidUnload() {
        this.observer.disconnect();
    }
    render() {
        return (h("nav", { "aria-label": "breadcrumb" }, h("ol", null, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get style() { return breadcrumbCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-breadcrumb",
        "$members$": {
            "items": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const breadcrumbItemCss = "/*!@:host div*/.sc-se-breadcrumb-item-h div.sc-se-breadcrumb-item{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}/*!@:host .breadcrumb-item*/.sc-se-breadcrumb-item-h .breadcrumb-item.sc-se-breadcrumb-item{display:inline;color:#333333;font-size:14px;line-height:14px;padding-right:4px;vertical-align:super}/*!@:host .breadcrumb-item:hover*/.sc-se-breadcrumb-item-h .breadcrumb-item.sc-se-breadcrumb-item:hover{text-decoration:underline}/*!@:host a*/.sc-se-breadcrumb-item-h a.sc-se-breadcrumb-item{color:inherit;text-decoration:inherit;cursor:inherit}/*!@:host se-icon*/.sc-se-breadcrumb-item-h se-icon.sc-se-breadcrumb-item{cursor:default}/*!@:host se-icon:active, :host se-icon:focus*/.sc-se-breadcrumb-item-h se-icon.sc-se-breadcrumb-item:active,.sc-se-breadcrumb-item-h se-icon.sc-se-breadcrumb-item:focus{color:inherit;background-color:inherit}/*!@:host .selected .breadcrumb-item*/.sc-se-breadcrumb-item-h .selected.sc-se-breadcrumb-item .breadcrumb-item.sc-se-breadcrumb-item{cursor:default;text-decoration:none;color:#CBCBCB}";

class BreadcrumbItemComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates whether or not the breadcrumb item should be selected.  The default setting is `false`.
         */
        this.isLast = false;
    }
    render() {
        return (h(Host, { role: "listitem" }, h("div", { class: { 'selected': this.isLast } }, this.isLast ?
            h("span", { "aria-current": 'page', class: "breadcrumb-item" }, h("slot", null))
            :
                [h("span", { class: "breadcrumb-item" }, h("a", { href: this.href }, h("slot", null))),
                    h("se-icon", { size: "small" }, h("span", { innerHTML: arrow2_right }))])));
    }
    static get style() { return breadcrumbItemCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-breadcrumb-item",
        "$members$": {
            "isLast": [4, "is-last"],
            "href": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const buttonCss = "/*!@:host*/.sc-se-button-h{min-width:0;display:-ms-inline-flexbox;display:inline-flex}/*!@:host(.disabled)*/.disabled.sc-se-button-h{pointer-events:none}/*!@:host(.display-block)*/.display-block.sc-se-button-h{display:-ms-flexbox;display:flex}/*!@:host(.display-block) button*/.display-block.sc-se-button-h button.sc-se-button{width:100%;margin-top:8px;margin-left:0;margin-right:0}/*!@:host(.banner-child) button*/.banner-child.sc-se-button-h button.sc-se-button{height:40px;margin-right:16px}@media screen and (max-width: 767px){/*!@:host(.banner-child)*/.banner-child.sc-se-button-h{display:-ms-flexbox;display:flex}/*!@:host(.banner-child) button*/.banner-child.sc-se-button-h button.sc-se-button{width:100%}}@media screen and (min-width: 900px){/*!@:host(.banner-child) button.outline*/.banner-child.sc-se-button-h button.outline.sc-se-button{color:#FFFFFF;border-color:#FFFFFF}}/*!@:host(.grouped) button*/.grouped.sc-se-button-h button.sc-se-button{margin:4px 0;height:32px;font-size:16px;padding:0 8px;font-weight:300;line-height:1.2 !important;font-size:12px;border-radius:0;border-left:1px solid #333333}/*!@:host(.grouped) button.iconOnly*/.grouped.sc-se-button-h button.iconOnly.sc-se-button{padding:0 4px}/*!@:host(.grouped:first-child) button*/.grouped.sc-se-button-h:first-child button.sc-se-button{margin-left:4px;border-left:none;border-top-left-radius:2px;border-bottom-left-radius:2px}/*!@:host(.grouped:last-child) button*/.grouped.sc-se-button-h:last-child button.sc-se-button{margin-right:4px;border-top-right-radius:2px;border-bottom-right-radius:2px}/*!@:host(.backtotop) button.fab*/.backtotop.sc-se-button-h button.fab.sc-se-button{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#333333}/*!@:host(.backtotop) button.fab:hover*/.backtotop.sc-se-button-h button.fab.sc-se-button:hover{background-color:#0F0F0F;background-color:var(--se-standard-contrast, #0F0F0F)}/*!@:host([slot=trigger]) button*/[slot=trigger].sc-se-button-h button.sc-se-button{padding-right:22px}/*!@:host([slot=trigger]) button:after*/[slot=trigger].sc-se-button-h button.sc-se-button:after{content:\"\";position:absolute;top:50%;right:12px;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid}/*!@::slotted(se-icon[slot=icon]), se-icon*/.sc-se-button-s>se-icon[slot=icon],se-icon.sc-se-button{margin-right:8px}/*!@:host[icon-only] ::slotted(se-icon[slot=icon])*/.sc-se-button-h[icon-only] .sc-se-button-s>se-icon[slot=icon]{margin-right:0}/*!@button*/button.sc-se-button{padding:0 16px;margin:4px;border:none;border-radius:2px;outline:none;-webkit-transition:0.2s;transition:0.2s;cursor:pointer;font-family:inherit;font-weight:300;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-ms-flex-pack:center;justify-content:center}/*!@button.iconOnly*/button.iconOnly.sc-se-button{padding:0 4px}/*!@button.iconOnly ::slotted(se-icon[slot=icon]), button.iconOnly se-icon*/button.iconOnly .sc-se-button-s>se-icon[slot=icon],button.iconOnly.sc-se-button se-icon.sc-se-button{margin-right:0}/*!@button[disabled]*/button[disabled].sc-se-button{cursor:default;opacity:0.5}/*!@button.raised*/button.raised.sc-se-button{-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3)}/*!@button.inherit*/button.inherit.sc-se-button{background-color:transparent !important;color:inherit !important}/*!@button.nano*/button.nano.sc-se-button{height:24px}/*!@button.nano .text*/button.nano.sc-se-button .text.sc-se-button{font-size:12px}/*!@button.small*/button.small.sc-se-button{height:32px}/*!@button.small .text*/button.small.sc-se-button .text.sc-se-button{font-size:16px}/*!@button.medium*/button.medium.sc-se-button{height:40px}/*!@button.medium .text*/button.medium.sc-se-button .text.sc-se-button{font-size:16px}/*!@button.large*/button.large.sc-se-button{height:48px}/*!@button.large .text*/button.large.sc-se-button .text.sc-se-button{font-size:18px}/*!@button.standard*/button.standard.sc-se-button{color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}/*!@button.standard:hover, button.standard:focus*/button.standard.sc-se-button:hover,button.standard.sc-se-button:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@button.standard.outline*/button.standard.outline.sc-se-button{border:1px solid;border-color:#333333;background-color:transparent}/*!@button.standard.outline:hover, button.standard.outline:focus*/button.standard.outline.sc-se-button:hover,button.standard.outline.sc-se-button:focus{background-color:rgba(203, 203, 203, 0.2)}/*!@button.alternative*/button.alternative.sc-se-button{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}/*!@button.alternative:hover, button.alternative:focus*/button.alternative.sc-se-button:hover,button.alternative.sc-se-button:focus{color:#0F0F0F;color:var(--se-hover-alternative-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-alternative, #CBCBCB)}/*!@button.alternative.outline*/button.alternative.outline.sc-se-button{border:1px solid;background-color:transparent;color:#FFFFFF;color:var(--se-alternative, #FFFFFF);border-color:#FFFFFF;border-color:var(--se-alternative, #FFFFFF)}/*!@button.alternative.outline:hover, button.alternative.outline:focus*/button.alternative.outline.sc-se-button:hover,button.alternative.outline.sc-se-button:focus{background-color:rgba(203, 203, 203, 0.6)}/*!@button.primary*/button.primary.sc-se-button{color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF);background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}/*!@button.primary:hover, button.primary:focus*/button.primary.sc-se-button:hover,button.primary.sc-se-button:focus{color:#FFFFFF;color:var(--se-hover-primary-contrast, #FFFFFF);background-color:#32AD3C;background-color:var(--se-hover-primary, #32AD3C)}/*!@button.primary.outline*/button.primary.outline.sc-se-button{border:1px solid;background-color:transparent;color:#3DCD58;color:var(--se-primary, #3DCD58);border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}/*!@button.primary.outline:hover, button.primary.outline:focus*/button.primary.outline.sc-se-button:hover,button.primary.outline.sc-se-button:focus{background-color:rgba(61, 205, 88, 0.3)}/*!@button.primary.outline[disabled]*/button.primary.outline[disabled].sc-se-button{background-color:transparent}/*!@button.secondary*/button.secondary.sc-se-button{color:#FFFFFF;color:var(--se-secondary-contrast, #FFFFFF);background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6)}/*!@button.secondary:hover, button.secondary:focus*/button.secondary.sc-se-button:hover,button.secondary.sc-se-button:focus{color:#FFFFFF;color:var(--se-hover-secondary-contrast, #FFFFFF);background-color:#0087CD;background-color:var(--se-hover-secondary, #0087CD)}/*!@button.secondary.outline*/button.secondary.outline.sc-se-button{background-color:transparent;border:1px solid;color:#42B4E6;color:var(--se-secondary, #42B4E6);border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}/*!@button.secondary.outline:hover, button.secondary.outline:focus*/button.secondary.outline.sc-se-button:hover,button.secondary.outline.sc-se-button:focus{background-color:rgba(66, 180, 230, 0.3)}/*!@button.secondary.outline[disabled]*/button.secondary.outline[disabled].sc-se-button{background-color:transparent}/*!@button.selected, button.selected:focus, button.outline.selected, button.outline.selected:focus*/button.selected.sc-se-button,button.selected.sc-se-button:focus,button.outline.selected.sc-se-button,button.outline.selected.sc-se-button:focus{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@button.login, button.signup*/button.login.sc-se-button,button.signup.sc-se-button{height:32px;font-size:18px;line-height:22px}/*!@button.fab*/button.fab.sc-se-button{cursor:pointer;border-radius:50%;font-size:24px;width:56px;height:56px;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28)}/*!@button.fab:hover, button.fab:focus*/button.fab.sc-se-button:hover,button.fab.sc-se-button:focus{-webkit-box-shadow:0 0 8px rgba(0, 0, 0, 0.14), 0 8px 16px rgba(0, 0, 0, 0.28);box-shadow:0 0 8px rgba(0, 0, 0, 0.14), 0 8px 16px rgba(0, 0, 0, 0.28)}/*!@button.fab.alternative*/button.fab.alternative.sc-se-button{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#3DCD58;color:var(--se-primary, #3DCD58)}/*!@button.minifab*/button.minifab.sc-se-button{width:40px;height:40px;border-radius:50%;margin:0 20px 20px 0px;padding:0;margin:0 0 15px 0;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}/*!@button.minifab:hover, button.minifab:focus*/button.minifab.sc-se-button:hover,button.minifab.sc-se-button:focus{-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@button.minifab[data-tooltip]*/button.minifab[data-tooltip].sc-se-button{overflow:visible}/*!@button.minifab[data-tooltip]:before*/button.minifab[data-tooltip].sc-se-button:before{font-weight:300;border-radius:23.27px;content:attr(data-tooltip);font-size:12px;padding:5px 7px;margin-right:12px;position:absolute;right:100%;white-space:nowrap;color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}/*!@button.standard:active, button.alternative:active, button.primary:active, button.secondary:active, button.outline:active, button.minifab:active*/button.standard.sc-se-button:active,button.alternative.sc-se-button:active,button.primary.sc-se-button:active,button.secondary.sc-se-button:active,button.outline.sc-se-button:active,button.minifab.sc-se-button:active{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@button.outline:active, button.outline.selected*/button.outline.sc-se-button:active,button.outline.selected.sc-se-button{border-color:#626469;border-color:var(--se-selected, #626469)}";

class ButtonComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the visual appearance of the button.
         * `flat` is the default option, which includes a gray background.
         * `raised` adds a box shadow to the button.
         * `outline` adds a border to the button.
         * `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application.
         */
        this.option = 'flat';
        /**
         * Defines the size of the button.
         * `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component.
         * `small` is the default option, with a 14px font and a 32px height.
         * `medium` sets the font to 16px and the height to 40px.
         * `large` sets the font to 18px and the height to 48px.
         */
        this.size = 'small';
        /**
         * Defines the background color of the button. The default setting is `standard`.
         */
        this.color = 'standard';
        /**
         * Property to specify if the button should only display an icon (no extra spacing).
         */
        this.iconOnly = false;
        /**
        * Optional property.
        * `button`	is the default setting, creating a clickable button.
        * `submit`	creates a "submit" button (useful to submit form-data).
        * `reset`	creates a reset button (useful to reset form-data to its initial values).
        */
        this.type = 'button';
        /**
        * Optional property that defines if the button is disabled.  Set to `false` by default.
        */
        this.disabled = false;
        this.didClick = createEvent(this, "didClick", 7);
    }
    optionDidChange() {
        if (this.option === 'login') {
            this.color = 'primary';
            this.block = true;
        }
        if (this.option === 'signup') {
            this.color = 'secondary';
            this.block = true;
        }
    }
    /**
     * Sets the disabled property for your button from the parent component.
     * @param val set to `true` or `false`.
     */
    async setDisabled(val) {
        this.disabled = val;
    }
    /**
     * Indicates if the button is part of a group of buttons within the `se-radio-group` component.
     */
    async setGrouped() {
        this.grouped = true;
    }
    buttonClickedHandler(ev) {
        if (this.type !== 'button') {
            // this button wants to specifically submit a form
            // climb up the dom to see if we're in a <form>
            // and if so, then use JS to submit it
            // https://github.com/ionic-team/ionic/blob/master/core/src/components/button/button.tsx
            const form = this.el.closest('form');
            if (form) {
                ev.preventDefault();
                const fakeButton = window.document.createElement('button');
                fakeButton.type = this.type;
                fakeButton.style.display = 'none';
                form.appendChild(fakeButton);
                fakeButton.click();
                fakeButton.remove();
            }
        }
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    toggle() {
        if (this.disabled)
            return;
        if (this.grouped) {
            this.selected = !this.selected;
            this.didClick.emit({ selected: this.selected, value: this.value });
        }
        if (this.option === 'minifab') {
            this.didClick.emit({ value: this.caption });
        }
    }
    componentWillLoad() {
        this.optionDidChange();
    }
    componentDidLoad() {
        this.setButtonId();
    }
    render() {
        const { color, size, option, icon, iconColor, iconOnly, selected } = this;
        const isIconOnly = iconOnly || option && option.includes('fab');
        return (h(Host, { class: { 'disabled': this.disabled, 'grouped': this.grouped, 'display-block': this.block, 'minifab': this.option === 'minifab' } }, h("button", { disabled: this.disabled, "data-tooltip": this.caption, type: this.type, id: this.innerId, onClick: () => this.toggle(), class: {
                [color]: true,
                [size]: true,
                [option]: true,
                'selected': selected,
                'iconOnly': isIconOnly
            } }, icon && h("se-icon", { size: this.grouped && this.size !== 'nano' ? 'medium' : 'small', color: iconColor }, icon), h("slot", { name: "icon" }), !isIconOnly && h("span", { class: "text" }, h("slot", null)))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "option": ["optionDidChange"]
    }; }
    static get style() { return buttonCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-button",
        "$members$": {
            "option": [1],
            "size": [1],
            "color": [1025],
            "value": [1],
            "icon": [1],
            "iconColor": [1, "icon-color"],
            "iconOnly": [4, "icon-only"],
            "type": [1],
            "disabled": [4],
            "selected": [1028],
            "caption": [1],
            "block": [1028],
            "grouped": [32],
            "innerId": [32],
            "setDisabled": [64],
            "setGrouped": [64]
        },
        "$listeners$": [[0, "click", "buttonClickedHandler"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const checkboxCss = "/*!@div*/div.sc-se-checkbox{display:inline-block}/*!@.required*/.required.sc-se-checkbox{color:#DC0A0A;color:var(--se-error, #DC0A0A);padding-left:3px}/*!@.checkbox-label*/.checkbox-label.sc-se-checkbox{font-weight:300;padding-left:8px}/*!@.checkbox*/.checkbox.sc-se-checkbox{-moz-align-items:center;-ms-flex-align:center;align-items:center}/*!@.checkbox .checkbox-container*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox{position:relative;padding-left:16px;font-weight:300;line-height:1.2 !important;font-size:14px;margin:8px;margin-right:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}/*!@.checkbox .checkbox-container input*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox{height:0;width:0;opacity:0;margin:0;position:absolute;clip:rect(1px, 1px, 1px, 1px)}/*!@.checkbox .checkbox-container input:checked ~ .checkmark[data-color=primary]*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox:checked~.checkmark[data-color=primary].sc-se-checkbox{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);border:1px solid;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}/*!@.checkbox .checkbox-container input:checked ~ .checkmark[data-color=secondary]*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox:checked~.checkmark[data-color=secondary].sc-se-checkbox{background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6);border:1px solid;border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}/*!@.checkbox .checkbox-container input:checked ~ .checkmark[data-color=success]*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox:checked~.checkmark[data-color=success].sc-se-checkbox{background-color:#3DCD58;background-color:var(--se-success, #3DCD58);border:1px solid;border-color:#3DCD58;border-color:var(--se-success, #3DCD58)}/*!@.checkbox .checkbox-container input:checked ~ .checkmark:after*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox:checked~.checkmark.sc-se-checkbox:after{display:block}/*!@.checkbox .checkbox-container input[disabled]:checked ~ .checkmark*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox input[disabled].sc-se-checkbox:checked~.checkmark.sc-se-checkbox{opacity:0.5}/*!@.checkbox .checkbox-container .checkmark*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox .checkmark.sc-se-checkbox{position:absolute;top:1px;left:-8px;height:14px;width:14px;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border:1px solid;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);border-radius:2px;-webkit-transition:0.2s;transition:0.2s}/*!@.checkbox .checkbox-container .checkmark:after*/.checkbox.sc-se-checkbox .checkbox-container.sc-se-checkbox .checkmark.sc-se-checkbox:after{content:\"\";position:absolute;display:none;bottom:3px;left:5px;width:3px;height:9px;border:solid #FFFFFF;border-width:0 1px 1px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}/*!@.checkbox .checkbox-container.checkbox-label-left*/.checkbox.sc-se-checkbox .checkbox-container.checkbox-label-left.sc-se-checkbox{padding-left:0;margin:0}/*!@.checkbox .checkbox-container.checkbox-label-left .checkmark*/.checkbox.sc-se-checkbox .checkbox-container.checkbox-label-left.sc-se-checkbox .checkmark.sc-se-checkbox{left:auto}/*!@.checkbox .checkbox-container[data-disabled] .checkmark*/.checkbox.sc-se-checkbox .checkbox-container[data-disabled].sc-se-checkbox .checkmark.sc-se-checkbox{opacity:0.5}/*!@.switch .checkbox-label*/.switch.sc-se-checkbox .checkbox-label.sc-se-checkbox{padding-left:0;vertical-align:middle}/*!@.switch .checkbox-container*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox{text-align:left;vertical-align:middle;width:44px;height:26px;border-radius:13px;border:none;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);display:inline-block;position:relative;cursor:pointer}/*!@.switch .checkbox-container.checkbox-label-right*/.switch.sc-se-checkbox .checkbox-container.checkbox-label-right.sc-se-checkbox{margin-left:0}/*!@.switch .checkbox-container.checkbox-label-right ~ .checkbox-label*/.switch.sc-se-checkbox .checkbox-container.checkbox-label-right.sc-se-checkbox~.checkbox-label.sc-se-checkbox{padding-left:6px}/*!@.switch .checkbox-container .checkmark*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox .checkmark.sc-se-checkbox{display:block;width:100%;height:100%;border-radius:100%}/*!@.switch .checkbox-container .checkmark:before, .switch .checkbox-container .checkmark:after*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox .checkmark.sc-se-checkbox:before,.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox .checkmark.sc-se-checkbox:after{content:\"\";cursor:pointer;position:absolute}/*!@.switch .checkbox-container .checkmark:before*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox .checkmark.sc-se-checkbox:before{width:100%;height:100%;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;border:1px solid #E6E6E6;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border-radius:13px;-webkit-transition:all 0.2s ease-out 0.1s;transition:all 0.2s ease-out 0.1s;-webkit-transform:scale(1);transform:scale(1)}/*!@.switch .checkbox-container .checkmark:after*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox .checkmark.sc-se-checkbox:after{top:50%;left:1px;z-index:3;-webkit-transition:-webkit-transform 0.1s linear;transition:-webkit-transform 0.1s linear;transition:transform 0.1s linear;transition:transform 0.1s linear, -webkit-transform 0.1s linear;width:24px;height:24px;-webkit-transform:translate3d(0, -50%, 0);transform:translate3d(0, -50%, 0);background-color:#fff;border-radius:100%;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3)}/*!@.switch .checkbox-container input*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox{opacity:0;display:none}/*!@.switch .checkbox-container input:checked ~ span:before*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox:checked~span.sc-se-checkbox:before{border:1px solid;background-color:#3DCD58;background-color:var(--se-success, #3DCD58);border-color:#3DCD58;border-color:var(--se-success, #3DCD58)}/*!@.switch .checkbox-container input:checked ~ span:after*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox input.sc-se-checkbox:checked~span.sc-se-checkbox:after{-webkit-transform:translate3d(75%, -50%, 0);transform:translate3d(75%, -50%, 0)}/*!@.switch .checkbox-container input[disabled]:checked ~ span:before*/.switch.sc-se-checkbox .checkbox-container.sc-se-checkbox input[disabled].sc-se-checkbox:checked~span.sc-se-checkbox:before{opacity:0.5}/*!@.switch .checkbox-container[data-disabled] .checkmark*/.switch.sc-se-checkbox .checkbox-container[data-disabled].sc-se-checkbox .checkmark.sc-se-checkbox{cursor:default}/*!@.switch .checkbox-container[data-disabled] .checkmark:before*/.switch.sc-se-checkbox .checkbox-container[data-disabled].sc-se-checkbox .checkmark.sc-se-checkbox:before{cursor:default}/*!@.switch .checkbox-container[data-disabled] .checkmark:after*/.switch.sc-se-checkbox .checkbox-container[data-disabled].sc-se-checkbox .checkmark.sc-se-checkbox:after{cursor:default}/*!@.onoff .on-off-wrapper*/.onoff.sc-se-checkbox .on-off-wrapper.sc-se-checkbox{display:-ms-inline-flexbox;display:inline-flex}/*!@.onoff button*/.onoff.sc-se-checkbox button.sc-se-checkbox{color:#333333;padding:6px 8px;border:none;outline:none;height:32px;font-size:14px;font-family:inherit;line-height:13px;font-weight:300;cursor:pointer;-webkit-transition:0.2s;transition:0.2s}/*!@.onoff button.active*/.onoff.sc-se-checkbox button.active.sc-se-checkbox{border-top-left-radius:2px;border-bottom-left-radius:2px;margin-right:0}/*!@.onoff button.active.selected*/.onoff.sc-se-checkbox button.active.selected.sc-se-checkbox{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#3DCD58;background-color:var(--se-success, #3DCD58)}/*!@.onoff button.inactive*/.onoff.sc-se-checkbox button.inactive.sc-se-checkbox{border-top-right-radius:2px;border-bottom-right-radius:2px;margin-left:0}/*!@.onoff button.inactive.selected*/.onoff.sc-se-checkbox button.inactive.selected.sc-se-checkbox{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#DC0A0A;background-color:var(--se-error, #DC0A0A)}/*!@.header button*/.header.sc-se-checkbox button.sc-se-checkbox{height:24px;font-size:12px}/*!@.standard button*/.standard.sc-se-checkbox button.sc-se-checkbox{background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}/*!@.alternative button*/.alternative.sc-se-checkbox button.sc-se-checkbox{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}/*!@.disabled button*/.disabled.sc-se-checkbox button.sc-se-checkbox{cursor:default;color:#CBCBCB;opacity:0.5}/*!@.disabled button.active.selected, .disabled button.inactive.selected*/.disabled.sc-se-checkbox button.active.selected.sc-se-checkbox,.disabled.sc-se-checkbox button.inactive.selected.sc-se-checkbox{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}/*!@.disabled.standard button*/.disabled.standard.sc-se-checkbox button.sc-se-checkbox{background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}";

class CheckboxComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Determines the visual appearance of the component.
         * `checkbox` is the default option, which will render the component like a standard HTML checkbox.
         * `switch` renders the component like a toggle switch.
         * `onoff` renders the component like an "on/off" switch, with a red "off" button and a green "on" button.
         */
        this.option = 'checkbox';
        /**
         * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
         */
        this.required = false;
        /**
         * Defines the color of the checkbox for when the option is set to `checkbox` or `switch`.
         * The default value is `success`, rendering a green color.
         * The `secondary` setting renders a blue color.
         */
        this.color = 'success';
        /**
         * Defines the color schema of the checkbox when the option is set to `onoff`.
         * The default value is `standard`.
         */
        this.background = 'standard';
        /**
         * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        /**
           * The "checked" state of the checkbox, `false` by default.
           */
        this.selected = false;
        /**
         * Defines the text the user will see for the "on" or "active" part of the checkbox when option is set to `onoff`.  Set to `ON` by default.
         */
        this.textOn = 'ON';
        /**
         * Defines the text the user will see for the "off" or "inactive" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default.
         */
        this.textOff = 'OFF';
        /**
         * Reduces the visual height of the checkbox when the option is set to `onoff`.
         * Useful if the on/off checkbox is within a header element.
         */
        this.header = false;
        this.didChange = createEvent(this, "didChange", 7);
    }
    /**
     * Sets the required property on the checkbox element.  Used when the checkbox is within a form field.
     */
    async setRequired() {
        this.required = true;
    }
    setElementId() {
        let id = this.el.getAttribute('id');
        if (id && this.option === 'onoff') {
            this.el.shadowRoot.querySelector('button.active').setAttribute('id', 'wc-' + id + '-active');
            this.el.shadowRoot.querySelector('button.inactive').setAttribute('id', 'wc-' + id + '-inactive');
        }
        else if (id) {
            this.el.shadowRoot.querySelector('input').setAttribute('id', 'wc-' + id);
        }
    }
    handleClick() {
        if (!this.disabled) {
            this.selected = !this.selected;
            let checkboxObject = { value: this.value, selected: this.selected };
            this.didChange.emit(checkboxObject);
        }
    }
    componentDidLoad() {
        if (!this.labelPos) {
            this.labelPos = this.option === 'switch' ? 'left' : 'right';
        }
        this.setElementId();
    }
    render() {
        let markup, switchMarkup;
        if (this.option === 'switch' && this.required) {
            switchMarkup = [
                h("span", { class: "checkbox-label" }, this.label),
                h("span", { class: "required" }, "*")
            ];
        }
        else if (this.option === 'switch' && !this.required) {
            switchMarkup = h("span", { class: "checkbox-label" }, this.label);
        }
        if (this.option === 'onoff') {
            markup = (h("div", { class: "on-off-wrapper" }, h("button", { class: ['active', this.selected ? ' selected' : ''].join(' '), onClick: () => this.handleClick() }, this.textOn), h("button", { class: ['inactive', !this.selected ? ' selected' : ''].join(' '), onClick: () => this.handleClick() }, this.textOff)));
        }
        else {
            markup = (h("div", { class: "checkbox-wrapper" }, this.option === 'switch' && this.labelPos === 'left' ? switchMarkup : '', h("label", { class: ["checkbox-container", `checkbox-label-${this.labelPos}`].join(' '), "data-disabled": this.disabled }, this.option === 'checkbox' ? this.label : '', this.option === 'checkbox' && this.required ? h("span", { class: "required" }, "*") : '', h("input", { type: "checkbox", checked: this.selected, disabled: this.disabled, onClick: () => this.handleClick(), value: this.value }), h("span", { class: "checkmark", "data-color": this.color })), this.option === 'switch' && this.labelPos === 'right' ? switchMarkup : ''));
        }
        return h("div", { class: [this.option, this.background, this.header ? 'header' : '', this.disabled ? 'disabled' : ''].join(' ') }, markup);
    }
    get el() { return getElement(this); }
    static get style() { return checkboxCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-checkbox",
        "$members$": {
            "option": [1],
            "value": [1],
            "label": [1],
            "required": [4],
            "color": [1],
            "background": [1],
            "disabled": [4],
            "selected": [1028],
            "textOn": [1, "text-on"],
            "textOff": [1, "text-off"],
            "header": [4],
            "labelPos": [1, "label-pos"],
            "setRequired": [64]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var action_delete_cross = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.4, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="ICON" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 1024 1024" style="enable-background:new 0 0 1024 1024;" xml:space="preserve">
<title>se_icon_action_delete_cross</title>
<path d="M512.1,128.1c-212,0-384.1,172-384.1,383.9c0,212.2,172.1,383.9,384.1,383.9C724.2,895.9,896,724.2,896,512
	C896,300.1,724.2,128.1,512.1,128.1z M674.6,674.7c-13.5,13.5-35.3,13.5-48.8,0c0,0,0,0,0,0L511.9,560.9L398.2,674.7
	c-13.5,13.5-35.4,13.5-48.9,0c-13.4-13.5-13.4-35.4,0-48.9L463.1,512L349.3,398.2c-13.3-13.7-12.9-35.6,0.8-48.9
	c13.4-13,34.7-13,48.1,0l113.7,113.8l113.8-113.8c13.5-13.5,35.4-13.5,48.9,0c13.5,13.5,13.5,35.4,0,48.9L560.8,512l113.8,113.8
	c13.5,13.4,13.6,35.3,0.2,48.8C674.7,674.6,674.7,674.6,674.6,674.7z"/>
</svg>
`;

const chipCss = "/*!@.se-chip*/.se-chip.sc-se-chip{cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;margin:4px;min-height:30px;padding-left:8px;padding-right:8px;font-size:16px;font-weight:400;line-height:25px;text-align:left;background:transparent;outline:none;border-radius:16px;-moz-align-items:center;-ms-flex-align:center;align-items:center;-webkit-transition:0.2s;transition:0.2s}/*!@.se-chip.nano*/.se-chip.nano.sc-se-chip{min-height:22px;font-size:14px;line-height:17px}/*!@.se-chip.nano se-icon*/.se-chip.nano.sc-se-chip se-icon.sc-se-chip{font-size:22px;margin-right:-6px}/*!@.value.can-close*/.value.can-close.sc-se-chip{cursor:default;padding-right:4px}/*!@se-icon*/se-icon.sc-se-chip{margin-top:-1px;cursor:pointer;font-size:24px;margin-right:-4px}/*!@se-icon[data-hide]*/se-icon[data-hide].sc-se-chip{display:none}@supports (-ms-ime-align: auto){/*!@.se-icon*/.se-icon.sc-se-chip{top:0}}/*!@.standard*/.standard.sc-se-chip{border:1px solid #434343;color:#333333}/*!@.standard:hover*/.standard.sc-se-chip:hover{border:1px solid #333333;background-color:rgba(203, 203, 203, 0.2)}/*!@.alternative*/.alternative.sc-se-chip{border:1px solid #FFFFFF;color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}/*!@.alternative:hover*/.alternative.sc-se-chip:hover{background-color:rgba(203, 203, 203, 0.6)}/*!@.standard:active,\n.standard.selected,\n.alternative:active,\n.alternative.selected*/.standard.sc-se-chip:active,.standard.selected.sc-se-chip,.alternative.sc-se-chip:active,.alternative.selected.sc-se-chip{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469);border:1px solid #626469}/*!@.standard:focus,\n.alternative:focus*/.standard.sc-se-chip:focus,.alternative.sc-se-chip:focus{color:#FFFFFF;color:var(--se-focus-contrast, #FFFFFF);background-color:#434343;background-color:var(--se-focus, #434343)}/*!@.disabled,\n.disabled.value,\n.disabled:hover,\n.disabled:focus*/.disabled.sc-se-chip,.disabled.value.sc-se-chip,.disabled.sc-se-chip:hover,.disabled.sc-se-chip:focus{cursor:default;background-color:inherit;color:#CBCBCB;border:1px solid #CBCBCB}/*!@.disabled se-icon,\n.disabled.value se-icon,\n.disabled:hover se-icon,\n.disabled:focus se-icon*/.disabled.sc-se-chip se-icon.sc-se-chip,.disabled.value.sc-se-chip se-icon.sc-se-chip,.disabled.sc-se-chip:hover se-icon.sc-se-chip,.disabled.sc-se-chip:focus se-icon.sc-se-chip{cursor:default}/*!@.display-block*/.display-block.sc-se-chip{width:100%;margin-top:8px;margin-left:0;margin-right:0;padding:0;cursor:pointer;display:-ms-flexbox;display:flex;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-pack:justify;justify-content:space-between}/*!@.display-block .value*/.display-block.sc-se-chip .value.sc-se-chip{padding-left:8px;width:100%}/*!@.display-block .value.can-close*/.display-block.sc-se-chip .value.can-close.sc-se-chip{cursor:default}/*!@.display-block se-icon*/.display-block.sc-se-chip se-icon.sc-se-chip{margin-right:-3px;padding-right:4px}";

class ChipComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
        * Defines the size of the chip.
        * `nano` sets the font to 14px and the height to 24px.
        * `small` is the default option, with a 16px font and a 32px height.
        */
        this.size = 'small';
        /**
        * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
        */
        this.color = 'standard';
        /**
         * Indicates whether or not the chip has a close button.  Set to `false` by default.
         */
        this.canClose = false;
        /**
         * Indicates whether or not the chip is selected.  Set to `false` by default.
         */
        this.selected = false;
        /**
         * Indicates whether or not the chip is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        this.didClose = createEvent(this, "didClose", 7);
    }
    closeChip() {
        if (!this.disabled) {
            this.didClose.emit(this.value);
        }
    }
    render() {
        return (h("div", { class: [
                'se-chip',
                this.size,
                this.color,
                this.selected ? 'selected' : '',
                this.disabled ? 'disabled' : '',
                this.block ? 'display-block' : ''
            ].join(' ') }, h("div", { class: ['value', this.canClose ? 'can-close' : ''].join(' ') }, this.value), this.canClose ? h("se-icon", { class: "close", onClick: () => this.closeChip() }, h("span", { innerHTML: action_delete_cross })) : ''));
    }
    get el() { return getElement(this); }
    static get style() { return chipCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-chip",
        "$members$": {
            "value": [1],
            "size": [1],
            "color": [1],
            "canClose": [4, "can-close"],
            "selected": [4],
            "disabled": [4],
            "block": [1028]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const containerCss = "/*!@:host*/.sc-se-container-h{-webkit-box-sizing:border-box;box-sizing:border-box;overflow:auto}/*!@:host(.absolute)*/.absolute.sc-se-container-h{position:absolute;top:0;bottom:0;left:0;right:0}/*!@:host(.relative)*/.relative.sc-se-container-h{position:relative}/*!@:host(.column-dir)*/.column-dir.sc-se-container-h{-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}/*!@:host(.row-dir)*/.row-dir.sc-se-container-h{-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}/*!@:host(.flex-display)*/.flex-display.sc-se-container-h{-ms-flex-wrap:nowrap;flex-wrap:nowrap;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex}/*!@:host(.block-display)*/.block-display.sc-se-container-h{display:block !important;width:100%}/*!@:host(.grid-display)*/.grid-display.sc-se-container-h{display:grid;width:100%;width:-webkit-fill-available}/*!@:host(.fill-content:not(.block-display))*/.fill-content.sc-se-container-h:not(.block-display){padding:0;height:100%}/*!@:host(.card-content:not(.block-display))*/.card-content.sc-se-container-h:not(.block-display){padding:8px}/*!@:host(.ct-padding-none),\n:host(.ct-padding-none.card-content:not(.block-display)),\n:host(.ct-padding-none.fill-content:not(.block-display)),\n:host(.ct-padding-none.widget-content:not(.block-display))*/.ct-padding-none.sc-se-container-h,.ct-padding-none.card-content.sc-se-container-h:not(.block-display),.ct-padding-none.fill-content.sc-se-container-h:not(.block-display),.ct-padding-none.widget-content.sc-se-container-h:not(.block-display){padding:0}/*!@:host(.ct-padding-small),\n:host(.ct-padding-small.card-content:not(.block-display)),\n:host(.ct-padding-small.fill-content:not(.block-display)),\n:host(.widget-content:not(.block-display))*/.ct-padding-small.sc-se-container-h,.ct-padding-small.card-content.sc-se-container-h:not(.block-display),.ct-padding-small.fill-content.sc-se-container-h:not(.block-display),.widget-content.sc-se-container-h:not(.block-display){padding:4px}/*!@:host(.ct-padding-medium),\n:host(.ct-padding-medium.card-content:not(.block-display)),\n:host(.ct-padding-medium.fill-content:not(.block-display)),\n:host(.ct-padding-medium.widget-content:not(.block-display))*/.ct-padding-medium.sc-se-container-h,.ct-padding-medium.card-content.sc-se-container-h:not(.block-display),.ct-padding-medium.fill-content.sc-se-container-h:not(.block-display),.ct-padding-medium.widget-content.sc-se-container-h:not(.block-display){padding:8px}/*!@:host(.ct-padding-large),\n:host(.ct-padding-large.card-content:not(.block-display)),\n:host(.ct-padding-large.fill-content:not(.block-display)),\n:host(.ct-padding-large.widget-content:not(.block-display))*/.ct-padding-large.sc-se-container-h,.ct-padding-large.card-content.sc-se-container-h:not(.block-display),.ct-padding-large.fill-content.sc-se-container-h:not(.block-display),.ct-padding-large.widget-content.sc-se-container-h:not(.block-display){padding:16px}/*!@:host(.ct-padding-xlarge),\n:host(.ct-padding-xlarge.card-content:not(.block-display)),\n:host(.ct-padding-xlarge.fill-content:not(.block-display)),\n:host(.ct-padding-xlarge.widget-content:not(.block-display))*/.ct-padding-xlarge.sc-se-container-h,.ct-padding-xlarge.card-content.sc-se-container-h:not(.block-display),.ct-padding-xlarge.fill-content.sc-se-container-h:not(.block-display),.ct-padding-xlarge.widget-content.sc-se-container-h:not(.block-display){padding:32px}/*!@:host(.centered-content)*/.centered-content.sc-se-container-h{display:block}/*!@:host(.centered-content) .wrapper-center*/.centered-content.sc-se-container-h .wrapper-center.sc-se-container{padding-right:16px;padding-left:16px;margin-right:auto;margin-left:auto}@media (min-width: 1100px){/*!@:host(.centered-content) .wrapper-center*/.centered-content.sc-se-container-h .wrapper-center.sc-se-container{max-width:1180px}}/*!@:host(.ct-bg-standard)*/.ct-bg-standard.sc-se-container-h{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}/*!@:host(.ct-bg-alternative)*/.ct-bg-alternative.sc-se-container-h{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}";

class ContainerComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the inner appearance of a container.
         * `fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set.
         * `widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set.
         * `centered` centers the container so the content does not exceed a maximum width.
         * `card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set.
         * Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         * `inherited` will insure that no specific style is applied to the container.
         */
        this.option = "fill";
        /**
         * In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box.
         * `relative` is the default position. This is perfect to use with flex content.
         * `absolute` is useful in specific cases. Make sure you know what you are doing.
         */
        this.position = "relative";
        /**
         * Defines the direction of the flex element.
         * `row` is the default direction. This is perfect to use with flex content.
         * `column` is useful in specific cases. Make sure you know what you are doing.
         */
        this.direction = "row";
        /**
         * Defines how to display the element.
         * `flex` is the default display.
         * `block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block".
         */
        this.display = "flex";
        /**
         * When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there.
         * Default is `350px`.
         */
        this.columnSize = '350px';
        /**
         * When in `display="grid"`, defines the height of each container.  Default is `300px`.
         */
        this.rowSize = '300px';
    }
    optionDidChange() {
        if (this.color === undefined || this.color === null) {
            if (this.option === "widget") {
                this.color = "standard";
                this.setProps();
            }
            else if (this.option === "card") {
                this.color = "alternative";
                this.setProps();
            }
        }
    }
    displayDidChange() {
        // Only direct children will be impacted by the display property
        Array.from(this.el.querySelectorAll("se-container > se-block")).forEach((item) => {
            item.display = this.display;
        });
    }
    columnSizeDidChange() {
        if (this.display === 'grid') {
            this.el.style.gridTemplateColumns = `repeat(auto-fit, minmax(${this.columnSize}, 1fr))`;
        }
    }
    rowSizeDidChange() {
        if (this.display === 'grid') {
            this.el.style.gridAutoRows = this.rowSize;
        }
    }
    setProps() {
        Array.from(this.el.querySelectorAll("se-container > se-block")).forEach((item) => {
            if (this.option === "widget" || this.option === "card" || this.option === "card-old")
                item.option = this.option;
        });
    }
    componentWillLoad() {
        this.setProps(); // not having this called here makes the original/new function not actually work as expected. the original function would return this.option as undefined.
        this.optionDidChange();
        this.displayDidChange();
        this.columnSizeDidChange();
        this.rowSizeDidChange();
    }
    render() {
        return (h(Host, { class: [
                this.option !== "card-old" ? `${this.option}-content` : "card-content",
                this.position,
                this.color ? `ct-bg-${this.color}` : '',
                `${this.direction}-dir`,
                `${this.display}-display`,
                this.padding ? `ct-padding-${this.padding}` : ''
            ]
                .join(' ') }, this.option === "centered" ? h("div", { class: "wrapper-center" }, h("slot", null)) : h("slot", null)));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "option": ["optionDidChange"],
        "display": ["displayDidChange"],
        "columnSize": ["columnSizeDidChange"],
        "rowSize": ["rowSizeDidChange"]
    }; }
    static get style() { return containerCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-container",
        "$members$": {
            "option": [1],
            "position": [1],
            "direction": [1],
            "display": [1],
            "padding": [1],
            "columnSize": [1, "column-size"],
            "rowSize": [1, "row-size"],
            "color": [1025]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const dialogCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}/*!@:host*/.sc-se-dialog-h{display:none !important;z-index:550;background-color:transparent !important;line-height:1.4}/*!@:host(.show-dialog)*/.show-dialog.sc-se-dialog-h{display:block !important}/*!@.small .dialog*/.small.sc-se-dialog .dialog.sc-se-dialog{width:400px;max-height:70%}/*!@.medium .dialog*/.medium.sc-se-dialog .dialog.sc-se-dialog{width:550px;max-height:80%}/*!@.large .dialog*/.large.sc-se-dialog .dialog.sc-se-dialog{width:800px;max-height:90%}/*!@.fill .dialog*/.fill.sc-se-dialog .dialog.sc-se-dialog{width:100%;max-height:100%}/*!@.dialog-wrapper*/.dialog-wrapper.sc-se-dialog{position:fixed !important;z-index:550;position:absolute;top:0;bottom:0;left:0;right:0;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}/*!@.dialog*/.dialog.sc-se-dialog{z-index:550;position:relative;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}/*!@.dialog.show-dialog*/.dialog.show-dialog.sc-se-dialog{-webkit-animation-name:fadeIn;animation-name:fadeIn}/*!@.dialog.hide-dialog*/.dialog.hide-dialog.sc-se-dialog{-webkit-animation-name:fadeOut;animation-name:fadeOut}/*!@.dialog-background*/.dialog-background.sc-se-dialog{position:fixed !important;position:absolute;top:0;bottom:0;left:0;right:0;-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;background-color:rgba(255, 255, 255, 0.6);z-index:500}/*!@.dialog-background.show-dialog*/.dialog-background.show-dialog.sc-se-dialog{-webkit-animation-name:fadeIn;animation-name:fadeIn}/*!@.dialog-background.hide-dialog*/.dialog-background.hide-dialog.sc-se-dialog{-webkit-animation-name:fadeOut;animation-name:fadeOut}";

const SHOW = "show-dialog";
const HIDE = "hide-dialog";
class DialogComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the size of the modal.
         * `small`: used in alerts and messages
         * `medium`: default setting, used by other apps
         * `fill`: takes the full space of the screen
         */
        this.size = "medium";
        /**
         * Defines the color of the dialog header.
         * `alternative`: Alternative background with primary color for the text
         * `primary`: Primary color schema and default setting.
         */
        this.color = 'primary';
        /**
         * Indicates whether or not the dialog is open or closed.  Default setting is `false`.
         */
        this.open = false;
        /**
         * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`.
         */
        this.canBackdrop = true;
        this.backdrop = createEvent(this, "backdrop", 7);
        this.didClose = createEvent(this, "didClose", 7);
    }
    openDidChange() {
        if (this.open) {
            this.addAnimation(null);
        }
        else {
            this.removeAnimation(() => {
                this.didClose.emit();
            });
        }
    }
    /**
     * Emit the `backdrop` event from the dialog's parent component if `canBackdrop=true`. When the event is emitted, the dialog is automatically closed.
     */
    async backdropClicked() {
        if (this.canBackdrop) {
            // Only emit if canBackdrop was clicked
            this.backdrop.emit();
            this.open = false;
        }
    }
    assignDialogHeaderColor() {
        Array.from(this.el.querySelectorAll('se-dialog-header')).forEach((item) => {
            if (!item.color) {
                item.color = this.color;
            }
        });
    }
    /**
     * Emit the `backdrop` event from the dialog's parent component if the escape key is clicked and if `canBackdrop=true`.
     */
    handleKeyDown(ev) {
        if (ev.key === 'Escape' && this.open) {
            this.backdropClicked();
        }
    }
    addAnimation(callback) {
        this.el.classList.add(SHOW);
        if (this.menuInnerEl && this.backdropEl) {
            this.menuInnerEl.classList.add(SHOW);
            this.backdropEl.classList.add(SHOW);
        }
        setTimeout(() => {
            this.menuInnerEl.classList.remove(SHOW);
            this.backdropEl.classList.remove(SHOW);
            callback && callback();
        }, 500);
    }
    removeAnimation(callback) {
        this.menuInnerEl.classList.add(HIDE);
        this.backdropEl.classList.add(HIDE);
        setTimeout(() => {
            this.menuInnerEl.classList.remove(HIDE);
            this.backdropEl.classList.remove(HIDE);
            this.el.classList.remove(SHOW);
            callback && callback();
        }, 500);
    }
    componentDidLoad() {
        this.assignDialogHeaderColor();
        this.openDidChange();
    }
    render() {
        return (h("div", { class: `${this.size} dialog-wrapper` }, h("div", { class: "dialog-background", onClick: () => this.backdropClicked(), ref: el => this.backdropEl = el }), h("div", { class: "dialog", ref: el => (this.menuInnerEl = el) }, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "open": ["openDidChange"]
    }; }
    static get style() { return dialogCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-dialog",
        "$members$": {
            "size": [1],
            "color": [1],
            "open": [1028],
            "canBackdrop": [4, "can-backdrop"],
            "backdropClicked": [64]
        },
        "$listeners$": [[4, "keydown", "handleKeyDown"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const dialogContentCss = "/*!@:host*/.sc-se-dialog-content-h{overflow-x:auto}/*!@.se-icon-wrapper*/.se-icon-wrapper.sc-se-dialog-content{height:60px}/*!@.inner-content*/.inner-content.sc-se-dialog-content{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;margin:0 8px}/*!@.se-dialog-content*/.se-dialog-content.sc-se-dialog-content{padding:16px 8px;padding-bottom:0;position:relative;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}/*!@.se-dialog-content.full-content*/.se-dialog-content.full-content.sc-se-dialog-content{padding:0}/*!@.se-dialog-content.full-content .inner-content*/.se-dialog-content.full-content.sc-se-dialog-content .inner-content.sc-se-dialog-content{margin:0}";

class DialogContentComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return (h("div", { class: ['se-dialog-content', this.option === 'fill' ? 'full-content' : ''].join(' ') }, h("span", { class: "se-icon-wrapper" }, this.icon ? h("se-icon", { size: "large", color: this.iconColor }, h("span", { innerHTML: this.icon })) : '', h("slot", { name: "icon" })), h("div", { class: "inner-content" }, h("slot", null))));
    }
    static get style() { return dialogContentCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-dialog-content",
        "$members$": {
            "option": [1],
            "icon": [1],
            "iconColor": [1, "icon-color"]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const dialogFooterCss = "/*!@:host*/.sc-se-dialog-footer-h{position:relative;padding:8px;font-size:20px;min-height:40px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}/*!@.flex*/.flex.sc-se-dialog-footer{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}";

class DialogFooterComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return [
            h("div", { class: "flex" }, h("slot", { name: "start" })),
            h("slot", null)
        ];
    }
    static get style() { return dialogFooterCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-dialog-footer",
        "$members$": undefined,
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const dialogHeaderCss = "/*!@.se-dialog-header*/.se-dialog-header.sc-se-dialog-header{position:relative;padding:4px 4px 4px 16px;font-size:20px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}/*!@.se-dialog-header .flex*/.se-dialog-header.sc-se-dialog-header .flex.sc-se-dialog-header{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}/*!@.se-dialog-header div.middle*/.se-dialog-header.sc-se-dialog-header div.middle.sc-se-dialog-header{font-weight:300;line-height:30px;font-size:22px;margin:8px}/*!@.se-dialog-header.primary*/.se-dialog-header.primary.sc-se-dialog-header{min-height:44px;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}/*!@.se-dialog-header.alternative*/.se-dialog-header.alternative.sc-se-dialog-header{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#3DCD58;color:var(--se-primary, #3DCD58);margin-bottom:-16px}/*!@::slotted(h1), ::slotted(h2), ::slotted(h3),\n::slotted(h4), ::slotted(h5), ::slotted(h6)*/.sc-se-dialog-header-s>h1,.sc-se-dialog-header-s>h2,.sc-se-dialog-header-s>h3,.sc-se-dialog-header-s>h4,.sc-se-dialog-header-s>h5,.sc-se-dialog-header-s>h6{margin-top:0 !important;margin-bottom:0 !important}";

class DialogHeaderComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the color of the dialog header.
         * `alternative`: Alternative background with primary color for the text.
         * `primary`: Primary color schema.
         */
        this.color = 'primary';
    }
    render() {
        return (h("div", { class: ['se-dialog-header', this.color].join(' ') }, h("div", { class: "flex middle" }, h("slot", null)), h("slot", { name: "end" })));
    }
    static get style() { return dialogHeaderCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-dialog-header",
        "$members$": {
            "color": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const dividerCss = "/*!@.se-divider*/.se-divider.sc-se-divider{display:block;margin:0}/*!@.se-divider.horizontal*/.se-divider.horizontal.sc-se-divider{width:100%;border-top:1px solid}/*!@.se-divider.vertical, .se-divider.inset*/.se-divider.vertical.sc-se-divider,.se-divider.inset.sc-se-divider{height:100%;border-right:1px solid}/*!@.se-divider.standard*/.se-divider.standard.sc-se-divider{border-color:#E6E6E6}/*!@.se-divider.alternative*/.se-divider.alternative.sc-se-divider{border-color:#FFFFFF;border-color:var(--se-alternative, #FFFFFF)}";

class DividerComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
         */
        this.option = "horizontal";
        /**
         * Indicates the color schema of your divider line.
         * Default setting is `standard`, rendering a light gray colored line.
         * The `alternative` property sets a white colored divider line.
         */
        this.color = "standard";
    }
    render() {
        return h("div", { class: ['se-divider', this.option, this.color].join(' ') });
    }
    static get style() { return dividerCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-divider",
        "$members$": {
            "option": [1],
            "color": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const dropdownCss = "/*!@.se-dropdown*/.se-dropdown.sc-se-dropdown{display:-ms-inline-flexbox;display:inline-flex;position:relative}/*!@.se-dropdown[hidden]*/.se-dropdown[hidden].sc-se-dropdown{display:none}/*!@.se-dropdown.left .dropdown-content*/.se-dropdown.left.sc-se-dropdown .dropdown-content.sc-se-dropdown{left:0}/*!@.se-dropdown.right .dropdown-content*/.se-dropdown.right.sc-se-dropdown .dropdown-content.sc-se-dropdown{right:0}/*!@.se-dropdown.top .dropdown-content*/.se-dropdown.top.sc-se-dropdown .dropdown-content.sc-se-dropdown{bottom:calc(100% + 4px)}/*!@.se-dropdown.bottom .dropdown-content*/.se-dropdown.bottom.sc-se-dropdown .dropdown-content.sc-se-dropdown{top:calc(100% + 4px)}/*!@.dropdown-toggle ::slotted(*)*/.dropdown-toggle .sc-se-dropdown-s>*{cursor:pointer}/*!@.dropdown-content*/.dropdown-content.sc-se-dropdown{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);min-width:100px;-webkit-box-shadow:0px 8px 16px 0px rgba(0, 0, 0, 0.2);box-shadow:0px 8px 16px 0px rgba(0, 0, 0, 0.2);visibility:hidden;opacity:0;position:absolute;overflow:auto;border-radius:2px;z-index:-1}/*!@.dropdown-content.show*/.dropdown-content.show.sc-se-dropdown{visibility:visible;opacity:1;z-index:5}";

class DropdownComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines how to align the dropdown container.
         * `right`: Position the container with respect to the right side of the trigger element.
         * `left`: Position the container with respect to the left side of the trigger element.
         */
        this.alignment = 'left';
        /**
         * Defines how to vertically align the dropdown container.
         * `top`: Position the container with respect to the top side of the trigger element.
         * `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        this.verticalAlignment = 'bottom';
        /**
         * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        this.maxWidth = "200px";
        /**
         * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        this.maxHeight = "400px";
        this.opened = false;
        this.didOpen = createEvent(this, "didOpen", 7);
        this.didClose = createEvent(this, "didClose", 7);
        this.cancelAllDropdown = createEvent(this, "cancelAllDropdown", 5);
    }
    /**
     * Method to open the dropdown from outside its parent element.
     */
    async open() {
        this.opened = true;
        this.didOpen.emit();
    }
    /**
     * Method to close the dropdown from outside its parent element.
     */
    async close() {
        this.opened = false;
        this.didClose.emit();
    }
    handleClick() {
        if (this.opened) {
            this.close();
        }
    }
    handleTouchstart() {
        if (this.opened) {
            this.close();
        }
    }
    handleCancelAllDropdown() {
        if (!this.isActive && this.opened) {
            this.close();
        }
    }
    _toggle(ev) {
        ev.stopPropagation();
        this.isActive = true;
        if (this.opened) {
            this.close();
        }
        else {
            // close others only when trying to open one
            this.cancelAllDropdown.emit();
            this.open();
        }
        this.isActive = false;
        // console.log(ev)
    }
    render() {
        return (h("div", { class: ['se-dropdown', this.alignment, this.verticalAlignment].join(' ') }, h("div", { "aria-haspopup": "true", "aria-expanded": this.opened, onClick: (ev) => this._toggle(ev) }, h("slot", { name: "trigger" })), h("div", { class: `${this.opened ? 'show' : ''} dropdown-content`, style: { maxWidth: this.maxWidth, maxHeight: this.maxHeight } }, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get style() { return dropdownCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-dropdown",
        "$members$": {
            "alignment": [1],
            "verticalAlignment": [1, "vertical-alignment"],
            "maxWidth": [1, "max-width"],
            "maxHeight": [1, "max-height"],
            "isActive": [32],
            "opened": [32],
            "open": [64],
            "close": [64]
        },
        "$listeners$": [[8, "click", "handleClick"], [9, "touchstart", "handleTouchstart"], [8, "cancelAllDropdown", "handleCancelAllDropdown"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var notificationError = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M542 512l113 113c8 8 8 22 0 30-5 4-10 6-15 6-6 0-11-2-16-6L512 542 399 655c-5 4-10 6-15 6-6 0-11-2-16-6-8-8-8-22 0-30l113-113-113-113c-8-8-8-22 0-30 9-8 22-8 31 0l113 112 112-112c9-8 22-8 31 0 8 8 8 22 0 30z"/></svg>`;

var arrow4Top = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><title>arrow4_top</title><g id="ICON"><path d="M872.8,487.9,557.61,172.7a64.57,64.57,0,0,0-91.22,0L151.2,487.9a21.5,21.5,0,1,0,30.4,30.4L490.5,209.41V894.5a21.5,21.5,0,0,0,43,0V209.41L842.4,518.3a21.5,21.5,0,0,0,30.4-30.4Z"/></g></svg>`;

const fabCss = "/*!@.se-fab*/.se-fab.sc-se-fab{position:fixed}/*!@.se-fab.pos-top*/.se-fab.pos-top.sc-se-fab{top:76px;right:17px}/*!@.se-fab.pos-top .mini-action-button*/.se-fab.pos-top.sc-se-fab .mini-action-button.sc-se-fab{top:70px;left:12px;text-align:center}/*!@.se-fab.pos-bottom*/.se-fab.pos-bottom.sc-se-fab{bottom:17px;right:17px}/*!@.se-fab.pos-bottom .mini-action-button*/.se-fab.pos-bottom.sc-se-fab .mini-action-button.sc-se-fab{bottom:55px;left:12px;text-align:center}/*!@.se-fab .mini-action-button*/.se-fab.sc-se-fab .mini-action-button.sc-se-fab{cursor:pointer;position:absolute;display:none}/*!@.se-fab se-icon*/.se-fab.sc-se-fab se-icon.sc-se-fab{margin-right:0}/*!@.se-fab .show*/.se-fab.sc-se-fab .show.sc-se-fab{display:block}";

const SHOW_FAB = 'show';
class FabComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.error_icon = notificationError;
        this.arrow_up = arrow4Top;
        /**
         * Property that determines the functionality of the FAB.
         * The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB.
         * The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB.
         */
        this.option = 'speeddial';
        /**
         *  Property that determines the position of the component.
         *  The default setting is `bottom`, rendering a FAB at the bottom right corner.
         *  The `top` setting renders the FAB at the top right corner.
         */
        this.position = 'bottom';
        /**
        * Indicates the color of your main action button .
        * The Default setting is `primary`, rendering a green background.
        * The `alternative` setting renders a white background.
        */
        this.color = 'primary';
        this.toggleIcon = true;
    }
    /**
     * Use this method to toggle (show/hide) the mini action buttons.
     */
    async toggleAction() {
        if (this.option == 'speeddial') {
            this.toggleIcon = !this.toggleIcon;
        }
    }
    getIcon() {
        let icon;
        switch (this.option) {
            case 'speeddial':
                icon = this.toggleIcon ? this.icon : this.error_icon;
                break;
            case 'backtotop':
                icon = this.arrow_up;
        }
        return icon;
    }
    render() {
        return (h("div", { class: ['se-fab', `pos-${this.position}`].join(' ') }, h("se-button", { color: this.color, "icon-only": "true", class: this.option == 'backtotop' ? 'backtotop' : '', option: 'fab', onClick: () => this.toggleAction() }, h("se-icon", { slot: "icon", size: "medium" }, h("span", { innerHTML: this.getIcon() }))), this.option === 'speeddial' ?
            h("div", { class: ['mini-action-button', !this.toggleIcon ? SHOW_FAB : ''].join(' ') }, h("slot", null)) : ''));
    }
    static get style() { return fabCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-fab",
        "$members$": {
            "icon": [1],
            "option": [1],
            "position": [1],
            "color": [1],
            "toggleIcon": [32],
            "toggleAction": [64]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const fabItemCss = "/*!@.se-fab-item*/.se-fab-item.sc-se-fab-item{width:40px;height:40px;font-size:24px;border-radius:50%;padding:0;margin:0 0 15px 0;-ms-flex-align:center;align-items:center;position:relative;display:-ms-flexbox;display:flex;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}/*!@.se-fab-item:hover, .se-fab-item:focus*/.se-fab-item.sc-se-fab-item:hover,.se-fab-item.sc-se-fab-item:focus{-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@.se-fab-item:active*/.se-fab-item.sc-se-fab-item:active{background-color:#626469;background-color:var(--se-selected, #626469);color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF)}/*!@.se-fab-item:after*/.se-fab-item.sc-se-fab-item:after{content:\"\";display:block;position:absolute;top:0;right:0;bottom:0;left:0}/*!@.se-fab-item .description*/.se-fab-item.sc-se-fab-item .description.sc-se-fab-item{font-weight:300;line-height:1;border-radius:23.27px;font-size:12px;padding:5px 7px;margin-right:12px;position:absolute;right:100%;overflow:visible;white-space:nowrap;color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}/*!@.se-fab-item se-icon*/.se-fab-item.sc-se-fab-item se-icon.sc-se-fab-item{font-family:\"se-icon\";padding:0 8px}/*!@::slotted(se-icon[slot=icon])*/.sc-se-fab-item-s>se-icon[slot=icon]{font-family:\"se-icon\";padding:0 8px}@media all and (-ms-high-contrast: none){/*!@.description*/.description.sc-se-fab-item{top:10px}}";

class FabItemComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.didClick = createEvent(this, "didClick", 7);
    }
    toggle() {
        this.didClick.emit(this.el.innerText);
    }
    render() {
        return (h("div", { class: "se-fab-item", onClick: () => this.toggle() }, h("span", { class: "description" }, h("slot", null)), this.icon ? h("se-icon", null, this.icon) : h("slot", { name: "icon" })));
    }
    get el() { return getElement(this); }
    static get style() { return fabItemCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-fab-item",
        "$members$": {
            "icon": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const formFieldCss = "se-form-field .form-field-wrapper{display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center}se-form-field .ff-padding-small{padding:4px}se-form-field .ff-padding-medium{padding:8px}se-form-field .ff-padding-none{padding:0}se-form-field .with-label{padding-top:4px}se-form-field [data-disabled] .ff-wrapper{opacity:0.5}se-form-field label{width:100%;text-align:center;line-height:12px;font-weight:300;line-height:1.2 !important;font-size:14px;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-moz-align-items:center;-ms-flex-align:center;align-items:center}se-form-field label>span{text-align:right;min-width:140px}se-form-field label .required{color:#DC0A0A;color:var(--se-error, #DC0A0A);padding-left:3px}se-form-field .ff-wrapper{padding-left:16px;font-size:16px;width:100%}se-form-field .ff-wrapper-input{max-width:320px;-ms-flex-direction:column;flex-direction:column;width:100%;-moz-align-items:left;-ms-flex-align:left;align-items:left;text-align:left;display:-ms-flexbox;display:flex}se-form-field input,se-form-field select,se-form-field textarea{font-family:inherit;width:100%;font-size:16px;height:28px;line-height:20px;border:1px solid;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);-webkit-transition:0.2s;transition:0.2s;padding:4px;font-size:inherit}se-form-field input:focus,se-form-field select:focus,se-form-field textarea:focus{outline:none;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}se-form-field textarea{resize:vertical;height:auto;cursor:auto}se-form-field select{border-radius:0;padding:10px 30px 10px 10px;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;appearance:none;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);border-radius:0;background-image:linear-gradient(45deg, transparent 50%, gray 50%), linear-gradient(135deg, gray 50%, transparent 50%);background-position:calc(100% - 20px) calc(1em + 2px), calc(100% - 15px) calc(1em + 2px);background-size:5px 5px, 5px 5px;background-repeat:no-repeat}se-form-field input[type=search],se-form-field select{height:40px;width:103%}@media screen and (min--moz-device-pixel-ratio: 0){se-form-field input[type=date]{padding-top:6px;padding-bottom:4px}}se-form-field .with-icon{display:block;position:relative}se-form-field .with-icon input{padding-right:36px}se-form-field .with-icon input:not([type=search]){width:calc(100% - 32px)}se-form-field .with-icon se-icon{position:absolute;top:50%;right:0px;margin-right:-4px;-webkit-transform:translateY(-50%);transform:translateY(-50%)}se-form-field .ff-block label>span{text-align:right}se-form-field .ff-block label.ff-stacked>span{text-align:left}se-form-field .ff-block .ff-wrapper{max-width:100%}se-form-field .ff-block .ff-wrapper-input{max-width:100%}se-form-field .ff-block select,se-form-field .ff-block input[type=search]{width:100%}se-form-field .ff-block input:not([type=search]),se-form-field .ff-block textarea{width:calc(100% - 10px)}se-form-field .ff-block .with-icon input:not([type=search]){width:calc(100% - 32px - 10px)}se-form-field .ff-block .with-icon se-icon{margin-right:4px}se-form-field .ff-stacked .form-field-wrapper{-ms-flex-direction:column;flex-direction:column;-moz-align-items:start;-ms-flex-align:start;align-items:start}@media all and (-ms-high-contrast: none), (-ms-high-contrast: active){se-form-field .ff-stacked .form-field-wrapper{display:block}}se-form-field .ff-stacked label{text-align:left;width:100%;display:block}se-form-field .ff-stacked label>span{display:block;max-width:none;text-align:left;line-height:1.5}se-form-field .ff-stacked .ff-wrapper{max-width:100%;margin-left:0;padding-left:0}se-form-field .ff-error input{border-color:#DC0A0A;border-color:var(--se-error, #DC0A0A)}se-form-field .ff-warning input{border-color:#E47F00;border-color:var(--se-warning, #E47F00)}se-form-field .ff-success input{border-color:#3DCD58;border-color:var(--se-success, #3DCD58)}";

class FormFieldComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the layout of your form field.
         * `inline` is the default option, and is always applied if the type is set to `checkbox`.  This sets the input or select field adjacent to the label.
         * `stacked` option will render the input or select field below the label.
         */
        this.option = 'inline';
        /**
         * Defines the spacing around the inside edge of a container.
         * `none` is 0px.
         * `small` is 4px.
         * `medium` is 8px.
         */
        this.padding = 'small';
        /**
         * Optional property to define the proportion of the label width. The content (input) will take the rest of if. Defaulted to 40%
         */
        this.labelWidth = '35%';
        /**
         * Defines whether the form field's input is a text field (`input`), a checkbox (`checkbox`), a radio button (`radio`), or a dropdown menu (`select`).
         * `input` is the default type.
         */
        this.type = 'input';
        /**
         * Determines if the input is required by the application.
         * Set to `false` by default.
         * Setting this value to `true` will render a red asterisk next to your label.
         */
        this.required = false;
        /**
         * Optional property that defines if the form field is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        this.didSubmit = createEvent(this, "didSubmit", 7);
    }
    inputSelectListenerHandler(event) {
        this.handleEvent(event);
    }
    checkboxListenerHandler(event) {
        this.handleEvent(event);
    }
    radioListenerHandler(event) {
        this.handleEvent(event);
    }
    disabledDidChange() {
        this.initLabel();
    }
    typeDidChange() {
        this.initLabel();
    }
    initLabel() {
        Array.from(this.el.querySelectorAll('input, select, textarea, se-checkbox, se-radio')).forEach((item) => {
            item.disabled = this.disabled;
        });
    }
    componentDidLoad() {
        this.initLabel();
    }
    handleEvent(event) {
        if (!this.disabled) {
            this.value = event.detail ? event.detail.selected : event.target.value;
            this.didSubmit.emit(this.value);
        }
    }
    render() {
        return (h("div", { class: {
                [`ff-${this.status}`]: true,
                'ff-stacked': this.option === 'stacked',
                'ff-block': this.block,
                [`ff-padding-${this.padding}`]: true,
                'form-field-wrapper': true
            } }, h("label", { "data-disabled": this.disabled }, h("span", { style: {
                width: this.option !== 'stacked' ? this.labelWidth : 'auto'
            }, class: { 'with-label': !!this.label } }, this.label, this.required ? h("span", { class: "required" }, "*") : ''), h("div", { class: "ff-wrapper" }, h("div", { class: "ff-wrapper-input" }, h("slot", null))))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "disabled": ["disabledDidChange"],
        "type": ["typeDidChange"]
    }; }
    static get style() { return formFieldCss; }
    static get cmpMeta() { return {
        "$flags$": 4,
        "$tagName$": "se-form-field",
        "$members$": {
            "option": [1],
            "padding": [1],
            "block": [4],
            "labelWidth": [1, "label-width"],
            "type": [1],
            "status": [1025],
            "label": [1],
            "value": [1025],
            "required": [4],
            "disabled": [4]
        },
        "$listeners$": [[0, "change", "inputSelectListenerHandler"], [0, "didChange", "checkboxListenerHandler"], [0, "didCheck", "radioListenerHandler"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var burgerMenu = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.2, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 1024 1024" style="enable-background:new 0 0 1024 1024;" xml:space="preserve">
<rect x="128" y="468.8" width="768" height="86.4"/>
<rect x="128" y="211" width="768" height="86"/>
<rect x="128" y="726.8" width="768" height="86.4"/>
</svg>
`;

const headerCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}/*!@:host*/.sc-se-header-h{-webkit-box-sizing:border-box;box-sizing:border-box;height:auto;padding:0;width:100%;min-height:64px;max-height:64px;z-index:5;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-moz-align-items:center;-ms-flex-align:center;align-items:center;white-space:nowrap;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}/*!@::slotted([slot=end])*/.sc-se-header-s>[slot=end]{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}/*!@.fill-space*/.fill-space.sc-se-header{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}/*!@.d-flex*/.d-flex.sc-se-header{-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}/*!@.d-flex-column*/.d-flex-column.sc-se-header{-moz-align-items:left;-ms-flex-align:left;align-items:left;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}/*!@.header-title-wrapper*/.header-title-wrapper.sc-se-header{margin-right:16px}/*!@.project-section*/.project-section.sc-se-header{color:#626469;margin:0 16px;font-size:16px;font-weight:300;line-height:24px;text-align:left}/*!@.header-menu-button*/.header-menu-button.sc-se-header{margin-left:6px}/*!@.menu-sidenav*/.menu-sidenav.sc-se-header{cursor:pointer;margin-right:-17px;padding:8px 16px}/*!@.menu-sidenav se-icon*/.menu-sidenav.sc-se-header se-icon.sc-se-header{vertical-align:-webkit-baseline-middle;vertical-align:-moz-middle-with-baseline}/*!@.header-title*/.header-title.sc-se-header{color:#3DCD58;color:var(--se-primary, #3DCD58);padding-left:18px;font-size:20px;line-height:20px;margin:0}/*!@.header-title .light*/.header-title.sc-se-header .light.sc-se-header{font-weight:300}/*!@.header-title-type*/.header-title-type.sc-se-header{color:#3DCD58;color:var(--se-primary, #3DCD58);line-height:24px;padding-left:18px;font-size:12px;margin:1px 0 -4px 0}/*!@.mat-toolbar-single-row*/.mat-toolbar-single-row.sc-se-header{padding:0}/*!@.font-lighter*/.font-lighter.sc-se-header{font-weight:100}/*!@se-icon-schneider*/se-icon-schneider.sc-se-header{width:140px;padding-left:9px !important;margin-top:5px}/*!@se-icon-ecostruxure*/se-icon-ecostruxure.sc-se-header{margin-bottom:-5px}/*!@.padding-container.link-container*/.padding-container.link-container.sc-se-header{font-size:13px}@media (max-width: 599px){/*!@se-icon-schneider*/se-icon-schneider.sc-se-header{display:none}/*!@.mat-toolbar-single-row*/.mat-toolbar-single-row.sc-se-header{height:64px}}";

class HeaderComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Sets the title of your application.
         */
        this.appTitle = "";
        /**
         * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
         */
        this.domain = AppInfo.domain;
    }
    onClickMenu() {
        this.elLeftNav.toggle();
    }
    async componentWillLoad() {
        this.elLeftNav = this.el.querySelector("se-sidemenu");
        this.hasMenu = !!this.elLeftNav;
    }
    render() {
        const title = getFullTitle(this.appTitle);
        let domain;
        if (this.domain.toLowerCase() === `ecostruxure`) {
            domain = h("se-icon-ecostruxure", { class: "header-title-type" });
        }
        else if (this.domain.toLowerCase() !== "none") {
            domain = h("span", { class: "header-title-type" }, this.domain);
        }
        return [
            h("div", { class: "d-flex" }, this.hasMenu ?
                h("span", { class: "menu-sidenav", onClick: () => this.onClickMenu() }, h("se-icon", { size: "medium", color: "primary" }, h("span", { innerHTML: burgerMenu })))
                : '', h("div", { class: "d-flex-column header-title-wrapper" }, domain, h("h1", { class: "header-title no-margin" }, h("span", null, title.first), h("span", { class: "light" }, "\u00A0", title.last))), this.project ? h("span", { class: "project-section" }, this.project) : ''),
            h("div", { class: "padding-container d-flex" }, h("slot", { name: "start" })),
            h("div", { class: "fill-space center-header-container" }, h("slot", null)),
            h("div", { class: "padding-container d-flex" }, h("slot", { name: "end" }), h("se-icon-schneider", { class: "header-title-type" }))
        ];
    }
    get el() { return getElement(this); }
    static get style() { return headerCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-header",
        "$members$": {
            "appTitle": [1, "app-title"],
            "domain": [1],
            "project": [1],
            "hasMenu": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const iconCss = "/*!@:host*/.sc-se-icon-h{fill:currentColor;display:-ms-inline-flexbox;display:inline-flex}/*!@:host(.icon-nano)*/.icon-nano.sc-se-icon-h{font-size:14px;line-height:14px}/*!@:host(.icon-nano) .se-icon-wrapper*/.icon-nano.sc-se-icon-h .se-icon-wrapper.sc-se-icon{height:14px;width:14px}/*!@:host(.icon-small)*/.icon-small.sc-se-icon-h{font-size:24px;line-height:24px}/*!@:host(.icon-small) .se-icon-wrapper*/.icon-small.sc-se-icon-h .se-icon-wrapper.sc-se-icon{height:24px;width:24px}/*!@:host(.icon-medium)*/.icon-medium.sc-se-icon-h{font-size:32px;line-height:32px}/*!@:host(.icon-medium) .se-icon-wrapper*/.icon-medium.sc-se-icon-h .se-icon-wrapper.sc-se-icon{height:32px;width:32px}/*!@:host(.icon-large)*/.icon-large.sc-se-icon-h{font-size:52px;line-height:52px}/*!@:host(.icon-large) .se-icon-wrapper*/.icon-large.sc-se-icon-h .se-icon-wrapper.sc-se-icon{height:52px;width:52px}/*!@:host(.icon-xlarge)*/.icon-xlarge.sc-se-icon-h{font-size:62px;line-height:62px}/*!@:host(.icon-xlarge) .se-icon-wrapper*/.icon-xlarge.sc-se-icon-h .se-icon-wrapper.sc-se-icon{height:62px;width:62px}/*!@.se-icon-wrapper*/.se-icon-wrapper.sc-se-icon{display:inline-block;font-family:\"se-icon\";font-style:normal;position:relative;font-weight:normal;font-variant:normal;text-decoration:inherit;font-stretch:normal;text-transform:none;text-rendering:auto;letter-spacing:normal;vertical-align:-webkit-baseline-middle;vertical-align:-moz-middle-with-baseline;word-wrap:normal;white-space:nowrap;direction:ltr;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-font-feature-settings:\"liga\";font-feature-settings:\"liga\";font-display:block;-webkit-transition:0;transition:0;overflow:hidden;fill:currentColor;shape-rendering:geometricprecision}/*!@.se-icon-wrapper.disabled*/.se-icon-wrapper.disabled.sc-se-icon{cursor:default;opacity:0.5}@supports (-ms-ime-align: auto){/*!@.se-icon-wrapper*/.se-icon-wrapper.sc-se-icon{vertical-align:top;top:0}}@media all and (-ms-high-contrast: none), (-ms-high-contrast: active){/*!@.se-icon-wrapper*/.se-icon-wrapper.sc-se-icon{vertical-align:top;top:0}}/*!@.standard*/.standard.sc-se-icon{color:#EDEDED;color:var(--se-standard, #EDEDED)}/*!@.standard.icon-button*/.standard.icon-button.sc-se-icon{color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}/*!@.standard.icon-button:not(.disabled):hover*/.standard.icon-button.sc-se-icon:not(.disabled):hover{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@.alternative*/.alternative.sc-se-icon{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}/*!@.alternative.icon-button*/.alternative.icon-button.sc-se-icon{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}/*!@.alternative.icon-button:not(.disabled):hover*/.alternative.icon-button.sc-se-icon:not(.disabled):hover{color:#0F0F0F;color:var(--se-hover-alternative-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-alternative, #CBCBCB)}/*!@.primary*/.primary.sc-se-icon{color:#3DCD58;color:var(--se-primary, #3DCD58)}/*!@.primary.icon-button*/.primary.icon-button.sc-se-icon{color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF);background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}/*!@.primary.icon-button:not(.disabled):hover*/.primary.icon-button.sc-se-icon:not(.disabled):hover{color:#FFFFFF;color:var(--se-hover-primary-contrast, #FFFFFF);background-color:#32AD3C;background-color:var(--se-hover-primary, #32AD3C)}/*!@.secondary*/.secondary.sc-se-icon{color:#42B4E6;color:var(--se-secondary, #42B4E6)}/*!@.secondary.icon-button*/.secondary.icon-button.sc-se-icon{color:#FFFFFF;color:var(--se-secondary-contrast, #FFFFFF);background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6)}/*!@.secondary.icon-button:not(.disabled):hover*/.secondary.icon-button.sc-se-icon:not(.disabled):hover{color:#FFFFFF;color:var(--se-hover-secondary-contrast, #FFFFFF);background-color:#0087CD;background-color:var(--se-hover-secondary, #0087CD)}/*!@.success*/.success.sc-se-icon{color:#3DCD58;color:var(--se-success, #3DCD58)}/*!@.success.icon-button*/.success.icon-button.sc-se-icon{color:#FFFFFF;color:var(--se-success-contrast, #FFFFFF);background-color:#3DCD58;background-color:var(--se-success, #3DCD58)}/*!@.success.icon-button:not(.disabled):hover*/.success.icon-button.sc-se-icon:not(.disabled):hover{color:var(--se-hover-success-contrast, );background-color:var(--se-hover-success, )}/*!@.warning*/.warning.sc-se-icon{color:#E47F00;color:var(--se-warning, #E47F00)}/*!@.warning.icon-button*/.warning.icon-button.sc-se-icon{color:#0F0F0F;color:var(--se-warning-contrast, #0F0F0F);background-color:#E47F00;background-color:var(--se-warning, #E47F00)}/*!@.warning.icon-button:not(.disabled):hover*/.warning.icon-button.sc-se-icon:not(.disabled):hover{color:var(--se-hover-warning-contrast, );background-color:var(--se-hover-warning, )}/*!@.error*/.error.sc-se-icon{color:#DC0A0A;color:var(--se-error, #DC0A0A)}/*!@.error.icon-button*/.error.icon-button.sc-se-icon{color:#FFFFFF;color:var(--se-error-contrast, #FFFFFF);background-color:#DC0A0A;background-color:var(--se-error, #DC0A0A)}/*!@.error.icon-button:not(.disabled):hover*/.error.icon-button.sc-se-icon:not(.disabled):hover{color:var(--se-hover-error-contrast, );background-color:var(--se-hover-error, )}/*!@.icon-button*/.icon-button.sc-se-icon{cursor:pointer;border-radius:2px;line-height:inherit}/*!@.icon-button.selected*/.icon-button.selected.sc-se-icon{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.icon-button:active, .icon-button.button:active*/.icon-button.sc-se-icon:active,.icon-button.button.sc-se-icon:active{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.icon-button:focus, .icon-button.button:focus*/.icon-button.sc-se-icon:focus,.icon-button.button.sc-se-icon:focus{color:#FFFFFF;color:var(--se-focus-contrast, #FFFFFF);background-color:#434343;background-color:var(--se-focus, #434343)}";

class IconComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
        * Optional property that defines if the button is disabled.  Set to `false` by default.
        */
        this.disabled = false;
    }
    render() {
        return (h(Host, { class: `icon-${this.size || 'small'}` }, h("div", { class: {
                'disabled': this.disabled,
                'se-icon-wrapper': true,
                [this.color]: !!this.color,
                [`icon-${this.option}`]: true
            } }, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get style() { return iconCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-icon",
        "$members$": {
            "option": [1],
            "size": [1],
            "color": [1],
            "disabled": [4]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var IconEcostruxure = `<svg version="1.1" id="Calque_1"
  xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="88px" height="16px" viewBox="0 0 88 16" enable-background="new 0 0 88 16" role="img">
  <title>Ecostruxure</title>
  <pattern width="20" height="20" patternUnits="userSpaceOnUse" id="Unnamed_Pattern_3" viewBox="0 -20 20 20" overflow="visible">
    <g>
      <polygon fill="none" points="0,-20 20,-20 20,0 0,0"></polygon>
      <path fill="#3DCD58" d="M16-5c0-0.552-0.448-1-1-1s-1,0.448-1,1s0.448,1,1,1S16-4.448,16-5"></path>
      <path fill="#3DCD58" d="M16-15c0-0.552-0.448-1-1-1s-1,0.448-1,1s0.448,1,1,1S16-14.448,16-15"></path>
      <path fill="#3DCD58" d="M6-5c0-0.552-0.448-1-1-1S4-5.552,4-5s0.448,1,1,1S6-4.448,6-5"></path>
      <path fill="#3DCD58" d="M6-15c0-0.552-0.448-1-1-1s-1,0.448-1,1s0.448,1,1,1S6-14.448,6-15"></path>
    </g>
  </pattern>
  <rect fill="#3DCD58" x="-1840" y="-2248.276" display="none" width="753.75" height="120"></rect>
  <rect fill="#3DCD58" x="-1050.023" y="-2248.276" display="none" width="157" height="120"></rect>
  <pattern id="SVGID_3_" patternTransform="matrix(1 0 0 -1 3533.9766 7213.6719)"></pattern>
  <rect fill="#3DCD58" x="-1847.023" y="-2058.327" display="none" width="954" height="350"></rect>
  <path fill="#3DCD58" display="none" opacity="0.2" d="M195-1215H-3c-9.389,0-17-7.611-17-17v-198c0-9.389,7.611-17,17-17h198    c9.389,0,17,7.611,17,17v198C212-1222.611,204.389-1215,195-1215z"></path>
  <g>
    <path fill="#3DCD58" d="M41.749,6.667h0.676V6.025c0-0.494,0.403-0.895,0.901-0.895l0,0c0.498,0,0.901,0.4,0.901,0.895v0.643h1.238      c0.376,0,0.68,0.302,0.68,0.674l0,0c0,0.373-0.304,0.675-0.68,0.675h-1.277v2.615c0,0.589,0.208,0.884,0.699,0.884      c0.236,0,0.421-0.068,0.574-0.176c0.21-0.148,0.515-0.102,0.618,0.133c0.04,0.089,0.066,0.193,0.066,0.313      c0,0.602-0.636,1.093-1.672,1.093c-1.4,0-2.048-0.7-2.048-2.05V8.017h-0.676c-0.376,0-0.681-0.302-0.681-0.675l0,0      C41.068,6.97,41.373,6.667,41.749,6.667z"></path>
    <path fill="#3DCD58" d="M50.633,6.595c0.843,0,1.166,0.76,0.739,1.509c-1.27,0.024-2.398,0.479-2.398,1.729v2.032      c0,0.501-0.408,0.907-0.913,0.907l0,0c-0.505,0-0.914-0.406-0.914-0.907V6.865c0-0.05,0.324-0.197,0.688-0.197      c0.544,0,1.14,0.271,1.14,1.388v0.159C49.208,7.281,49.688,6.595,50.633,6.595"></path>
    <path fill="#3DCD58" d="M54.841,12.877c-1.659,0-2.345-1.093-2.345-2.479V7.555c0-0.5,0.408-0.906,0.913-0.906l0,0      c0.505,0,0.914,0.406,0.914,0.906v2.705c0,0.7,0.57,1.268,1.276,1.268l0,0c0.706,0,1.277-0.568,1.277-1.268V7.575      c0-0.501,0.408-0.908,0.913-0.908l0,0c0.505,0,0.914,0.406,0.914,0.908v5.018c0,0.062-0.312,0.196-0.688,0.196h-0.113      c-0.539,0-0.975-0.433-0.975-0.968l0,0C56.486,12.435,55.826,12.877,54.841,12.877"></path>
    <path fill="#3DCD58" d="M69.37,12.877c-1.659,0-2.345-1.093-2.345-2.479V7.555c0-0.5,0.409-0.906,0.914-0.906l0,0      c0.504,0,0.913,0.406,0.913,0.906v2.705c0,0.7,0.572,1.268,1.277,1.268l0,0c0.704,0,1.275-0.568,1.275-1.268V7.575      c0-0.501,0.41-0.908,0.913-0.908l0,0c0.505,0,0.915,0.406,0.915,0.908v5.018c0,0.062-0.312,0.196-0.686,0.196h-0.115      c-0.539,0-0.975-0.433-0.975-0.968l0,0C71.016,12.435,70.355,12.877,69.37,12.877"></path>
    <path fill="#3DCD58" d="M77.858,6.595c0.843,0,1.166,0.76,0.737,1.509c-1.27,0.024-2.396,0.479-2.396,1.729v2.032      c0,0.501-0.409,0.907-0.914,0.907l0,0c-0.504,0-0.913-0.406-0.913-0.907V6.865c0-0.05,0.323-0.197,0.686-0.197      c0.544,0,1.141,0.271,1.141,1.388v0.159C76.432,7.281,76.912,6.595,77.858,6.595"></path>
    <path fill="#3DCD58" d="M82.602,11.613c0.958,0,1.489-0.405,1.788-0.883c0.013-0.024,0.882,0.085,0.882,0.785      c0,0.638-0.973,1.362-2.734,1.362c-2.062,0-3.422-1.216-3.422-3.105c0-1.829,1.387-3.178,3.305-3.178      c1.866,0,3.149,1.239,3.149,2.994l0,0c0,0.332-0.271,0.602-0.605,0.602h-4.189C80.904,11.085,81.617,11.613,82.602,11.613        M83.872,9.184c-0.04-0.835-0.596-1.387-1.478-1.387c-0.854,0-1.502,0.576-1.619,1.387H83.872z"></path>
    <g>
      <polygon fill="#3DCD58" points="85.685,6.906 85.276,6.906 85.276,6.667 86.391,6.667 86.391,6.906 85.983,6.906 85.983,7.956        85.685,7.956 		"></polygon>
      <polygon fill="#3DCD58" points="86.534,6.667 86.956,6.667 87.273,7.553 87.277,7.553 87.579,6.667 88,6.667 88,7.956        87.72,7.956 87.72,7.042 87.716,7.042 87.383,7.956 87.151,7.956 86.818,7.052 86.813,7.052 86.813,7.956 86.534,7.956 		"></polygon>
    </g>
    <path fill="#3DCD58" d="M35.567,7.832l0.4-1.376h3.652c0.45-1.996,0.095-3.847-1.184-5.058c-2.59-2.453-8.009-1.619-12.047,2.038      c-0.629,0.567-1.162,1.182-1.647,1.81h2.199l-0.512,1.379h-2.626c-0.25,0.435-0.486,0.866-0.666,1.305h3.114l-0.499,1.38h-3.06      c-0.524,2.107-0.189,4.074,1.126,5.323c2.558,2.421,7.961,1.57,11.996-2.086c0.707-0.635,1.289-1.322,1.816-2.028h-2.824      l0.43-1.376h3.302c0.242-0.438,0.464-0.87,0.639-1.31H35.567z M34.758,5.24c-0.234,0-0.333,0.035-0.426,0.136      c-0.038,0.038-0.054,0.08-0.067,0.159L33.08,9.791c-0.278,1.492-2.214,2.983-4.74,2.983h-1.374h-2.136l0.609-2.187h2.256      c0.229,0,0.41-0.082,0.56-0.24c0.055-0.063,0.127-0.159,0.137-0.258l0.936-3.718c0.277-1.495,1.942-3.145,4.466-3.145h3.592      L36.929,5.24H34.758z"></path>
    <g>
      <line fill="#3DCD58" x1="7.771" y1="12.025" x2="7.771" y2="12.025"></line>
      <path fill="#3DCD58" d="M0.806,3.221h5.862c0.416,0,0.753,0.333,0.753,0.746v0.001c0,0.412-0.337,0.747-0.753,0.747h-4.37        c-0.149,0-0.269,0.119-0.269,0.267v1.801c0,0.147,0.119,0.267,0.269,0.267h4.37c0.416,0,0.753,0.335,0.753,0.747l0,0        c0,0.414-0.337,0.748-0.753,0.748h-4.37c-0.149,0-0.269,0.12-0.269,0.267v2.202c0,0.147,0.119,0.267,0.269,0.267h4.37        c0.416,0,0.753,0.334,0.753,0.747l0,0c0,0.413-0.337,0.747-0.753,0.747H0.806C0.36,12.772,0,12.415,0,11.973V4.02        C0,3.579,0.36,3.221,0.806,3.221z"></path>
      <path fill="#3DCD58" d="M11.382,12.772c-2.737,0-3.153-2.006-3.153-3.02c0-1.42,0.773-3.088,3.177-3.088        c1.786,0,2.738,1.127,2.738,1.747c0,0.383-0.345,0.642-0.702,0.642c-0.299,0-0.477-0.18-0.548-0.282        c-0.369-0.529-0.714-0.958-1.5-0.958c-1.226,0-1.583,1.127-1.583,1.927c0,0.327,0.06,0.811,0.309,1.217        c0.227,0.36,0.632,0.698,1.274,0.698c0.655,0,1.107-0.361,1.297-0.642c0.382-0.564,0.476-0.756,0.857-0.756        c0.454,0,0.679,0.417,0.679,0.654C14.228,11.51,13.406,12.772,11.382,12.772"></path>
      <path fill="#3DCD58" d="M18.062,12.772c-2.392,0-3.201-1.667-3.201-3.054c0-1.589,1.011-3.054,3.165-3.054        c2.178,0,3.167,1.487,3.167,3.054C21.192,11.432,20.038,12.772,18.062,12.772 M18.025,7.78c-0.929,0-1.559,0.699-1.559,1.939        c0,1.262,0.63,1.938,1.559,1.938s1.56-0.688,1.56-1.938C19.585,8.467,18.954,7.78,18.025,7.78"></path>
    </g>
    <path fill="#3DCD58" d="M64.104,9.723l2.009-1.994c0.104-0.103,0.104-0.273,0-0.377L65.677,6.92c-0.34-0.336-0.896-0.336-1.234,0      l-1.582,1.57l-1.58-1.57c-0.34-0.336-0.895-0.336-1.234,0l-0.436,0.432c-0.105,0.104-0.105,0.274,0,0.377l2.009,1.994l-2.009,1.994      c-0.105,0.104-0.105,0.273,0,0.377l0.436,0.433c0.339,0.337,0.894,0.337,1.234,0l1.58-1.569l1.582,1.569      c0.339,0.337,0.894,0.337,1.234,0l0.436-0.433c0.104-0.104,0.104-0.273,0-0.377L64.104,9.723z"></path>
  </g>
  <polygon display="none" fill="#FFFFFF" points="-1740,-1725 -1760,-1745 -1720,-1745 "></polygon>
</svg>
`;

const iconEcostruxureCss = "/*!@:host*/.sc-se-icon-ecostruxure-h{height:auto;font-size:12px !important;color:inherit;fill:currentColor}/*!@.medium svg*/.medium.sc-se-icon-ecostruxure svg.sc-se-icon-ecostruxure{width:144px;height:27px}/*!@.inherited*/.inherited.sc-se-icon-ecostruxure{-webkit-filter:brightness(0) invert(1);filter:brightness(0) invert(1)}";

class IconEcostruxureComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Sets the size of the EcoStruxure icon.  The default setting is `small`.
         */
        this.size = "small";
        /**
         * Defines the color of the logo.
         * `standard`: displays a light green / dark green conventional SE logo.
         * `inherited`: default option, which takes the color from it's parent.
         */
        this.color = "standard";
    }
    render() {
        return h("span", { class: [this.size, this.color].join(' '), innerHTML: IconEcostruxure });
    }
    static get style() { return iconEcostruxureCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-icon-ecostruxure",
        "$members$": {
            "size": [1],
            "color": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var IconLifeison = `<svg id="Calque_1" data-name="Calque 1"
  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 252.08 69.42" width="213" height="60" role="img">
  <title>Life is On - Schneider Electric</title>
  <path fill="#3DCD58" class="cls-1" d="M19.83,40.64H12.47V27.75c0-.47,0-1.19-.81-1.19s-.76.66-.76,1.19v13c0,1.07.14,1.21,1.31,1.21h7.62c.52,0,1.16,0,1.16-.64s-.64-.63-1.16-.63"></path>
  <path fill="#3DCD58" class="cls-1" d="M23.12,30.73c-.72,0-.72.6-.72,1.08V41.1c0,.47,0,1.06.72,1.06s.7-.59.7-1.06V31.81c0-.43,0-1.08-.7-1.08"></path>
  <path fill="#3DCD58" class="cls-1" d="M23.12,27a.83.83,0,1,0,0,1.66.88.88,0,0,0,.9-.83.86.86,0,0,0-.9-.83"></path>
  <path fill="#3DCD58" class="cls-1" d="M30.09,31H28.57V30c0-1.36.13-2.26,1.84-2.26l.45,0,.53,0a.57.57,0,0,0,.58-.55.56.56,0,0,0-.33-.48A5.23,5.23,0,0,0,30,26.56a3.32,3.32,0,0,0-1.43.32,2.21,2.21,0,0,0-1,.93,3.81,3.81,0,0,0-.35,2V31H26c-.22,0-.9,0-.9.47s.63.5.9.5h1.2V41.1c0,.47,0,1.06.72,1.06s.7-.59.7-1.06V32h1.52c.59,0,.9-.17.9-.5s-.59-.47-.9-.47m-1.32-2.47,0,0,0,0"></path>
  <path fill="#3DCD58" class="cls-1" d="M41.5,35.69a5.86,5.86,0,0,0-.66-2.55,4.31,4.31,0,0,0-1.53-1.66,2.39,2.39,0,0,0-.22-.12l-.16-.08a3.48,3.48,0,0,0-.48-.21L38.29,31a4.91,4.91,0,0,0-.58-.15l-.12,0a5.47,5.47,0,0,0-.72-.08H36.8l-.42,0a5.22,5.22,0,0,0-4,1.57A6,6,0,0,0,31,36.45a6.1,6.1,0,0,0,1.32,4.06A4.42,4.42,0,0,0,34,41.72a6.26,6.26,0,0,0,2.4.44,5.12,5.12,0,0,0,3.92-1.51,3.63,3.63,0,0,0,1-1.78.67.67,0,0,0-.7-.6.73.73,0,0,0-.67.47,3.74,3.74,0,0,1-1.85,2,4,4,0,0,1-1.63.34,3.64,3.64,0,0,1-3-1.27,5.13,5.13,0,0,1-1-3.22h7.72c.71,0,1.31,0,1.31-.91m-9-.16a4,4,0,0,1,3.85-3.73c3.3,0,3.59,2.8,3.68,3.73Z"></path>
  <path fill="#3DCD58" class="cls-1" d="M48.75,26.56c-.79,0-.79.72-.79,1.19V41c0,.5,0,1.19.81,1.19s.76-.66.76-1.19V27.75c0-.53,0-1.19-.78-1.19"></path>
  <path fill="#3DCD58" class="cls-1" d="M74.48,34.57a.81.81,0,0,0,.8-.8v-9.1H73.65v9.1a.81.81,0,0,0,.83.8"></path>
  <path fill="#3DCD58" class="cls-1" d="M59.54,36.48l-.31-.14-.1-.05a13.57,13.57,0,0,0-2.58-.74,10.74,10.74,0,0,1-2.3-.66,1.46,1.46,0,0,1-1-1.35c0-1.2,1.43-1.74,2.84-1.74s2.6.58,2.94,1.51c.2.57.37.66.67.66a.58.58,0,0,0,.65-.56A2.47,2.47,0,0,0,59.68,32a3.4,3.4,0,0,0-1.3-.88A6.35,6.35,0,0,0,56,30.73,4.34,4.34,0,0,0,52.55,32a2.86,2.86,0,0,0-.69,1.78,2.42,2.42,0,0,0,1.1,2,8.68,8.68,0,0,0,2.88,1l1.35.33h.06c.79.2,2.26.57,2.26,1.89,0,1-1,2.06-3.21,2.06a3.23,3.23,0,0,1-3.25-1.83l0,0c-.15-.35-.3-.67-.7-.67a.78.78,0,0,0-.47.16.55.55,0,0,0-.23.44,3.13,3.13,0,0,0,1.24,2.07,3.55,3.55,0,0,0,1.18.64,6.76,6.76,0,0,0,2.16.29,5.16,5.16,0,0,0,4-1.32,3,3,0,0,0,.8-2,2.54,2.54,0,0,0-1.43-2.36"></path>
  <path fill="#3DCD58" class="cls-1" d="M92.77,31.89a4.19,4.19,0,0,0-3.15-1.16,4.47,4.47,0,0,0-3.81,1.83v-.81a1.18,1.18,0,0,0-.2-.88.2.2,0,0,0-.08,0l0,0a.78.78,0,0,0-.39-.1c-.72,0-.72.62-.72,1.08v9.29c0,.5,0,1.08.72,1.08a.78.78,0,0,0,.39-.1l0,0s.06,0,.08,0a1.14,1.14,0,0,0,.2-.87v-4a7.67,7.67,0,0,1,.41-3.36,3.51,3.51,0,0,1,1.39-1.42,3.88,3.88,0,0,1,1.89-.51,2.82,2.82,0,0,1,2.28,1,3.86,3.86,0,0,1,.47,2.23v6a1.24,1.24,0,0,0,.2.87s.06,0,.08,0l0,0a.72.72,0,0,0,.39.1c.72,0,.72-.6.72-1.08v-6.3a4.1,4.1,0,0,0-.9-2.89"></path>
  <path fill="#3DCD58" class="cls-1" d="M76.73,26.36v1.56a6.65,6.65,0,1,1-4.48.06V26.4a8.15,8.15,0,1,0,4.48,0"></path>
  <path fill="#009530" class="cls-2" d="M136,28.07c-2.72-1.21-4.34-1.67-5.94-1.67s-2.77.6-2.77,1.53c0,2.82,9.56,2,9.56,8.54,0,3.6-3,5.68-7.21,5.68a12.68,12.68,0,0,1-6.76-1.81v-4c2.68,1.78,4.33,2.41,6.4,2.41,1.8,0,2.77-.63,2.77-1.72,0-3.07-9.56-2-9.56-8.66,0-3.23,2.8-5.37,7.15-5.37A15.43,15.43,0,0,1,136,24.42v3.65"></path>
  <path fill="#009530" class="cls-2" d="M149.35,41.3a12.25,12.25,0,0,1-4.28.85c-4.45,0-7.33-2.59-7.33-6.53s3-6.61,7.17-6.61a13.22,13.22,0,0,1,4.25.82v3a7.29,7.29,0,0,0-3.24-.85c-2.39,0-3.92,1.43-3.92,3.65a3.54,3.54,0,0,0,3.78,3.72,9.71,9.71,0,0,0,3.57-.88V41.3"></path>
  <path fill="#009530" class="cls-2" d="M186.53,29a6.41,6.41,0,0,0-6.69,6.64c0,3.91,2.89,6.5,7.35,6.5a9.13,9.13,0,0,0,5.65-1.68V38a7.48,7.48,0,0,1-4.69,1.79c-2.51,0-4-1.3-4.18-3.52h9.09c.19-4.63-2.85-7.25-6.53-7.25m-2.48,5.15a2.69,2.69,0,0,1,2.75-2.77,2.72,2.72,0,0,1,2.75,2.77Z"></path>
  <rect fill="#009530" class="cls-2" x="194.6" y="29.25" width="3.98" height="12.67"></rect>
  <path fill="#009530" class="cls-2" d="M209.64,23.2v6.6a7.45,7.45,0,0,0-3.3-.79c-3.63,0-6.14,2.68-6.14,6.56s2.51,6.59,5.91,6.59a5.27,5.27,0,0,0,3.53-1.26v1h4V23.2h-4m0,15.26a3.37,3.37,0,0,1-2.37,1c-1.87,0-3.05-1.54-3.05-3.85,0-2.53,1.18-4,3.18-4a4.28,4.28,0,0,1,2.24.75Z"></path>
  <path fill="#009530" class="cls-2" d="M222,29a6.41,6.41,0,0,0-6.68,6.64c0,3.91,2.89,6.5,7.34,6.5a9.16,9.16,0,0,0,5.66-1.68V38a7.49,7.49,0,0,1-4.7,1.79c-2.49,0-4-1.3-4.17-3.52h9.08c.19-4.63-2.85-7.25-6.53-7.25m-2.47,5.15a2.68,2.68,0,0,1,2.74-2.77A2.73,2.73,0,0,1,225,34.16Z"></path>
  <path fill="#009530" class="cls-2" d="M234.46,32.88h0c1.18-2.64,2.51-3.88,4-3.88a4.29,4.29,0,0,1,2.63,1.16l-1.09,3.51a4.59,4.59,0,0,0-2.36-.93c-1.46,0-2.39,1.37-3.27,3.7V41.9h-4V29.23h4v3.65"></path>
  <path fill="#009530" class="cls-2" d="M198.76,23.92a2.8,2.8,0,0,1-1.5,3.06c-1.2.71-2.47.48-2.84-.5a2.79,2.79,0,0,1,1.49-3.07c1.2-.71,2.47-.48,2.85.51"></path>
  <path fill="#009530" class="cls-2" d="M163.67,33.85A4.44,4.44,0,0,0,159,29a4.88,4.88,0,0,0-4,2.12H155V23.2h-4V41.88h4v-8c.93-1.34,1.72-1.92,2.66-1.92,1.23,0,2.06.88,2.06,2.77v4.46a11.9,11.9,0,0,1,4-1.27v-4"></path>
  <path fill="#009530" class="cls-2" d="M173.66,29a5.13,5.13,0,0,0-4.13,2V29.25h-4v8.61a6.3,6.3,0,0,1,4,1.81V33.75c1.05-1.56,1.79-2.09,2.78-2.09s2,.75,2,2.53v7.7h4v-8c0-3.73-2.64-4.85-4.61-4.85"></path>
  <polygon fill="#009530" class="cls-2" points="180.47 45.53 175.85 45.53 175.85 48.81 180.31 48.81 180.31 50.22 175.85 50.22 175.85 53.61 180.61 53.61 180.61 55.02 174.3 55.02 174.3 44.12 180.47 44.12 180.47 45.53"></polygon>
  <rect fill="#009530" class="cls-2" x="184.24" y="44.12" width="1.42" height="10.91"></rect>
  <path fill="#009530" class="cls-2" d="M190.71,51.64h5c0-2.66-1.22-3.94-3.12-3.94a3.32,3.32,0,0,0-3.35,3.63,3.54,3.54,0,0,0,3.47,3.83,4.67,4.67,0,0,0,2.87-.85V52.93a4.56,4.56,0,0,1-2.51.87,2.25,2.25,0,0,1-2.41-2.16m2-2.72a1.63,1.63,0,0,1,1.67,1.77h-3.6a1.86,1.86,0,0,1,1.93-1.77"></path>
  <path fill="#009530" class="cls-2" d="M205,49.72a3.22,3.22,0,0,0-2-.72,2.42,2.42,0,0,0,.23,4.83,4.51,4.51,0,0,0,1.9-.48v1.4a5.84,5.84,0,0,1-2.13.41,3.45,3.45,0,0,1-3.64-3.58c0-2.38,1.36-3.88,3.54-3.88a4.68,4.68,0,0,1,2.07.49v1.53"></path>
  <path fill="#009530" class="cls-2" d="M211.46,47.83h2.27v1.28h-2.27V52.8a1,1,0,0,0,1,1.09,3.08,3.08,0,0,0,1.62-.54v1.33a4.34,4.34,0,0,1-1.73.48,2.12,2.12,0,0,1-2.32-2.26V49.11H208.8V49l2.66-2.6v1.48"></path>
  <path fill="#009530" class="cls-2" d="M219.15,47.83V49.5h0c.73-1.28,1.41-1.8,2.08-1.8a2.48,2.48,0,0,1,1.71.83l-.75,1.25a2.29,2.29,0,0,0-1.33-.72,2,2,0,0,0-1.73,2.21V55h-1.42V47.83h1.42"></path>
  <path fill="#009530" class="cls-2" d="M237.47,49.72a3.26,3.26,0,0,0-2-.72,2.21,2.21,0,0,0-2.19,2.45,2.24,2.24,0,0,0,2.43,2.38,4.59,4.59,0,0,0,1.9-.48v1.4a6,6,0,0,1-2.14.41,3.46,3.46,0,0,1-3.64-3.58c0-2.38,1.37-3.88,3.54-3.88a4.72,4.72,0,0,1,2.08.49v1.53"></path>
  <rect fill="#009530" class="cls-2" x="226.71" y="47.83" width="1.42" height="7.19"></rect>
  <path fill="#009530" class="cls-2" d="M228.18,45.25a1,1,0,0,1-.53,1.09c-.43.25-.88.17-1-.18a1,1,0,0,1,.53-1.09c.43-.25.88-.17,1,.18"></path>
  <path fill="#009530" class="cls-2" d="M165.66,48.77l.43-1.56H170a6.11,6.11,0,0,0-1.27-5.73c-2.77-2.77-8.58-1.83-12.9,2.31a14.68,14.68,0,0,0-1.77,2.05h2.36l-.55,1.56h-2.81a11.84,11.84,0,0,0-.72,1.48h3.34l-.54,1.56h-3.28c-.56,2.38-.2,4.61,1.21,6,2.74,2.74,8.53,1.78,12.85-2.36a15.9,15.9,0,0,0,2-2.29h-3l.46-1.56h3.54a15,15,0,0,0,.69-1.48h-3.87m-.87-2.94c-.25,0-.35,0-.45.16a.34.34,0,0,0-.08.18L163,51c-.3,1.69-2.38,3.38-5.08,3.38h-3.76l.65-2.48h2.42a.78.78,0,0,0,.6-.27.56.56,0,0,0,.14-.29l1-4.21a4.71,4.71,0,0,1,4.78-3.55h3.85l-.49,2.27Z"></path>
  <rect class="cls-3" x="107.7" y="10.9" width="0.82" height="47.63"></rect>
</svg>
`;

const iconLifeisonCss = "/*!@:host*/.sc-se-icon-lifeison-h{height:auto;font-size:12px !important;color:inherit;fill:currentColor;width:100%}/*!@.inherited*/.inherited.sc-se-icon-lifeison{-webkit-filter:brightness(0) invert(1);filter:brightness(0) invert(1)}";

class IconLifeisonComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the color of the logo.
         * `standard`: displays a light green / dark green conventional SE logo.
         * `inherited`: default option, which takes the color from it's parent.
         */
        this.color = "inherited";
    }
    render() {
        return h("span", { class: this.color, innerHTML: IconLifeison });
    }
    static get style() { return iconLifeisonCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-icon-lifeison",
        "$members$": {
            "color": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var IconSchneider = `<svg version="1.1" id="Layer_1"
  xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 1015 472" width="140" height="60" role="img">
  <title>Schneider Electric</title>
  <g >
    <path fill="#009530" d="M210.1,155c-17.6-7.8-28.1-10.8-38.5-10.8c-10.9,0-17.9,3.9-17.9,10c0,18.3,61.9,13.1,61.9,55.4
        c0,23.3-19.5,36.8-46.7,36.8c-21.3,0-31.8-5.5-43.9-11.7v-26.1c17.4,11.5,28.1,15.6,41.5,15.6c11.7,0,17.9-4.1,17.9-11.2
        c0-19.9-61.9-12.6-61.9-56.1c0-21,18.1-34.9,46.3-34.9c13.6,0,25.9,2.9,41.2,9.4V155"></path>
    <path fill="#009530" d="M296.8,240.7c-10.3,3.7-19.1,5.5-27.8,5.5c-28.9,0-47.5-16.8-47.5-42.4c0-25.1,19.4-42.8,46.4-42.8c8.4,0,19,2.1,27.6,5.3
        v19.2c-6.8-3.6-14.6-5.6-21-5.6c-15.5,0-25.4,9.3-25.4,23.7c0,14.6,9.8,24.2,24.5,24.2c6.2,0,11.8-1.4,23.2-5.7L296.8,240.7"></path>
    <path fill="#009530" d="M537.8,161.1c-25.3,0-43.3,17.9-43.3,43c0,25.3,18.7,42.1,47.6,42.1c6.4,0,21.9,0,36.6-10.9v-16
        c-12.1,8.6-20.1,11.6-30.4,11.6c-16.3,0-26.2-8.4-27.1-22.8h58.9C581.4,178.1,561.7,161.1,537.8,161.1 M521.7,194.5
        c1.1-11.4,7.7-18,17.8-18c10,0,16.7,6.8,17.8,18H521.7z"></path>
    <rect fill="#009530" x="590.1" y="162.6" width="25.8" height="82.2"></rect>
    <path fill="#009530" d="M687.6,123.4v42.8c-7-3.4-13.9-5.2-21.4-5.2c-23.5,0-39.8,17.4-39.8,42.5c0,24.6,16.3,42.7,38.3,42.7
        c8.7,0,15.5-2.3,22.9-8.2v6.6h25.8V123.4H687.6 M687.6,222.3c-5.4,4.8-9.8,6.8-15.3,6.8c-12.1,0-19.8-10-19.8-25
        c0-16.4,7.7-25.9,20.7-25.9c4.7,0,10.7,2.1,14.5,4.8v39.3H687.6z"></path>
    <path fill="#009530" d="M767.5,161.1c-25.3,0-43.3,17.9-43.3,43c0,25.3,18.7,42.1,47.6,42.1c6.4,0,21.9,0,36.7-10.9v-16
        c-12.1,8.6-20.1,11.6-30.4,11.6c-16.2,0-26.2-8.4-27.1-22.8h58.9C811.1,178.1,791.4,161.1,767.5,161.1 M751.5,194.5
        c1.1-11.4,7.7-18,17.8-18c10,0,16.8,6.8,17.9,18H751.5z"></path>
    <path fill="#009530" d="M848.5,186.1h0.4c7.6-17.1,16.2-25.1,26.2-25.1c5.1,0,9.6,2,17.1,7.5l-7.1,22.8c-6.8-4.3-11.2-6-15.3-6
        c-9.5,0-15.5,8.9-21.2,24v35.4h-25.9v-82.1h25.8V186.1"></path>
    <path fill="#009530" d="M617.1,128c2.4,6.4-1.9,15.3-9.7,19.9s-16,3.1-18.4-3.3s1.9-15.3,9.7-19.9C606.4,120.2,614.6,121.6,617.1,128"></path>
    <path fill="#009530" d="M389.6,192.5c0-22.3-15.1-31.4-30.1-31.4c-10.1,0-18.5,4.3-26,13.7h-0.4v-51.4h-25.8v121.1h25.8v-52.1
        c6-8.7,11.2-12.5,17.2-12.5c8,0,13.4,5.7,13.4,18v28.9c8.6-4.4,17.4-7.2,25.8-8.2v-26.1"></path>
    <path fill="#009530" d="M454.4,161.1c-10.5,0-18.5,3.9-26.7,13.3v-11.8h-25.8v55.8c8.9,0.9,20.3,5,25.8,11.8v-38.4c6.8-10.2,11.6-13.6,18-13.6
        c7.3,0,12.9,4.8,12.9,16.4v49.9h25.8v-52C484.3,168.3,467.2,161.1,454.4,161.1"></path>
    <polygon fill="#009530" points="498.5,268.1 468.5,268.1 468.5,289.4 497.4,289.4 497.4,298.6 468.5,298.6 468.5,320.5 499.4,320.5 499.4,329.7
        458.5,329.7 458.5,259 498.5,259"></polygon>
    <rect fill="#009530" x="523" y="259" width="9.2" height="70.7"></rect>
    <path fill="#009530" d="M564.9,307.8h32.7c0-17.2-7.9-25.6-20.2-25.6c-12.8,0-21.7,9.5-21.7,23.6c0,12.9,8,24.8,22.5,24.8c7.9,0,13-1.8,18.6-5.5
        v-8.9c-5.5,3.6-10.7,5.6-16.3,5.6C571.6,321.8,566.3,317,564.9,307.8 M577.6,290.1c6.5,0,10.5,4.5,10.8,11.5H565
        C566.3,294.3,570.6,290.1,577.6,290.1"></path>
    <path fill="#009530" d="M657.6,295.3c-5.3-3.6-8.8-4.7-12.8-4.7c-8.4,0-14.2,6.4-14.2,15.9c0,9.6,6.2,15.4,15.8,15.4c3.9,0,7.7-1,12.3-3.1v9
        c-3.1,1.5-9,2.7-13.9,2.7c-13.9,0-23.6-9.6-23.6-23.2c0-15.4,8.8-25.2,22.9-25.2c5.4,0,9,1.3,13.5,3.2V295.3"></path>
    <path fill="#009530" d="M699.4,283.1h14.7v8.3h-14.7v23.9c0,5.5,4,7.1,6.6,7.1c3.3,0,6.7-1.2,10.5-3.5v8.6c-3.2,1.8-8.2,3.1-11.2,3.1
        c-10,0-15-6.2-15-14.6v-24.6h-8.1v-1l17.3-16.9L699.4,283.1"></path>
    <path fill="#009530" d="M749.2,283.1v10.8h0.2c4.7-8.3,9.1-11.7,13.5-11.7c3.7,0,7.2,1.8,11.1,5.4l-4.9,8.1c-2.8-2.8-6.4-4.7-8.6-4.7
        c-6.3,0-11.3,6.4-11.3,14.4v24.3H740v-46.6H749.2"></path>
    <path fill="#009530" d="M868,295.3c-5.3-3.6-8.8-4.7-12.9-4.7c-8.4,0-14.2,6.4-14.2,15.9c0,9.6,6.2,15.4,15.7,15.4c3.9,0,7.7-1,12.4-3.1v9
        c-3.2,1.5-9.1,2.7-13.9,2.7c-13.9,0-23.6-9.6-23.6-23.2c0-15.4,8.8-25.2,23-25.2c5.4,0,9,1.3,13.5,3.2V295.3"></path>
    <rect fill="#009530" x="798.3" y="283.1" width="9.2" height="46.6"></rect>
    <path fill="#009530" d="M807.8,266.3c0.9,2.3-0.7,5.4-3.4,7.1c-2.8,1.6-5.7,1.1-6.6-1.2c-0.8-2.3,0.7-5.4,3.5-7.1
        C804,263.6,806.9,264.1,807.8,266.3"></path>
    <path fill="#009530" d="M402.5,289.1l2.8-10.1h25.4c3.1-14.6,0.7-28.2-8.2-37.1c-18-18-55.6-11.9-83.7,15c-4.4,4.2-8.1,8.7-11.5,13.3h15.3
        l-3.6,10.1h-18.2c-1.7,3.2-3.4,6.4-4.6,9.6h21.6l-3.5,10.1H313c-3.6,15.5-1.3,29.9,7.8,39c17.8,17.8,55.3,11.5,83.3-15.3
        c4.9-4.7,9-9.7,12.6-14.9h-19.6l3-10.1H423c1.7-3.2,3.2-6.4,4.4-9.6H402.5 M396.9,270.1c-1.6,0-2.3,0.3-3,1
        c-0.3,0.3-0.4,0.6-0.5,1.2l-8.2,31.2c-1.9,10.9-15.4,21.9-32.9,21.9h-9.6h-14.8l4.2-16h15.7c1.6,0,2.8-0.6,3.9-1.8
        c0.4-0.5,0.9-1.2,0.9-1.9l6.5-27.3c1.9-11,13.5-23.1,31-23.1h25l-3.2,14.8L396.9,270.1L396.9,270.1z"></path>
  </g>
</svg>
`;

const iconSchneiderCss = "/*!@:host*/.sc-se-icon-schneider-h{margin-right:5px;color:#009530 !important;fill:currentColor}/*!@svg*/svg.sc-se-icon-schneider{margin-bottom:-11px;margin-top:-7px;height:60px}";

class IconSchneiderComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return h("span", { innerHTML: IconSchneider });
    }
    static get style() { return iconSchneiderCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-icon-schneider",
        "$members$": undefined,
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const linkCss = "@charset \"UTF-8\";/*!@a*/a.sc-se-link{font-size:14px;margin:4px;line-height:17px;display:inline-block;color:#42B4E6;color:var(--se-secondary, #42B4E6);text-decoration:none}/*!@a.external:before*/a.external.sc-se-link:before{content:\"> \"}/*!@a:hover*/a.sc-se-link:hover{text-decoration:underline;color:#0087CD;color:var(--se-hover-secondary, #0087CD)}/*!@a[data-disabled]*/a[data-disabled].sc-se-link{pointer-events:none;color:#CBCBCB;color:var(--se-hover-standard, #CBCBCB)}/*!@:host(.sidemenu-link) a*/.sidemenu-link.sc-se-link-h a.sc-se-link{font-size:16px}";

class LinkComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Adds visual and function properties to your link component.
         * The default setting is `internal`, which redirects you to the specified URL in the same page.
         * The `external` setting adds an underline and ">" icon to the link, and opens the link in a new web browser tab.
         */
        this.option = 'internal';
    }
    render() {
        return (h("a", { href: this.url, "data-disabled": this.disabled, class: this.option == 'external' ? 'external' : '', target: this.option == 'external' ? '_blank' : '' }, h("slot", null)));
    }
    static get style() { return linkCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-link",
        "$members$": {
            "url": [1],
            "disabled": [4],
            "option": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const listCss = "/*!@:host*/.sc-se-list-h{width:100%;height:100%;position:relative;overflow:auto;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}";

class ListComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the style of the list.  The default setting is `classic`.
         */
        this.option = "classic";
        /**
         * Defines if list groups can be collapsed.  The default setting is `true`.
         */
        this.canCollapse = true;
    }
    optionDidChange() {
        Array.from(this.el.querySelectorAll('se-list-item, se-list-group')).forEach((item) => {
            const closeList = item.closest('se-list');
            // Make sure we only change the style of the current list. Handy if list has a dropdown with a different list style
            if (closeList === this.el) {
                item.option = this.option;
            }
        });
    }
    canCollapseDidChange() {
        Array.from(this.el.querySelectorAll('se-list-group')).forEach((item) => {
            item.canCollapse = this.canCollapse;
        });
    }
    componentWillLoad() {
        this.optionDidChange();
        this.canCollapseDidChange();
    }
    render() {
        return h(Host, { role: "list" }, h("slot", null));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "option": ["optionDidChange"],
        "canCollapse": ["canCollapseDidChange"]
    }; }
    static get style() { return listCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-list",
        "$members$": {
            "option": [1],
            "canCollapse": [4, "can-collapse"]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var arrow2Down = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M657 432c8 8 8 22 0 30L527 592c-5 4-10 6-15 6-6 0-11-2-16-6L366 462c-8-8-8-22 0-30 9-8 22-8 30 0l116 115 115-115c8-8 21-8 30 0z"/></svg>`;

var arrow2Up = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M657 562c8 8 8 22 0 30-4 4-10 6-15 6-6 0-11-2-15-6L512 477 396 592c-4 4-9 6-15 6-5 0-11-2-15-6-8-8-8-22 0-30l130-130c9-8 22-8 31 0z"/></svg>`;

const listGroupCss = "/*!@:host*/.sc-se-list-group-h{margin:0;font-weight:lighter;display:-ms-flexbox;display:flex}/*!@:host(.hide-nav-icon) se-icon*/.hide-nav-icon.sc-se-list-group-h se-icon.sc-se-list-group{display:none}/*!@:host(.sidemenu-list-item) .nav-content*/.sidemenu-list-item.sc-se-list-group-h .nav-content.sc-se-list-group{font-weight:500}/*!@:host(.sidemenu-list-item) .button*/.sidemenu-list-item.sc-se-list-group-h .button.sc-se-list-group{border-bottom:1px solid #E6E6E6}/*!@.se-list-item*/.se-list-item.sc-se-list-group{width:100%;width:-webkit-fill-available;-webkit-transition:0.2s;transition:0.2s}/*!@.se-list-item.button.classic, .se-list-item.button.nav*/.se-list-item.button.classic.sc-se-list-group,.se-list-item.button.nav.sc-se-list-group{min-height:47px;height:20px;max-width:100%}/*!@.se-list-item.classic.selected, .se-list-item.dropdown.selected*/.se-list-item.classic.selected.sc-se-list-group,.se-list-item.dropdown.selected.sc-se-list-group{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.se-list-item.classic.selected:hover, .se-list-item.classic.selected:focus, .se-list-item.dropdown.selected:hover, .se-list-item.dropdown.selected:focus*/.se-list-item.classic.selected.sc-se-list-group:hover,.se-list-item.classic.selected.sc-se-list-group:focus,.se-list-item.dropdown.selected.sc-se-list-group:hover,.se-list-item.dropdown.selected.sc-se-list-group:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@.se-list-item.nav.selected*/.se-list-item.nav.selected.sc-se-list-group{color:#3DCD58;color:var(--se-primary, #3DCD58)}/*!@.se-list-item.treeview*/.se-list-item.treeview.sc-se-list-group{border-bottom:0;padding:4px 0}/*!@.se-list-item.treeview .nav-content*/.se-list-item.treeview.sc-se-list-group .nav-content.sc-se-list-group{padding-left:12px}/*!@.se-list-item.treeview .nav-icon*/.se-list-item.treeview.sc-se-list-group .nav-icon.sc-se-list-group{margin-left:2px;margin-right:-8px}/*!@.se-list-item.treeview.selected*/.se-list-item.treeview.selected.sc-se-list-group{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.se-list-item.treeview.selected:hover, .se-list-item.treeview.selected:focus*/.se-list-item.treeview.selected.sc-se-list-group:hover,.se-list-item.treeview.selected.sc-se-list-group:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@.se-list-item.dropdown*/.se-list-item.dropdown.sc-se-list-group{min-height:32px;max-width:100%;border-bottom:none;padding-left:0}/*!@.se-list-item.dropdown .nav-content*/.se-list-item.dropdown.sc-se-list-group .nav-content.sc-se-list-group{padding:6px 10px}/*!@.se-list-item.dropdown .nav-content .list-item-label*/.se-list-item.dropdown.sc-se-list-group .nav-content.sc-se-list-group .list-item-label.sc-se-list-group{font-size:16px;line-height:20px}/*!@.se-list-item.dropdown .nav-icon*/.se-list-item.dropdown.sc-se-list-group .nav-icon.sc-se-list-group{margin-right:0;margin-left:4px}/*!@.se-list-item.headline*/.se-list-item.headline.sc-se-list-group{min-height:42px;height:42px}/*!@.se-list-item.headline .nav-content small*/.se-list-item.headline.sc-se-list-group .nav-content.sc-se-list-group small.sc-se-list-group{padding-bottom:2px}/*!@.button*/.button.sc-se-list-group{-webkit-box-sizing:border-box;box-sizing:border-box;border:none;margin:0;padding:0;overflow:visible;position:relative;outline:none;background:transparent;width:100%;color:inherit;font:inherit;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;text-align:left;text-align:start;border-bottom:1px solid #E6E6E6;text-decoration:none}/*!@.button:not([disabled])*/.button.sc-se-list-group:not([disabled]){cursor:pointer}/*!@.button:not([disabled]):hover, .button:not([disabled]):focus*/.button.sc-se-list-group:not([disabled]):hover,.button.sc-se-list-group:not([disabled]):focus{background-color:#EDEDED}/*!@.selectedBar*/.selectedBar.sc-se-list-group{position:absolute;top:0;bottom:0;left:0;width:5px;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}/*!@.nav-icon*/.nav-icon.sc-se-list-group{margin:-1px -12px 0 8px}/*!@.nav-content*/.nav-content.sc-se-list-group{min-width:0;padding:0 16px;margin:0;overflow:hidden;font-weight:300;font-size:16px;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-moz-align-items:start center;-ms-flex-align:start center;align-items:start center}/*!@.nav-content div, .nav-content small*/.nav-content.sc-se-list-group div.sc-se-list-group,.nav-content.sc-se-list-group small.sc-se-list-group{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}/*!@.nav-content .list-item-label*/.nav-content.sc-se-list-group .list-item-label.sc-se-list-group{line-height:24px}/*!@.nav-content small*/.nav-content.sc-se-list-group small.sc-se-list-group{font-size:14px;line-height:14px}/*!@se-list-item .nav-icon*/se-list-item.sc-se-list-group .nav-icon.sc-se-list-group{margin-left:18px}/*!@:host*/.sc-se-list-group-h{-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}/*!@.group-item*/.group-item.sc-se-list-group{overflow:unset;padding-bottom:0}/*!@.se-list-group*/.se-list-group.sc-se-list-group{list-style-type:none;margin:0;padding:0}/*!@.se-list-group.button .list-group-label*/.se-list-group.button.sc-se-list-group .list-group-label.sc-se-list-group{line-height:24px}/*!@.se-list-group.button.collapsed + .group-item*/.se-list-group.button.collapsed.sc-se-list-group+.group-item.sc-se-list-group{display:none}/*!@.se-list-group.button.selected*/.se-list-group.button.selected.sc-se-list-group{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.se-list-group.button.selected:hover, .se-list-group.button.selected:focus*/.se-list-group.button.selected.sc-se-list-group:hover,.se-list-group.button.selected.sc-se-list-group:focus{background-color:#434343}/*!@.se-list-group.button.selectedChild*/.se-list-group.button.selectedChild.sc-se-list-group{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.se-list-group.button.selectedChild:hover, .se-list-group.button.selectedChild:focus*/.se-list-group.button.selectedChild.sc-se-list-group:hover,.se-list-group.button.selectedChild.sc-se-list-group:focus{background-color:#434343;background-color:var(--se-focus, #434343)}/*!@.se-list-group.button.classic, .se-list-group.button.nav*/.se-list-group.button.classic.sc-se-list-group,.se-list-group.button.nav.sc-se-list-group{min-height:47px;height:20px;max-width:100%}/*!@.se-list-group.button.treeview*/.se-list-group.button.treeview.sc-se-list-group{border-bottom:0;padding:4px 0}/*!@.se-list-group.button.treeview > *:first-child*/.se-list-group.button.treeview.sc-se-list-group>*.sc-se-list-group:first-child{padding-left:4px}/*!@.se-list-group.button.treeview .nav-icon*/.se-list-group.button.treeview.sc-se-list-group .nav-icon.sc-se-list-group{margin-right:0}/*!@.se-list-group.button.treeview .nav-content*/.se-list-group.button.treeview.sc-se-list-group .nav-content.sc-se-list-group{padding-left:8px}/*!@.se-list-group.button.treeview .treeview-collapse-icon*/.se-list-group.button.treeview.sc-se-list-group .treeview-collapse-icon.sc-se-list-group{margin-left:2px}/*!@.se-list-group.button.treeview + div se-list-item*/.se-list-group.button.treeview.sc-se-list-group+div.sc-se-list-group se-list-item.sc-se-list-group{padding-left:6px}/*!@.se-list-group.button.headline*/.se-list-group.button.headline.sc-se-list-group{height:47px;background-color:#F7F7F7}/*!@.se-list-group.button.headline .nav-content*/.se-list-group.button.headline.sc-se-list-group .nav-content.sc-se-list-group{font-size:16px}/*!@.se-list-group.button.dropdown*/.se-list-group.button.dropdown.sc-se-list-group{margin-top:-1px}";

class ListGroupComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines if the item group is collapsed/closed. The default setting is `false`.
         */
        this.collapsed = false;
        /**
         * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        this.indentation = 0;
        /**
         * Defines if list groups can be collapsed, true by default.
         */
        this.canCollapse = true;
        this.didGroupClick = createEvent(this, "didGroupClick", 7);
        this.didGroupCollapse = createEvent(this, "didGroupCollapse", 7);
    }
    collapsedChanged() {
        this.checkSelected();
    }
    ChildUpdated() {
        this.checkSelected();
    }
    checkSelected() {
        if (!this.collapsed) {
            this.selectedChild = false;
        }
        else {
            Array.from(this.el.querySelectorAll("se-list-item, se-list-group")).forEach((item) => {
                if (item.selected || item.selectedChild) {
                    this.selectedChild = true;
                }
            });
        }
    }
    toggleGroupButton() {
        if (this.option !== 'treeview') {
            this.collapsed = !this.collapsed;
            this.didGroupCollapse.emit({ collapsed: this.collapsed });
        }
        this.didGroupClick.emit();
    }
    toggleCollapseTreeview() {
        // called only from treeview
        this.collapsed = !this.collapsed;
        this.didGroupCollapse.emit({ collapsed: this.collapsed });
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    getClosestParent() {
        // get the closest between se-list or se-list-group
        return this.el.parentElement.closest("se-list, se-list-group");
    }
    getParentConfig() {
        const closest = this.getClosestParent() || {};
        const indentation = closest.indentation;
        if (indentation !== null && indentation !== undefined) {
            this.indentation = indentation + 1;
        }
        if (closest.option) {
            this.option = closest.option;
        }
    }
    componentWillLoad() {
        this.getParentConfig();
        this.hasIcon = !!this.icon || !!this.el.querySelector('[slot="icon"]');
    }
    componentDidLoad() {
        this.setButtonId();
    }
    render() {
        let title = this.item;
        let myDescription = null;
        if (!!this.description) {
            myDescription = h("small", null, this.description);
            title = `${title}, ${this.description}`;
        }
        // The button section is a copy of the list item. External component cannot be used inside a component (DOM issue)
        return (h(Host, { role: "listitem", option: this.option }, h("button", { "aria-expanded": `${this.collapsed}`, title: title, id: this.innerId, class: ['se-list-group', this.option, this.collapsed ? "collapsed" : '', this.option, this.selected ? "selected" : '', this.selectedChild ? "selectedChild" : '', "button"].join(' '), style: { paddingLeft: `${20 * this.indentation}px` }, onClick: () => this.toggleGroupButton(), disabled: !this.canCollapse }, this.option === "nav" && this.selected && h("div", { class: "selectedBar" }), this.option === 'treeview' ? h("se-icon", { class: "treeview-collapse-icon", onClick: (e) => { e.stopPropagation(); this.toggleCollapseTreeview(); }, style: { paddingLeft: `calc(${8 * this.indentation}px)` } }, h("span", { innerHTML: this.collapsed ? arrow2_right : arrow2Down })) : '', this.hasIcon &&
            h("div", { class: "nav-icon" }, this.icon && h("se-icon", { color: this.iconColor }, this.icon), h("slot", { name: "icon" })), h("div", { class: "nav-content" }, h("div", { class: "list-group-label" }, this.item), myDescription), this.option !== "treeview" && this.canCollapse
            ? h("se-icon", { class: "standard-collapse-icon", size: "medium" }, h("span", { innerHTML: this.collapsed ? arrow2Down : arrow2Up }))
            : ''), h("div", { role: "list", class: ["se-list-group", "group-item", this.option].join(' ') }, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "collapsed": ["collapsedChanged"]
    }; }
    static get style() { return listGroupCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-list-group",
        "$members$": {
            "item": [1],
            "description": [1],
            "selected": [1028],
            "icon": [1],
            "iconColor": [1, "icon-color"],
            "collapsed": [1028],
            "indentation": [2],
            "option": [1025],
            "canCollapse": [4, "can-collapse"],
            "selectedChild": [4, "selected-child"],
            "innerId": [32]
        },
        "$listeners$": [[0, "didSelectedChange", "ChildUpdated"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const listItemCss = "/*!@:host*/.sc-se-list-item-h{margin:0;font-weight:lighter;display:-ms-flexbox;display:flex}/*!@:host(.hide-nav-icon) se-icon*/.hide-nav-icon.sc-se-list-item-h se-icon.sc-se-list-item{display:none}/*!@:host(.sidemenu-list-item) .nav-content*/.sidemenu-list-item.sc-se-list-item-h .nav-content.sc-se-list-item{font-weight:500}/*!@:host(.sidemenu-list-item) .button*/.sidemenu-list-item.sc-se-list-item-h .button.sc-se-list-item{border-bottom:1px solid #E6E6E6}/*!@.se-list-item*/.se-list-item.sc-se-list-item{width:100%;width:-webkit-fill-available;-webkit-transition:0.2s;transition:0.2s}/*!@.se-list-item.button.classic, .se-list-item.button.nav*/.se-list-item.button.classic.sc-se-list-item,.se-list-item.button.nav.sc-se-list-item{min-height:47px;height:20px;max-width:100%}/*!@.se-list-item.classic.selected, .se-list-item.dropdown.selected*/.se-list-item.classic.selected.sc-se-list-item,.se-list-item.dropdown.selected.sc-se-list-item{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.se-list-item.classic.selected:hover, .se-list-item.classic.selected:focus, .se-list-item.dropdown.selected:hover, .se-list-item.dropdown.selected:focus*/.se-list-item.classic.selected.sc-se-list-item:hover,.se-list-item.classic.selected.sc-se-list-item:focus,.se-list-item.dropdown.selected.sc-se-list-item:hover,.se-list-item.dropdown.selected.sc-se-list-item:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@.se-list-item.nav.selected*/.se-list-item.nav.selected.sc-se-list-item{color:#3DCD58;color:var(--se-primary, #3DCD58)}/*!@.se-list-item.treeview*/.se-list-item.treeview.sc-se-list-item{border-bottom:0;padding:4px 0}/*!@.se-list-item.treeview .nav-content*/.se-list-item.treeview.sc-se-list-item .nav-content.sc-se-list-item{padding-left:12px}/*!@.se-list-item.treeview .nav-icon*/.se-list-item.treeview.sc-se-list-item .nav-icon.sc-se-list-item{margin-left:2px;margin-right:-8px}/*!@.se-list-item.treeview.selected*/.se-list-item.treeview.selected.sc-se-list-item{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}/*!@.se-list-item.treeview.selected:hover, .se-list-item.treeview.selected:focus*/.se-list-item.treeview.selected.sc-se-list-item:hover,.se-list-item.treeview.selected.sc-se-list-item:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@.se-list-item.dropdown*/.se-list-item.dropdown.sc-se-list-item{min-height:32px;max-width:100%;border-bottom:none;padding-left:0}/*!@.se-list-item.dropdown .nav-content*/.se-list-item.dropdown.sc-se-list-item .nav-content.sc-se-list-item{padding:6px 10px}/*!@.se-list-item.dropdown .nav-content .list-item-label*/.se-list-item.dropdown.sc-se-list-item .nav-content.sc-se-list-item .list-item-label.sc-se-list-item{font-size:16px;line-height:20px}/*!@.se-list-item.dropdown .nav-icon*/.se-list-item.dropdown.sc-se-list-item .nav-icon.sc-se-list-item{margin-right:0;margin-left:4px}/*!@.se-list-item.headline*/.se-list-item.headline.sc-se-list-item{min-height:42px;height:42px}/*!@.se-list-item.headline .nav-content small*/.se-list-item.headline.sc-se-list-item .nav-content.sc-se-list-item small.sc-se-list-item{padding-bottom:2px}/*!@.button*/.button.sc-se-list-item{-webkit-box-sizing:border-box;box-sizing:border-box;border:none;margin:0;padding:0;overflow:visible;position:relative;outline:none;background:transparent;width:100%;color:inherit;font:inherit;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;text-align:left;text-align:start;border-bottom:1px solid #E6E6E6;text-decoration:none}/*!@.button:not([disabled])*/.button.sc-se-list-item:not([disabled]){cursor:pointer}/*!@.button:not([disabled]):hover, .button:not([disabled]):focus*/.button.sc-se-list-item:not([disabled]):hover,.button.sc-se-list-item:not([disabled]):focus{background-color:#EDEDED}/*!@.selectedBar*/.selectedBar.sc-se-list-item{position:absolute;top:0;bottom:0;left:0;width:5px;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}/*!@.nav-icon*/.nav-icon.sc-se-list-item{margin:-1px -12px 0 8px}/*!@.nav-content*/.nav-content.sc-se-list-item{min-width:0;padding:0 16px;margin:0;overflow:hidden;font-weight:300;font-size:16px;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-moz-align-items:start center;-ms-flex-align:start center;align-items:start center}/*!@.nav-content div, .nav-content small*/.nav-content.sc-se-list-item div.sc-se-list-item,.nav-content.sc-se-list-item small.sc-se-list-item{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}/*!@.nav-content .list-item-label*/.nav-content.sc-se-list-item .list-item-label.sc-se-list-item{line-height:24px}/*!@.nav-content small*/.nav-content.sc-se-list-item small.sc-se-list-item{font-size:14px;line-height:14px}/*!@se-list-item .nav-icon*/se-list-item.sc-se-list-item .nav-icon.sc-se-list-item{margin-left:18px}";

class ListItemComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        this.indentation = 0;
        this.didSelectedChange = createEvent(this, "didSelectedChange", 7);
    }
    SelectedDidChange() {
        this.didSelectedChange.emit();
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    getClosestParent() {
        // get the closest between se-list or se-list-group
        return this.el.parentElement.closest("se-list, se-list-group");
    }
    getParentConfig() {
        const closest = this.getClosestParent() || {};
        const indentation = closest.indentation;
        if (indentation !== null && indentation !== undefined) {
            this.indentation = indentation + 1;
        }
        if (closest.option) {
            this.option = closest.option;
        }
    }
    componentWillLoad() {
        this.getParentConfig();
    }
    componentDidLoad() {
        this.setButtonId();
    }
    render() {
        let myDescription = null;
        let title = this.item;
        if (!!this.description) {
            myDescription = h("small", null, this.description);
            title = `${title}, ${this.description}`;
        }
        const TagType = this.href === undefined ? 'button' : 'a';
        const attrs = (TagType === 'a') ? { href: this.href } : {};
        const icon = this.option !== "treeview" ?
            h("se-icon", { color: this.iconColor }, this.icon)
            :
                this.indentation !== 0 ?
                    h("se-icon", { color: this.iconColor, style: { paddingLeft: `8px` } }, this.icon)
                    :
                        h("se-icon", { color: this.iconColor }, this.icon);
        const padding = this.option !== "treeview" ? 20 : 24;
        return (h(Host, { role: "listitem" }, h(TagType, Object.assign({}, attrs, { title: title, class: { "selected": this.selected, ["button"]: true, [this.option]: true, ["se-list-item"]: true }, style: { paddingLeft: `${padding * this.indentation}px` }, id: this.innerId }), (this.option === "nav" && this.selected) ? h("div", { class: "selectedBar" }) : '', h("div", { class: "nav-icon" }, !!this.icon ? icon : '', h("slot", { name: "icon" })), h("div", { class: "nav-content" }, h("div", { class: "list-item-label" }, this.item), myDescription), h("slot", null), this.option === "nav" ? h("se-icon", { size: "medium" }, h("span", { innerHTML: arrow2_right })) : '')));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "selected": ["SelectedDidChange"]
    }; }
    static get style() { return listItemCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-list-item",
        "$members$": {
            "item": [1],
            "description": [1],
            "selected": [4],
            "icon": [1],
            "iconColor": [1, "icon-color"],
            "indentation": [2],
            "option": [1025],
            "href": [1],
            "innerId": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var spinner = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 1024 1024" style="enable-background:new 0 0 1024 1024;" xml:space="preserve">
<g id="icons">
	<g>
		<path d="M512,894c-51.6,0-101.6-10.1-148.7-30c-45.5-19.2-86.3-46.8-121.4-81.9c-35.1-35.1-62.6-75.9-81.9-121.4
			c-19.9-47.1-30-97.1-30-148.7s10.1-101.6,30-148.7c19.2-45.5,46.8-86.3,81.9-121.4s75.9-62.6,121.4-81.9
			c47.1-19.9,97.1-30,148.7-30v54c-87.6,0-170,34.1-231.9,96.1S184,424.4,184,512s34.1,170,96.1,231.9S424.4,840,512,840
			s170-34.1,231.9-96.1S840,599.6,840,512h54c0,51.6-10.1,101.6-30,148.7c-19.2,45.5-46.8,86.3-81.9,121.4
			c-35.1,35.1-75.9,62.6-121.4,81.9C613.6,883.9,563.6,894,512,894z"/>
	</g>
</g>
</svg>
`;

const loadingCss = "/*!@:host*/.sc-se-loading-h{display:none;overflow:hidden}/*!@.loading-wrapper*/.loading-wrapper.sc-se-loading{position:absolute;top:0;bottom:0;left:0;right:0;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background-color:rgba(255, 255, 255, 0.6)}/*!@.se-loading*/.se-loading.sc-se-loading{position:relative;z-index:25;line-height:128px;-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;color:#3DCD58;color:var(--se-primary, #3DCD58);display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}/*!@.se-loading.dialog*/.se-loading.dialog.sc-se-loading{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);-webkit-box-shadow:1px 1px 8px 1px rgba(0, 0, 0, 0.3);box-shadow:1px 1px 8px 1px rgba(0, 0, 0, 0.3)}/*!@.loading-background*/.loading-background.sc-se-loading{position:absolute;top:0;bottom:0;left:0;right:0;-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;z-index:20}/*!@.loading-icon*/.loading-icon.sc-se-loading{position:relative;font-size:128px;height:128px;width:128px;-webkit-animation:clockwiseSpin 1.5s infinite linear;animation:clockwiseSpin 1.5s infinite linear;fill:currentColor}@-webkit-keyframes clockwiseSpin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes clockwiseSpin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}/*!@:host(.show)*/.show.sc-se-loading-h{display:block}";

class LoadingComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the visual display of the loader.
         * `standard` is the default option, and displays a spinning green circle.
         * `dialog` gives the loading icon a look-and-feel that it is within a popup dialog box.
         */
        this.option = 'standard';
    }
    render() {
        return (h(Host, { class: { 'show': this.loading } }, h("div", { class: "loading-wrapper" }, h("div", { class: ["se-loading", this.option].join(' ') }, h("div", { class: "loading-icon", innerHTML: spinner }))), h("div", { class: "loading-background" })));
    }
    static get style() { return loadingCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-loading",
        "$members$": {
            "loading": [4],
            "option": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const radioCss = "/*!@:host*/.sc-se-radio-h{-moz-align-items:center;-ms-flex-align:center;align-items:center}/*!@:host .se-radio*/.sc-se-radio-h .se-radio.sc-se-radio{display:inline-block}/*!@:host .se-radio .required*/.sc-se-radio-h .se-radio.sc-se-radio .required.sc-se-radio{color:#DC0A0A;color:var(--se-error, #DC0A0A);padding-left:3px}/*!@:host .se-radio .radio-label*/.sc-se-radio-h .se-radio.sc-se-radio .radio-label.sc-se-radio{font-weight:300;line-height:1.2 !important;font-size:14px;padding-left:6px}/*!@:host .se-radio .radio-container*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.sc-se-radio{position:relative;padding-left:16px;font-weight:300;line-height:1.2 !important;font-size:14px;margin:8px;margin-right:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}/*!@:host .se-radio .radio-container input*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.sc-se-radio input.sc-se-radio{height:0;width:0;opacity:0;margin:0;position:absolute;clip:rect(1px, 1px, 1px, 1px)}/*!@:host .se-radio .radio-container input:checked ~ .checkdot*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.sc-se-radio input.sc-se-radio:checked~.checkdot.sc-se-radio{height:8px;width:8px;border:4px solid;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}/*!@:host .se-radio .radio-container input:checked ~ .checkdot[data-color=secondary]*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.sc-se-radio input.sc-se-radio:checked~.checkdot[data-color=secondary].sc-se-radio{border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}/*!@:host .se-radio .radio-container input:checked ~ .checkdot:after*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.sc-se-radio input.sc-se-radio:checked~.checkdot.sc-se-radio:after{display:block}/*!@:host .se-radio .radio-container input[disabled]:checked ~ .checkdot*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.sc-se-radio input[disabled].sc-se-radio:checked~.checkdot.sc-se-radio{opacity:0.5}/*!@:host .se-radio .radio-container .checkdot*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.sc-se-radio .checkdot.sc-se-radio{position:absolute;top:1px;left:-8px;height:14px;width:14px;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border:1px solid;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);border-radius:50%}/*!@:host .se-radio .radio-container.checkdot-label-left*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.checkdot-label-left.sc-se-radio{padding-left:0;margin:0}/*!@:host .se-radio .radio-container.checkdot-label-left .checkdot*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container.checkdot-label-left.sc-se-radio .checkdot.sc-se-radio{left:auto}/*!@:host .se-radio .radio-container[data-disabled] .checkdot*/.sc-se-radio-h .se-radio.sc-se-radio .radio-container[data-disabled].sc-se-radio .checkdot.sc-se-radio{opacity:0.5}";

class RadioComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`.
         */
        this.required = false;
        /**
         * Defines the color of the checkbox.
         * The default setting is `primary`, rendering a green color.
         * The `secondary` setting renders a blue color.
         */
        this.color = 'primary';
        /**
         * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        /**
           * Determines whether or not the checkbox is checked when you initialize it.
         * The default setting is `false`.
         * Checked if set to `true`.
           */
        this.selected = false;
        /**
         * Sets the position of the label for your checkbox component.
         * The default setting is `right`.
         */
        this.labelPos = 'right';
        this.didCheck = createEvent(this, "didCheck", 7);
    }
    /**
     * Sets the required property on the radio button element.
     */
    async setRequired() {
        this.required = true;
    }
    setInputId() {
        const id = this.el.getAttribute('id');
        if (id) {
            const input = this.el.shadowRoot.querySelector('input');
            input.setAttribute('id', 'wc-' + id);
        }
    }
    handleClick() {
        this.selected = !this.selected;
        const checkboxObject = { value: this.value, selected: this.selected };
        this.didCheck.emit(checkboxObject);
    }
    componentDidLoad() {
        this.setInputId();
    }
    render() {
        return (h("div", { class: "se-radio" }, h("label", { class: ["radio-container", `checkdot-label-${this.labelPos}`].join(' '), "data-disabled": this.disabled }, this.label, this.required ? h("span", { class: "required" }, "*") : '', h("input", { type: "radio", checked: this.selected, disabled: this.disabled, onClick: () => this.handleClick() }), h("span", { class: "checkdot", "data-color": this.color }))));
    }
    get el() { return getElement(this); }
    static get style() { return radioCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-radio",
        "$members$": {
            "value": [1],
            "label": [1],
            "required": [4],
            "color": [1],
            "disabled": [4],
            "selected": [1028],
            "labelPos": [1, "label-pos"],
            "setRequired": [64]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const radioGroupCss = "/*!@:host*/.sc-se-radio-group-h{font-size:0}/*!@::slotted(se-radio)*/.sc-se-radio-group-s>se-radio{display:block;padding:4px 0}";

class RadioGroupComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
         */
        this.color = 'standard';
        /**
         * Defines the height of each button in the group.
         * `small` is the default setting, rendering a 32px height and a 14px font size.
         * `nano` sets the height to 24px and the font size to 12px.
         */
        this.size = 'small';
        /**
         * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        this.didChange = createEvent(this, "didChange", 7);
    }
    disabledDidChange() {
        this.updateItemMode();
    }
    valueDidChange(value) {
        this.selectChild(this.children, value);
        this.didChange.emit(this.value);
    }
    buttonClickedHandler(event) {
        this.handleChildClicked(event);
    }
    radioButtonCheckedHandler(event) {
        this.handleChildClicked(event);
    }
    updateItemMode() {
        this.children.forEach((child) => {
            if (child.localName == 'se-button') {
                child.setGrouped();
                if (child.icon) {
                    child.iconOnly = true;
                }
            }
            if (this.disabled) {
                child.disabled = true;
            }
            child.size = this.size;
            child.color = this.color;
        });
    }
    handleChildClicked(event) {
        let buttonInfo = event.detail;
        this.value = buttonInfo.value;
        this.selectChild(this.children, this.value);
        this.didChange.emit(this.value);
    }
    selectChild(children, value) {
        children.forEach((child) => {
            child.selected = child.value === value;
        });
    }
    componentDidLoad() {
        this.children = this.el.querySelectorAll('se-button, se-radio');
        this.updateItemMode();
        this.selectChild(this.children, this.value);
    }
    render() {
        return (h("slot", null));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "disabled": ["disabledDidChange"],
        "value": ["valueDidChange"]
    }; }
    static get style() { return radioGroupCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-radio-group",
        "$members$": {
            "color": [1],
            "size": [1],
            "disabled": [1028],
            "value": [1025]
        },
        "$listeners$": [[0, "didClick", "buttonClickedHandler"], [0, "didCheck", "radioButtonCheckedHandler"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var test_results_nok = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M542 512l134 134c8 9 8 22 0 30-4 5-9 7-15 7-5 0-11-2-15-7L512 542 378 676c-5 5-10 7-16 7-5 0-11-2-15-7-8-8-8-21 0-30l134-134-134-134c-8-9-8-22 0-30 9-9 22-9 31 0l134 134 134-134c8-9 22-9 30 0 8 8 8 21 0 30z"/></svg>`;

const sidemenuCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}/*!@:host*/.sc-se-sidemenu-h{display:none;position:absolute;top:0;left:0;height:100%;width:100%;z-index:160;background-color:transparent !important}/*!@:host(.show-menu)*/.show-menu.sc-se-sidemenu-h{display:block}/*!@:host(.show-menu) .menu-background*/.show-menu.sc-se-sidemenu-h .menu-background.sc-se-sidemenu{background:rgba(255, 255, 255, 0.6);height:100%;position:absolute;top:0;right:0;bottom:0;left:0;width:100%;z-index:100}/*!@:host(.show-menu) .actual-menu*/.show-menu.sc-se-sidemenu-h .actual-menu.sc-se-sidemenu{background-color:#FFFFFF;-webkit-box-shadow:rgba(0, 0, 0, 0.3) 1px 1px 4px 0px;box-shadow:rgba(0, 0, 0, 0.3) 1px 1px 4px 0px;height:100vh;max-height:100%;overflow:hidden;position:relative;width:250px;max-width:80%;z-index:150}/*!@:host(.open-item) .actual-menu*/.open-item.sc-se-sidemenu-h .actual-menu.sc-se-sidemenu{width:80%}/*!@.menu-background.show-menu*/.menu-background.show-menu.sc-se-sidemenu{-webkit-animation-name:fadeIn;animation-name:fadeIn}/*!@.menu-background.hide-menu*/.menu-background.hide-menu.sc-se-sidemenu{-webkit-animation-name:fadeOut;animation-name:fadeOut}/*!@.actual-menu.show-menu*/.actual-menu.show-menu.sc-se-sidemenu{-webkit-animation-name:slideInLeft;animation-name:slideInLeft}/*!@.actual-menu.hide-menu*/.actual-menu.hide-menu.sc-se-sidemenu{-webkit-animation-name:slideOutLeft;animation-name:slideOutLeft}/*!@.animated*/.animated.sc-se-sidemenu{-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both}/*!@.flex*/.flex.sc-se-sidemenu{display:-ms-flexbox;display:flex;-moz-flex:0 1 auto;-ms-flex:0 1 auto;flex:0 1 auto;width:100%}/*!@.flex.d-flex-center*/.flex.d-flex-center.sc-se-sidemenu{-ms-flex-align:center;align-items:center}/*!@.menu-sidenav*/.menu-sidenav.sc-se-sidemenu{margin-right:-6px;cursor:pointer}/*!@.menu-sidenav se-icon*/.menu-sidenav.sc-se-sidemenu se-icon.sc-se-sidemenu{vertical-align:-webkit-baseline-middle;vertical-align:-moz-middle-with-baseline}/*!@.header-title*/.header-title.sc-se-sidemenu{margin:0}/*!@.footer-icon*/.footer-icon.sc-se-sidemenu{text-align:center}/*!@.footer-icon:last-child*/.footer-icon.sc-se-sidemenu:last-child{margin-bottom:3px}/*!@.external-link*/.external-link.sc-se-sidemenu{background-color:#F7F7F7;padding:16px;text-align:center}";

const SHOW_MENU = 'show-menu';
const HIDE_MENU = 'hide-menu';
const OPEN_ITEM = 'open-item';
class SidemenuComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.open = false;
        this.items = [];
        /**
         * Defines the text displayed in the header of the Sidemenu.
         * The default value is `Menu`.
         */
        this.label = 'Menu';
        /*
        * Defines the link to be uses in the external-link element of the Sidemenu.
        * The default value is www.se.com, which will generate if no link is defined.
        * If a different url is provided it will replace the default value.
        * If an empty string is provided the external link element will not be generated.
       */
        this.link = 'www.se.com';
        this.toggled = createEvent(this, "toggled", 7);
    }
    /**
     * Toggle the sidemenu. Optionally, pass the `item` or `id` of a sidemenu-item to open that particular menu item.
     *
     * ex: `document.getElementById("main-sidemenu").toggle("side-about");`
     */
    async toggle(itemName) {
        // Only perform toggle if no item name is passed or menu is closed
        if (!this.open || !itemName || itemName && !this.open) {
            // Only perform open animation if menu is closed
            if (!this.open) {
                this.el.classList.add(SHOW_MENU);
                this.addAnimation(null);
            }
            this.open = !this.open;
        }
        else if (this.selectedItem && this.isItemElement(this.selectedItem, itemName)) {
            // Deselect the active item if a new item name is passed
            this.unselectAll();
        }
        if (this.open) {
            if (itemName) {
                // If an item name was provided, open that item in the menu (#228)
                const itemElement = this.getItemElement(itemName);
                if (itemElement) {
                    // Select the new active element
                    this.setActive(itemElement);
                }
            }
            else {
                try {
                    if (this.items.find(x => x.classList.contains('active'))) {
                        this.el.classList.add(OPEN_ITEM);
                    }
                }
                catch (error) {
                    console.log(error);
                }
            }
            // Dispatch the 'opened' event
            this.toggled.emit({ state: 'open' });
        }
        else {
            // Remove css classes and unselect the active element
            this.removeAnimation(() => {
                this.el.classList.remove(SHOW_MENU);
            });
            this.unselectAll();
            // Dispatch the 'closed' event
            this.toggled.emit({ state: 'closed' });
        }
    }
    noSelectedItem() {
        return !this.items.find(x => x === this.selectedItem);
    }
    unselectAll() {
        this.el.classList.remove(OPEN_ITEM);
        if (this.selectedItem && !this.selectedItem.childElementCount) {
            this.selectedItem = undefined;
            this.items.forEach((item) => {
                item.active = false;
            });
        }
    }
    getItemElement(name) {
        return this.items.find(i => this.isItemElement(i, name));
    }
    isItemElement(elm, name) {
        return elm.getAttribute('item') === name || elm.getAttribute('id') === name;
    }
    setActive(item) {
        if (this.items.length) {
            this.items.forEach((item) => {
                item.active = false;
            });
            setTimeout(() => {
                item.active = true;
                this.selectedItem = item;
                this.el.classList.add(OPEN_ITEM);
            }, 100);
        }
    }
    addAnimation(callback) {
        try {
            this.menuInnerEl.classList.add(SHOW_MENU);
            this.backdropEl.classList.add(SHOW_MENU);
            setTimeout(() => {
                this.menuInnerEl.classList.remove(SHOW_MENU);
                this.backdropEl.classList.remove(SHOW_MENU);
                callback && callback();
            }, 200);
        }
        catch (error) {
            console.log(error);
        }
    }
    removeAnimation(callback) {
        try {
            this.menuInnerEl.classList.add(HIDE_MENU);
            this.backdropEl.classList.add(HIDE_MENU);
            setTimeout(() => {
                this.menuInnerEl.classList.remove(HIDE_MENU);
                this.backdropEl.classList.remove(HIDE_MENU);
                callback && callback();
            }, 200);
        }
        catch (error) {
            console.log(error);
        }
    }
    watchItemList() {
        this.observer = new MutationObserver((mutations) => {
            let activeItem = false;
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    this.setItemsArray();
                }
                if (mutation.removedNodes.length) {
                    this.setItemsArray();
                    this.items.forEach((item) => {
                        if (item.active) {
                            activeItem = true;
                        }
                    });
                    if (!activeItem && this.selectedItem) {
                        // console.log(this.selectedItem);
                        this.selectedItem = undefined;
                    }
                }
            });
        });
        this.observer.observe(this.el, { childList: true });
    }
    setItemsArray() {
        this.items = Array.from(this.el.querySelectorAll('se-sidemenu-item'));
    }
    renderList() {
        return this.items.map((item) => {
            return [
                h("se-list-item", { class: [!item.childElementCount ? 'hide-nav-icon' : '', 'sidemenu-list-item'].join(' '), option: "nav", onClick: () => this.setActive(item), selected: item.active, item: item.item, id: item.id ? `list-${item.id}` : '' }),
            ];
        });
    }
    componentWillLoad() {
        this.setItemsArray();
        this.watchItemList();
    }
    componentDidUnload() {
        this.items.length = 0;
        this.selectedItem = undefined;
        this.observer.disconnect();
    }
    render() {
        return [
            h("div", { class: "menu-background animated d-flex-row flex", onClick: () => this.toggle(), ref: el => this.backdropEl = el }),
            h("div", { class: "actual-menu animated full-content d-flex-column flex", ref: el => this.menuInnerEl = el }, h("div", { class: "d-flex flex" }, h("se-block", { width: "250px" }, h("div", { class: "d-flex-center flex" }, h("span", { class: "menu-sidenav", onClick: () => this.toggle() }, h("se-icon", { size: "large", color: "primary" }, h("span", { innerHTML: test_results_nok }))), h("h3", { class: "header-title" }, this.label)), h("se-divider", null), h("se-block-content", { option: "fill" }, h("se-list", { option: "nav" }, this.renderList())), h("se-icon-lifeison", { class: "footer-icon", color: "standard" }), this.link ?
                h("div", { class: "external-link" }, h("se-link", { class: "sidemenu-link", url: `http://${this.link}` }, this.link)) : ''), h("se-divider", { option: "vertical" }), h("se-block", { ref: el => this.menuItemInnerEl = el }, h("slot", null))))
        ];
    }
    get el() { return getElement(this); }
    static get style() { return sidemenuCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-sidemenu",
        "$members$": {
            "label": [1],
            "link": [1],
            "open": [32],
            "items": [32],
            "selectedItem": [32],
            "toggle": [64]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const sidemenuItemCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}/*!@:host*/.sc-se-sidemenu-item-h{height:100%;width:100%}/*!@:host [role=sidenavpanel]*/.sc-se-sidemenu-item-h [role=sidenavpanel].sc-se-sidemenu-item{height:100%}/*!@:host(.navitem-hidden)*/.navitem-hidden.sc-se-sidemenu-item-h{display:none !important;height:0}";

class SidemenuItemComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines if the menu item is active or not.
         * The default setting is `false`.
         */
        this.active = false;
        this.didClick = createEvent(this, "didClick", 7);
    }
    activeDidChange() {
        if (this.active) {
            this.didClick.emit();
        }
    }
    render() {
        return (h(Host, { role: 'sidenavpanel', "aria-hidden": { 'true': !this.active }, class: [this.active ? 'active' : 'navitem-hidden'].join(' ') }, h("slot", null)));
    }
    static get watchers() { return {
        "active": ["activeDidChange"]
    }; }
    static get style() { return sidemenuItemCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-sidemenu-item",
        "$members$": {
            "item": [1],
            "active": [1028]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const sliderCss = "/*!@.slider-container*/.slider-container.sc-se-slider{display:block}/*!@input[type=range]*/input[type=range].sc-se-slider{--sx:0;margin:0;padding:0;width:100%;height:16px;background:transparent}/*!@input[type=range], input[type=range]::-webkit-slider-thumb*/input[type=range].sc-se-slider,input[type=range].sc-se-slider::-webkit-slider-thumb{-webkit-appearance:none}/*!@input[type=range]::-webkit-slider-runnable-track*/input[type=range].sc-se-slider::-webkit-slider-runnable-track{-webkit-box-sizing:border-box;box-sizing:border-box;border:none;width:100%;height:5px;background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}/*!@.slider-container input[type=range]::-webkit-slider-runnable-track*/.slider-container.sc-se-slider input[type=range].sc-se-slider::-webkit-slider-runnable-track{width:100%;background:-webkit-gradient(linear, left top, left bottom, from(#626469), to(#626469)) 0/var(--sx) 100% no-repeat #f7f7f7;background:linear-gradient(#626469, #626469) 0/var(--sx) 100% no-repeat #f7f7f7}/*!@input[type=range]::-moz-range-track*/input[type=range].sc-se-slider::-moz-range-track{box-sizing:border-box;border:none;width:100%;height:5px;background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}/*!@input[type=range]::-ms-track*/input[type=range].sc-se-slider::-ms-track{box-sizing:border-box;border:none;width:100%;height:5px;background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}/*!@input[type=range]::-moz-range-progress*/input[type=range].sc-se-slider::-moz-range-progress{height:5px;background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range]::-ms-fill-lower*/input[type=range].sc-se-slider::-ms-fill-lower{height:5px;background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range]::-webkit-slider-thumb*/input[type=range].sc-se-slider::-webkit-slider-thumb{margin-top:-5.5px;-webkit-box-sizing:border-box;box-sizing:border-box;border:none;width:16px;height:16px;border-radius:50%;background:#fff;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;-o-border-radius:50%}/*!@input[type=range]::-webkit-slider-thumb:hover*/input[type=range].sc-se-slider::-webkit-slider-thumb:hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB);border:4px solid transparent}/*!@input[type=range]::-webkit-slider-thumb:active*/input[type=range].sc-se-slider::-webkit-slider-thumb:active{background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range]::-webkit-slider-thumb:hover, input[type=range]::-webkit-slider-thumb:active*/input[type=range].sc-se-slider::-webkit-slider-thumb:hover,input[type=range].sc-se-slider::-webkit-slider-thumb:active{width:24px;height:24px;position:relative;bottom:80%}/*!@input[type=range]::-moz-range-thumb*/input[type=range].sc-se-slider::-moz-range-thumb{box-sizing:border-box;border:none;width:16px;height:16px;border-radius:50%;background:#fff;box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;-o-border-radius:50%}/*!@input[type=range]::-moz-range-thumb:hover*/input[type=range].sc-se-slider::-moz-range-thumb:hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB);border:4px solid transparent}/*!@input[type=range]::-moz-range-thumb:active*/input[type=range].sc-se-slider::-moz-range-thumb:active{background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range]::-moz-range-thumb:hover, input[type=range]::-moz-range-thumb:active*/input[type=range].sc-se-slider::-moz-range-thumb:hover,input[type=range].sc-se-slider::-moz-range-thumb:active{width:24px;height:24px;position:relative;bottom:80%}/*!@input[type=range]::-ms-thumb*/input[type=range].sc-se-slider::-ms-thumb{box-sizing:border-box;border:none;width:16px;height:16px;border-radius:50%;background:#fff;box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;-o-border-radius:50%}/*!@input[type=range]::-ms-thumb:hover*/input[type=range].sc-se-slider::-ms-thumb:hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB);border:4px solid transparent}/*!@input[type=range]::-ms-thumb:active*/input[type=range].sc-se-slider::-ms-thumb:active{background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range]::-ms-thumb:hover, input[type=range]::-ms-thumb:active*/input[type=range].sc-se-slider::-ms-thumb:hover,input[type=range].sc-se-slider::-ms-thumb:active{width:24px;height:24px;position:relative;bottom:80%}/*!@input[type=range]::-ms-tooltip*/input[type=range].sc-se-slider::-ms-tooltip{display:none}/*!@input[type=range] ::-ms-ticks-after*/input[type=range].sc-se-slider .sc-se-slider::-ms-ticks-after{display:none}/*!@input[type=range] ::-ms-ticks-before*/input[type=range].sc-se-slider .sc-se-slider::-ms-ticks-before{display:none}/*!@input[type=range][disabled]::-webkit-slider-runnable-track*/input[type=range][disabled].sc-se-slider::-webkit-slider-runnable-track{-webkit-box-sizing:border-box;box-sizing:border-box;border:none;width:100%;height:5px;background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}/*!@.slider-container input[type=range][disabled]::-webkit-slider-runnable-track*/.slider-container.sc-se-slider input[type=range][disabled].sc-se-slider::-webkit-slider-runnable-track{width:100%;background:-webkit-gradient(linear, left top, left bottom, from(#cbcbcb), to(#cbcbcb)) 0/var(--sx) 100% no-repeat #f7f7f7;background:linear-gradient(#cbcbcb, #cbcbcb) 0/var(--sx) 100% no-repeat #f7f7f7}/*!@input[type=range][disabled]::-moz-range-progress*/input[type=range][disabled].sc-se-slider::-moz-range-progress{height:5px;background-color:#626469;background-color:var(--se-selected, #626469);background:#cbcbcb}/*!@input[type=range][disabled]::-ms-fill-lower*/input[type=range][disabled].sc-se-slider::-ms-fill-lower{height:5px;background-color:#626469;background-color:var(--se-selected, #626469);background:#cbcbcb}/*!@input[type=range][disabled]::-webkit-slider-thumb*/input[type=range][disabled].sc-se-slider::-webkit-slider-thumb{-webkit-box-sizing:border-box;box-sizing:border-box;border:none;width:16px;height:16px;border-radius:50%;background:#fff;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;-o-border-radius:50%}/*!@input[type=range][disabled]::-webkit-slider-thumb:hover*/input[type=range][disabled].sc-se-slider::-webkit-slider-thumb:hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB);border:4px solid transparent}/*!@input[type=range][disabled]::-webkit-slider-thumb:active*/input[type=range][disabled].sc-se-slider::-webkit-slider-thumb:active{background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range][disabled]::-webkit-slider-thumb:hover, input[type=range][disabled]::-webkit-slider-thumb:active*/input[type=range][disabled].sc-se-slider::-webkit-slider-thumb:hover,input[type=range][disabled].sc-se-slider::-webkit-slider-thumb:active{width:24px;height:24px;position:relative;bottom:80%}/*!@input[type=range][disabled]::-webkit-slider-thumb:hover, input[type=range][disabled]::-webkit-slider-thumb:active*/input[type=range][disabled].sc-se-slider::-webkit-slider-thumb:hover,input[type=range][disabled].sc-se-slider::-webkit-slider-thumb:active{background-color:#FFFFFF;width:16px;height:16px;position:static}/*!@input[type=range][disabled]::-moz-range-thumb*/input[type=range][disabled].sc-se-slider::-moz-range-thumb{box-sizing:border-box;border:none;width:16px;height:16px;border-radius:50%;background:#fff;box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;-o-border-radius:50%}/*!@input[type=range][disabled]::-moz-range-thumb:hover*/input[type=range][disabled].sc-se-slider::-moz-range-thumb:hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB);border:4px solid transparent}/*!@input[type=range][disabled]::-moz-range-thumb:active*/input[type=range][disabled].sc-se-slider::-moz-range-thumb:active{background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range][disabled]::-moz-range-thumb:hover, input[type=range][disabled]::-moz-range-thumb:active*/input[type=range][disabled].sc-se-slider::-moz-range-thumb:hover,input[type=range][disabled].sc-se-slider::-moz-range-thumb:active{width:24px;height:24px;position:relative;bottom:80%}/*!@input[type=range][disabled]::-moz-range-thumb:hover, input[type=range][disabled]::-moz-range-thumb:active*/input[type=range][disabled].sc-se-slider::-moz-range-thumb:hover,input[type=range][disabled].sc-se-slider::-moz-range-thumb:active{background-color:#FFFFFF;width:16px;height:16px;position:static}/*!@input[type=range][disabled]::-ms-thumb*/input[type=range][disabled].sc-se-slider::-ms-thumb{box-sizing:border-box;border:none;width:16px;height:16px;border-radius:50%;background:#fff;box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.7);-webkit-border-radius:50%;-moz-border-radius:50%;-ms-border-radius:50%;-o-border-radius:50%}/*!@input[type=range][disabled]::-ms-thumb:hover*/input[type=range][disabled].sc-se-slider::-ms-thumb:hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB);border:4px solid transparent}/*!@input[type=range][disabled]::-ms-thumb:active*/input[type=range][disabled].sc-se-slider::-ms-thumb:active{background-color:#626469;background-color:var(--se-selected, #626469)}/*!@input[type=range][disabled]::-ms-thumb:hover, input[type=range][disabled]::-ms-thumb:active*/input[type=range][disabled].sc-se-slider::-ms-thumb:hover,input[type=range][disabled].sc-se-slider::-ms-thumb:active{width:24px;height:24px;position:relative;bottom:80%}/*!@input[type=range][disabled]::-ms-thumb:hover, input[type=range][disabled]::-ms-thumb:active*/input[type=range][disabled].sc-se-slider::-ms-thumb:hover,input[type=range][disabled].sc-se-slider::-ms-thumb:active{background-color:#FFFFFF;width:16px;height:16px;position:static}@supports (-ms-ime-align: auto){/*!@input[type=range]*/input[type=range].sc-se-slider{height:20px}/*!@input[type=range]::-ms-thumb:hover*/input[type=range].sc-se-slider::-ms-thumb:hover{width:16px;height:16px;position:static}/*!@input[type=range]::-ms-thumb:active*/input[type=range].sc-se-slider::-ms-thumb:active{width:16px;height:16px;position:static}}@media all and (-ms-high-contrast: none), (-ms-high-contrast: active){/*!@input[type=range]*/input[type=range].sc-se-slider{height:20px}/*!@input[type=range]::-ms-thumb:hover*/input[type=range].sc-se-slider::-ms-thumb:hover{width:16px;height:16px;position:static}/*!@input[type=range]::-ms-thumb:active*/input[type=range].sc-se-slider::-ms-thumb:active{width:16px;height:16px;position:static}}";

class SliderComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates the initial value of your slider component when it loads.
         * The default value is `0`.
         */
        this.value = 0;
        /**
        * Indicates the minimum value of your slider.
        * The default value is `0`.
        */
        this.min = 0;
        /**
        * Indicates the maximum value of your slider.
        * The default value is `100`.
        */
        this.max = 100;
        /**
        * Indicates if your slider is disabled.
        * The default setting is `false`.
        */
        this.disabled = false;
        this.didChange = createEvent(this, "didChange", 7);
    }
    /**
     * Sets the disabled property for slider component.
     * @param val: boolean, `true` or `false`.
     */
    async setDisabled(val) {
        this.disabled = val;
    }
    setInputId() {
        const id = this.el.getAttribute('id');
        if (id) {
            const input = this.el.shadowRoot.querySelector('input');
            input.setAttribute('id', 'wc-' + id);
        }
    }
    setSliderPosition() {
        const rangeInterval = (Number(this.max) - Number(this.min));
        const rangePercent = (Number(this.sliderElement.value) - Number(this.min)) / rangeInterval * 100;
        this.sliderElement.style.setProperty('--sx', rangePercent + '%');
    }
    handleEvent() {
        this.sliderElement.addEventListener('input', () => {
            this.setSliderPosition();
        });
        this.didChange.emit(this.sliderElement);
    }
    componentDidLoad() {
        this.setInputId();
        if (this.value < this.min) {
            this.value = this.min;
        }
        else if (this.value > this.max) {
            this.value = this.max;
        }
        this.sliderElement.value = this.value;
        this.setSliderPosition();
        this.handleEvent();
    }
    render() {
        return (h("label", { class: "slider-container" }, this.label, h("input", { type: "range", min: this.min || "0", max: this.max, value: this.value || "0", disabled: this.disabled, ref: el => this.sliderElement = el, onChange: () => this.handleEvent() })));
    }
    get el() { return getElement(this); }
    static get style() { return sliderCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-slider",
        "$members$": {
            "value": [8],
            "min": [2],
            "max": [2],
            "label": [1],
            "disabled": [4],
            "setDisabled": [64]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

var information_circle = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M896 512c0 70-18 134-52 192s-82 106-140 140-122 52-192 52-134-18-192-52-106-82-140-140-52-122-52-192 18-134 52-192 82-106 140-140 122-52 192-52 134 18 192 52 106 82 140 140 52 122 52 192zM652 322c0-18-6-34-20-48s-30-20-48-20-34 6-48 20-20 30-20 48 6 34 20 48 30 20 48 20 34-6 48-20 20-30 20-48zm-70 362v-6c0-4-2-8-4-10-4-2-8-4-12-4-10 10-24 22-42 34s-30 18-36 18c-2 0-4-2-4-4s0-6 2-8l86-206c6-20 10-32 10-36 0-10-4-18-12-26-8-6-16-10-26-10-22 0-50 10-84 28s-62 42-84 68v2c0 4 2 8 4 10 2 4 6 6 10 8 8-8 20-18 38-30s30-18 36-18c4 0 4 4 2 12l-86 208c-6 14-10 26-10 36 0 6 4 12 12 20s16 12 26 12c30 0 62-10 96-32 34-20 60-42 78-66z"/></svg>`;

const snackbarCss = "/*!@:host*/.sc-se-snackbar-h{position:fixed;bottom:20px;display:none;-ms-flex-item-align:center;align-self:center;z-index:600;opacity:0;-webkit-transition:0.2s;transition:0.2s;-webkit-animation:slideDown 0.2s linear;animation:slideDown 0.2s linear}@-webkit-keyframes slideDown{0%{bottom:20px}100%{bottom:0px}}@keyframes slideDown{0%{bottom:20px}100%{bottom:0px}}/*!@:host(.show-snackbar)*/.show-snackbar.sc-se-snackbar-h{display:block;opacity:1;-webkit-animation:slideUp 0.2s linear;animation:slideUp 0.2s linear}@-webkit-keyframes slideUp{0%{bottom:0px}100%{bottom:20px}}@keyframes slideUp{0%{bottom:0px}100%{bottom:20px}}@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){/*!@:host(.show-snackbar)*/.show-snackbar.sc-se-snackbar-h{left:0}}/*!@.information*/.information.sc-se-snackbar{background-color:#434343;background-color:var(--se-focus, #434343)}/*!@.success*/.success.sc-se-snackbar{background-color:#3DCD58;background-color:var(--se-success, #3DCD58);color:#FFFFFF;color:var(--se-success-contrast, #FFFFFF)}/*!@.warning*/.warning.sc-se-snackbar{background-color:#E47F00;background-color:var(--se-warning, #E47F00);color:#0F0F0F;color:var(--se-warning-contrast, #0F0F0F)}/*!@.error*/.error.sc-se-snackbar{background-color:#DC0A0A;background-color:var(--se-error, #DC0A0A);color:#FFFFFF;color:var(--se-error-contrast, #FFFFFF)}/*!@.snackbar*/.snackbar.sc-se-snackbar{height:48px;line-height:48px;display:-ms-flexbox;display:flex;color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}/*!@.snackbar-icon*/.snackbar-icon.sc-se-snackbar{padding-left:10px;margin-right:-6px;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center}/*!@.snackbar-icon se-icon*/.snackbar-icon.sc-se-snackbar se-icon.sc-se-snackbar{top:1px}/*!@.message*/.message.sc-se-snackbar{font-size:16px;padding-right:16px;margin-left:16px}/*!@.action*/.action.sc-se-snackbar{cursor:pointer;font-size:14px;border:1px solid #FFFFFF;padding:8px 16px;margin:8px 12px 8px 0;line-height:16px;-webkit-transition:0.2s;transition:0.2s}/*!@.action:hover*/.action.sc-se-snackbar:hover{background:rgba(255, 255, 255, 0.2)}/*!@.close*/.close.sc-se-snackbar{cursor:pointer;padding-right:10px;margin-left:-2px}/*!@.close se-icon*/.close.sc-se-snackbar se-icon.sc-se-snackbar{vertical-align:middle;top:0}";

const SHOW_SNACKBAR = 'show-snackbar';
class SnackbarComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates the background color of your snackbar.
         * `success`: green
         * `warning`: orange
         * `error`: red
         * `information`: dark grey, default setting
         */
        this.type = 'information';
        /**
         * The name of the icon you wish to display.  The default icon is an information circle.
         */
        this.icon = 'information_circle';
        /**
         * Displays a "button" to close the snackbar.
         * The default setting is `false`.
         * This will be visible if set to `true`.
         */
        this.canClose = false;
        /**
         * Indicates if the snackbar is open.  Set to `false` (closed) by default.
         */
        this.open = false;
        /**
         * Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false.
         * The default setting is 5000.
         */
        this.duration = 5000;
        this.didClose = createEvent(this, "didClose", 7);
        this.actionClicked = createEvent(this, "actionClicked", 7);
    }
    openDidChange() {
        if (this.open) {
            this.el.classList.add(SHOW_SNACKBAR);
            setTimeout(() => {
                if (!this.canClose) {
                    this.closeSnackbar();
                }
            }, this.duration);
        }
    }
    closeSnackbar() {
        this.open = false;
        this.el.classList.remove(SHOW_SNACKBAR);
        this.didClose.emit();
    }
    submitData() {
        this.actionClicked.emit();
    }
    componentDidLoad() {
        this.openDidChange();
    }
    render() {
        let renderIcon = this.icon === 'information_circle' ? information_circle : this.icon;
        if (this.icon === "none") {
            renderIcon = false;
        }
        return (h("div", { class: this.type }, h("div", { class: "snackbar", role: "alert" }, h("span", { class: "snackbar-icon" }, renderIcon && h("se-icon", null, h("span", { innerHTML: renderIcon })), h("slot", { name: "icon" })), h("span", { class: "message" }, this.message, h("slot", null)), this.actionText ? h("span", { class: "action", onClick: () => this.submitData() }, this.actionText) : '', this.canClose ? h("span", { class: "close" }, h("se-icon", { onClick: () => this.closeSnackbar() }, h("span", { innerHTML: action_delete_cross }))) : '')));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "open": ["openDidChange"]
    }; }
    static get style() { return snackbarCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-snackbar",
        "$members$": {
            "type": [1],
            "icon": [1],
            "message": [1],
            "canClose": [4, "can-close"],
            "actionText": [1, "action-text"],
            "open": [1028],
            "duration": [2]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const stepperCss = "/*!@nav*/nav.sc-se-stepper{color:#3DCD58;color:var(--se-primary, #3DCD58)}/*!@ol*/ol.sc-se-stepper{display:-ms-flexbox;display:flex;padding:16px;margin-bottom:0;height:24px}/*!@.stepper-item-wrapper*/.stepper-item-wrapper.sc-se-stepper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}/*!@.indicator*/.indicator.sc-se-stepper{text-align:center;font-size:14px;line-height:24px;font-weight:700;width:24px;height:24px;border-radius:100%;color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}/*!@.indicator.se-icon*/.indicator.se-icon.sc-se-stepper{font-family:\"se-icon\";font-size:24px;font-weight:400}/*!@.indicator.se-icon:after*/.indicator.se-icon.sc-se-stepper:after{content:\"notification_ok\";font-size:32px;position:relative;right:28px}@supports (-ms-ime-align: auto){/*!@.indicator.se-icon:after*/.indicator.se-icon.sc-se-stepper:after{top:1px}}@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){/*!@.indicator.se-icon:after*/.indicator.se-icon.sc-se-stepper:after{top:1px}}/*!@.stepper-item*/.stepper-item.sc-se-stepper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;white-space:nowrap}/*!@.stepper-item:hover*/.stepper-item.sc-se-stepper:hover{cursor:pointer}/*!@.stepper-item.disabled*/.stepper-item.disabled.sc-se-stepper{pointer-events:none}/*!@.stepper-item-label*/.stepper-item-label.sc-se-stepper{display:inline;color:#CBCBCB;color:var(--se-hover-standard, #CBCBCB);font-size:16px;font-weight:700;line-height:19px;margin:0 8px}/*!@.stepper-item-label:hover*/.stepper-item-label.sc-se-stepper:hover{font-weight:400}/*!@se-divider*/se-divider.sc-se-stepper{width:25px;margin-right:8px}/*!@.primary .selected .indicator*/.primary.sc-se-stepper .selected.sc-se-stepper .indicator.sc-se-stepper{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}/*!@.primary .selected .stepper-item-label*/.primary.sc-se-stepper .selected.sc-se-stepper .stepper-item-label.sc-se-stepper{color:#434343;color:var(--se-focus, #434343)}/*!@.alternative .selected .indicator*/.alternative.sc-se-stepper .selected.sc-se-stepper .indicator.sc-se-stepper{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#3DCD58;color:var(--se-primary, #3DCD58)}/*!@.alternative .selected .stepper-item-label*/.alternative.sc-se-stepper .selected.sc-se-stepper .stepper-item-label.sc-se-stepper{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}";

class StepperComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.stepperItems = [];
        /**
         * Sets the background color of your stepper.
         * The default setting is `primary`, implementing a green background for the stepper visual items.
         * The `alternative` setting implements a white background for the stepper visual items.  This setting is best used against a gray background.
         */
        this.color = 'primary';
        /**
         * Defines if the stepper items must be completed sequentially.
         * The default setting is `true`, each stepper item must be validated before advancing to the next step.
         * `false` allows each step to be selected in any order.
         */
        this.linear = true;
    }
    /**
     * Call the `reset` method to reset the stepper to the indicated step.  This also invalidates any validated steps.
     * It no step parameter is provided, it will reset to the first stepper item.
     */
    async reset(step = 1) {
        if (step >= this.getItemStep(this.selectedItem)) {
            return; // don't advance the stepper when clicking the reset button
        }
        this.stepperItems.forEach((item) => {
            if (this.getItemStep(item) >= step) {
                item.validated = false;
            }
        });
        this.selectStep(this.stepperItems[step - 1]);
    }
    /**
     * Call the `previous` method to navigate to the previous step from the step that is currently selected.
     */
    async previous() {
        // do not trigger this method when the first stepper item is the active item
        if (this.getItemStep(this.selectedItem) > 1) {
            const index = this.stepperItems.indexOf(this.selectedItem);
            this.selectStep(this.stepperItems[index - 1]);
        }
    }
    /**
     * Call the `next` method to navigate to the next step from the step that is currently selected.
     * This will not work in linear mode if the next step is not validated.
     */
    async next(validate) {
        if (validate) {
            this.selectedItem.validated = true;
        }
        if (!this.linear || this.selectedItem.validated) {
            const index = this.stepperItems.indexOf(this.selectedItem);
            this.selectStep(this.stepperItems[index + 1]);
        }
    }
    selectStep(item) {
        this.selectedItem.active = false;
        this.selectedItem = item;
        this.selectedItem.active = true;
    }
    itemValidated(value) {
        this.validatedChanged = value;
    }
    getItemStep(item) {
        return this.stepperItems.indexOf(item) + 1;
    }
    checkIfPreviousItemValidated(item) {
        if (this.getItemStep(item) > 1 && this.linear) {
            return !this.stepperItems[this.stepperItems.indexOf(item) - 1].validated;
        }
        return false;
    }
    renderList() {
        return this.stepperItems.map((item) => {
            return [
                h("li", { class: ["stepper-item-wrapper", (this.getItemStep(this.selectedItem) === this.getItemStep(item) || item.validated) ? "selected" : ''].join(' ') }, h("div", { class: ["stepper-item", this.checkIfPreviousItemValidated(item) ? "disabled" : ''].join(' '), onClick: () => this.selectStep(item) }, h("span", { class: ["indicator", item.validated && !item.active ? "se-icon" : ''].join(' ') }, this.getItemStep(item)), h("span", { class: "stepper-item-label" }, item.label)), this.getItemStep(item) !== this.stepperItems.length ? h("se-divider", null) : '')
            ];
        });
    }
    componentDidLoad() {
        this.stepperItems = Array.from(this.el.querySelectorAll('se-stepper-item'));
        this.stepperItems.forEach((item) => {
            if (this.linear && !item.validated) {
                item.validated = false;
            }
        });
        this.selectedItem = this.stepperItems[0];
        this.selectedItem.active = true;
    }
    render() {
        return [
            h("nav", { class: this.color }, h("ol", null, this.renderList())),
            h("slot", null)
        ];
    }
    get el() { return getElement(this); }
    static get style() { return stepperCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-stepper",
        "$members$": {
            "color": [1],
            "linear": [4],
            "stepperItems": [32],
            "selectedItem": [32],
            "validatedChanged": [32],
            "reset": [64],
            "previous": [64],
            "next": [64]
        },
        "$listeners$": [[0, "didValidate", "itemValidated"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const stepperItemCss = "/*!@:host(.navitem-hidden)*/.navitem-hidden.sc-se-stepper-item-h{display:none !important}";

class StepperItemComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.didValidate = createEvent(this, "didValidate", 7);
    }
    validatedDidChange() {
        this.didValidate.emit(this.validated);
    }
    render() {
        return (h(Host, { class: [this.active ? 'active' : 'navitem-hidden'].join(' ') }, h("slot", null)));
    }
    static get watchers() { return {
        "validated": ["validatedDidChange"]
    }; }
    static get style() { return stepperItemCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-stepper-item",
        "$members$": {
            "label": [1],
            "active": [4],
            "validated": [4]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tabbarCss = ":host{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0;width:100%;display:-ms-flexbox;display:flex;-moz-flex-direction:\"row\";-ms-flex-direction:\"row\";flex-direction:\"row\";-moz-align-items:center;-ms-flex-align:center;align-items:center}se-tabbar .edge{background-color:rgba(0, 0, 0, 0.25);white-space:nowrap}se-tabbar .d-flex-main{background-color:inherit;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;width:100%}se-tabbar .fill-space{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;min-height:4px}se-tabbar .centered{display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center}se-tabbar .nav-center-wrapper{overflow-y:hidden;scrollbar-width:none;overflow-x:auto;-ms-overflow-style:none}se-tabbar .nav-center-wrapper::-webkit-scrollbar{height:0 !important}se-tabbar .tab-primary,se-tabbar .tab-alternative{font-size:16px;width:100%}se-tabbar .tab-primary.opt-nav nav>a,se-tabbar .tab-primary.opt-nav nav>span,se-tabbar .tab-alternative.opt-nav nav>a,se-tabbar .tab-alternative.opt-nav nav>span{margin:0 calc(16px * 1.5)}se-tabbar .tab-primary.opt-nav .sub-nav>a,se-tabbar .tab-primary.opt-nav .sub-nav>span,se-tabbar .tab-alternative.opt-nav .sub-nav>a,se-tabbar .tab-alternative.opt-nav .sub-nav>span{margin:0 16px}se-tabbar .tab-primary.opt-nav nav>a[disabled],se-tabbar .tab-primary.opt-nav .sub-nav>a[disabled],se-tabbar .tab-alternative.opt-nav nav>a[disabled],se-tabbar .tab-alternative.opt-nav .sub-nav>a[disabled]{opacity:0.5}se-tabbar .tab-primary.opt-content nav,se-tabbar .tab-alternative.opt-content nav{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);-webkit-box-sizing:border-box;box-sizing:border-box;height:46px;min-width:100%;max-width:100%}se-tabbar .tab-primary.opt-content nav>a,se-tabbar .tab-primary.opt-content nav>span,se-tabbar .tab-alternative.opt-content nav>a,se-tabbar .tab-alternative.opt-content nav>span{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border:1px solid;border-color:#EDEDED;border-color:var(--se-standard, #EDEDED);border-bottom:0;border-left:0;line-height:46px;color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);padding:0 32px}se-tabbar .tab-primary.opt-content nav>a:first-child,se-tabbar .tab-primary.opt-content nav>span:first-child,se-tabbar .tab-alternative.opt-content nav>a:first-child,se-tabbar .tab-alternative.opt-content nav>span:first-child{border-left:1px solid;border-color:#EDEDED;border-color:var(--se-standard, #EDEDED)}se-tabbar .tab-primary.opt-content nav>a:not([disabled]):hover,se-tabbar .tab-primary.opt-content nav>span:not([disabled]):hover,se-tabbar .tab-alternative.opt-content nav>a:not([disabled]):hover,se-tabbar .tab-alternative.opt-content nav>span:not([disabled]):hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}se-tabbar .tab-primary.opt-content nav>a:after,se-tabbar .tab-primary.opt-content nav>span:after,se-tabbar .tab-alternative.opt-content nav>a:after,se-tabbar .tab-alternative.opt-content nav>span:after{display:none;bottom:auto;top:0;height:0}se-tabbar .tab-primary.opt-content nav>a.active,se-tabbar .tab-primary.opt-content nav>span.active,se-tabbar .tab-alternative.opt-content nav>a.active,se-tabbar .tab-alternative.opt-content nav>span.active{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7);height:47px;color:#3DCD58;color:var(--se-primary, #3DCD58)}se-tabbar .tab-primary.opt-content nav>a.active:after,se-tabbar .tab-primary.opt-content nav>span.active:after,se-tabbar .tab-alternative.opt-content nav>a.active:after,se-tabbar .tab-alternative.opt-content nav>span.active:after{display:inline-block;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);height:2px}se-tabbar .tab-primary.opt-content nav>a.active:hover,se-tabbar .tab-primary.opt-content nav>span.active:hover,se-tabbar .tab-alternative.opt-content nav>a.active:hover,se-tabbar .tab-alternative.opt-content nav>span.active:hover{color:initial}se-tabbar .tab-primary.opt-content nav>a.active:hover:after,se-tabbar .tab-primary.opt-content nav>span.active:hover:after,se-tabbar .tab-alternative.opt-content nav>a.active:hover:after,se-tabbar .tab-alternative.opt-content nav>span.active:hover:after{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}se-tabbar .tab-primary.opt-content nav>a[disabled],se-tabbar .tab-primary.opt-content nav>span[disabled],se-tabbar .tab-alternative.opt-content nav>a[disabled],se-tabbar .tab-alternative.opt-content nav>span[disabled]{color:#CBCBCB;color:var(--se-hover-standard, #CBCBCB)}se-tabbar nav{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;min-width:100%}se-tabbar .sub-nav{margin-left:calc(16px * -1.5);background-color:rgba(0, 0, 0, 0.25)}se-tabbar nav,se-tabbar .sub-nav{height:100%;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center}se-tabbar nav>a[disabled],se-tabbar .sub-nav>a[disabled]{cursor:default}se-tabbar nav>a,se-tabbar nav>span,se-tabbar .sub-nav>a,se-tabbar .sub-nav>span{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;font-weight:500;position:relative;cursor:pointer;padding-right:0;padding-left:0;text-decoration:none;-webkit-transition:0.2s;transition:0.2s;height:100%;line-height:1.2;min-height:40px}se-tabbar nav>a:focus,se-tabbar nav>span:focus,se-tabbar .sub-nav>a:focus,se-tabbar .sub-nav>span:focus{background-color:transparent}se-tabbar nav>a:hover,se-tabbar nav>span:hover,se-tabbar .sub-nav>a:hover,se-tabbar .sub-nav>span:hover{text-decoration:none;background-color:transparent}se-tabbar nav>a:after,se-tabbar nav>span:after,se-tabbar .sub-nav>a:after,se-tabbar .sub-nav>span:after{content:\"\";cursor:default;position:absolute;left:0;bottom:-4px;height:4px;-webkit-transition:0.2s;transition:0.2s;width:100%}se-tabbar nav>a.active:after,se-tabbar nav>span.active:after,se-tabbar .sub-nav>a.active:after,se-tabbar .sub-nav>span.active:after{height:4px}se-tabbar nav>a.label,se-tabbar nav>span.label,se-tabbar .sub-nav>a.label,se-tabbar .sub-nav>span.label{opacity:0.8;padding:0.1em 0.4em 0.2em;margin-bottom:2px}se-tabbar .tab-primary nav>a,se-tabbar .tab-primary nav>span,se-tabbar .tab-primary .sub-nav>a,se-tabbar .tab-primary .sub-nav>span{color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}se-tabbar .tab-primary nav>a:not([disabled]):hover:after,se-tabbar .tab-primary nav>span:not([disabled]):hover:after,se-tabbar .tab-primary .sub-nav>a:not([disabled]):hover:after,se-tabbar .tab-primary .sub-nav>span:not([disabled]):hover:after{background-color:#FFFFFF;background-color:var(--se-primary-contrast, #FFFFFF)}se-tabbar .tab-primary nav>a.active:after,se-tabbar .tab-primary nav>span.active:after,se-tabbar .tab-primary .sub-nav>a.active:after,se-tabbar .tab-primary .sub-nav>span.active:after{background-color:#FFFFFF;background-color:var(--se-primary-contrast, #FFFFFF)}se-tabbar .tab-alternative{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}se-tabbar .tab-alternative .nav-left-wrapper [slot=start]>*:first-child:not(a){padding-left:16px}se-tabbar .tab-alternative .nav-left-wrapper [slot=start]>*:last-child:not(a){padding-right:16px}se-tabbar .tab-alternative nav>a,se-tabbar .tab-alternative nav>span,se-tabbar .tab-alternative .sub-nav>a,se-tabbar .tab-alternative .sub-nav>span{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}se-tabbar .tab-alternative nav>a.active:after,se-tabbar .tab-alternative nav>span.active:after,se-tabbar .tab-alternative .sub-nav>a.active:after,se-tabbar .tab-alternative .sub-nav>span.active:after{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}se-tabbar .opt-nav,se-tabbar .opt-content{font-size:16px;width:100%}se-tabbar .opt-nav nav>a,se-tabbar .opt-nav nav>span,se-tabbar .opt-nav .sub-nav>a,se-tabbar .opt-nav .sub-nav>span{margin:0 calc(16px * 1.5)}se-tabbar .opt-nav nav>a[disabled],se-tabbar .opt-nav .sub-nav>a[disabled]{opacity:0.5}se-tabbar .opt-nav.tab-primary{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}se-tabbar .opt-nav.tab-primary nav:not([slot=start]){border-bottom:4px solid rgba(0, 0, 0, 0.25)}se-tabbar .opt-nav.tab-primary .nav-left-wrapper{background-color:rgba(0, 0, 0, 0.25);white-space:nowrap}se-tabbar .opt-nav.tab-primary .nav-left-wrapper [slot=start]>*:first-child:not(a){padding-left:16px}se-tabbar .opt-nav.tab-primary .nav-left-wrapper [slot=start]>*:last-child:not(a){padding-right:16px}se-tabbar .opt-nav.tab-primary nav,se-tabbar .opt-nav.tab-primary .sub-nav{height:44px;text-transform:uppercase}se-tabbar .opt-nav.tab-primary .sub-nav{text-transform:capitalize}se-tabbar .opt-nav.tab-alternative nav,se-tabbar .opt-nav.tab-alternative .sub-nav{height:40px}se-tabbar .opt-nav.tab-alternative nav>a,se-tabbar .opt-nav.tab-alternative .sub-nav>a{line-height:40px}se-tabbar .opt-nav.tab-alternative nav>a[disabled],se-tabbar .opt-nav.tab-alternative .sub-nav>a[disabled]{opacity:0.4}se-tabbar .opt-nav.tab-alternative nav>a:not([disabled]):hover,se-tabbar .opt-nav.tab-alternative nav>a.active,se-tabbar .opt-nav.tab-alternative .sub-nav>a:not([disabled]):hover,se-tabbar .opt-nav.tab-alternative .sub-nav>a.active{color:#3DCD58;color:var(--se-primary, #3DCD58)}se-tabbar .opt-nav.tab-alternative nav>a:after,se-tabbar .opt-nav.tab-alternative .sub-nav>a:after{bottom:0;display:inline-block}se-tabbar .opt-nav.tab-alternative nav>a:hover:not([disabled]):after,se-tabbar .opt-nav.tab-alternative .sub-nav>a:hover:not([disabled]):after{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);height:4px}se-tabbar .opt-content nav{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);-webkit-box-sizing:border-box;box-sizing:border-box;height:46px;min-width:100%;max-width:100%}se-tabbar .opt-content nav>a,se-tabbar .opt-content nav>span{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border:1px solid;border-color:#EDEDED;border-color:var(--se-standard, #EDEDED);border-bottom:0;border-left:0;color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);padding:0 32px}se-tabbar .opt-content nav>a:first-child,se-tabbar .opt-content nav>span:first-child{border-left:1px solid;border-color:#EDEDED;border-color:var(--se-standard, #EDEDED)}se-tabbar .opt-content nav>a:not([disabled]):hover,se-tabbar .opt-content nav>span:not([disabled]):hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}se-tabbar .opt-content nav>a:after,se-tabbar .opt-content nav>span:after{display:none;bottom:auto;top:0;height:0}se-tabbar .opt-content nav>a.active,se-tabbar .opt-content nav>span.active{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7);height:47px;color:#3DCD58;color:var(--se-primary, #3DCD58)}se-tabbar .opt-content nav>a.active:after,se-tabbar .opt-content nav>span.active:after{display:inline-block;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);height:2px}se-tabbar .opt-content nav>a.active:hover,se-tabbar .opt-content nav>span.active:hover{color:initial}se-tabbar .opt-content nav>a.active:hover:after,se-tabbar .opt-content nav>span.active:hover:after{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}se-tabbar .opt-content nav>a[disabled],se-tabbar .opt-content nav>span[disabled]{color:#CBCBCB;color:var(--se-hover-standard, #CBCBCB)}se-tabbar .opt-content.tab-alternative nav{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}se-tabbar .opt-content.tab-alternative nav>a,se-tabbar .opt-content.tab-alternative nav>span{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}se-tabbar .opt-content.tab-alternative nav>a.active,se-tabbar .opt-content.tab-alternative nav>span.active{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}se-tabbar .opt-content.tab-alternative nav>a:not([disabled]):hover,se-tabbar .opt-content.tab-alternative nav>span:not([disabled]):hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}se-tabbar .tab-end-primary.opt-end-nav nav{height:calc(100% - 4px)}se-tabbar .opt-end-content{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}se-tabbar .opt-end-content.tab-end-alternative{background-color:#F7F7F7;background-color:var(--se-background, #F7F7F7)}se-tabbar .opt-nav.scroll nav,se-tabbar .opt-content.scroll nav{white-space:nowrap}se-tabbar .opt-nav.stack nav,se-tabbar .opt-content.stack nav{-ms-flex-wrap:wrap;flex-wrap:wrap;height:auto}se-tabbar .opt-nav.compact nav a,se-tabbar .opt-content.compact nav a{white-space:wrap}";

class TabbarComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the function of the tabbar.
         * Default `nav` creates a tab bar that functions as a nav-bar.
         * `content` creates a ta bbar that functions as a content section tab bar.
         */
        this.option = "nav";
        /**
         * Indicates the overflow behavior of your tab bar.
         * Default setting is `scroll`, keeping all tabs in one horizontal row.
         * The `stack` setting allows your tabbar content wrap to new lines.
         * The `compact` setting allows your tabbar content to scroll, but all stack the text together as much as possible.
         */
        this.overflow = "scroll";
        /**
         * Indicates the color of your tab bar.
         * Default setting is `primary`, rendering a green background for nav-bars and ultra-light-grey-1 for content.
         * The `alternative` setting renders a white background.
         */
        this.color = 'primary';
    }
    render() {
        return (h("div", { class: [`tab-${this.color}`, "d-flex-main", `opt-${this.option}`].join(' ') }, h("div", { class: "nav-left-wrapper centered" }, h("slot", { name: "start" })), h("div", { class: ["fill-space", "nav-center-wrapper", `opt-${this.option}`, !!this.overflow ? this.overflow : ''].join(' ') }, h("slot", null)), h("div", { class: [`tab-end-${this.color}`, `opt-end-${this.option}`, "centered"].join(' ') }, h("slot", { name: "end" })), h("div", { class: [`tab-end-${this.color}`, `opt-end-${this.option}`, "centered", "edge"].join(' ') }, h("slot", { name: "edge" }))));
    }
    static get style() { return tabbarCss; }
    static get cmpMeta() { return {
        "$flags$": 4,
        "$tagName$": "se-tabbar",
        "$members$": {
            "option": [1],
            "overflow": [1],
            "color": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tableCss = "/*!@:host*/.sc-se-table-h{position:absolute;top:0;bottom:0;left:0;right:0;overflow:auto;width:100%}/*!@.table-rows-wrapper*/.table-rows-wrapper.sc-se-table{width:100%;position:relative}/*!@::slotted(se-table-group.selectable:hover)*/.sc-se-table-s>se-table-group.selectable:hover{background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB);color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F)}/*!@::slotted(se-table-group.selected)*/.sc-se-table-s>se-table-group.selected{background-color:#626469;background-color:var(--se-selected, #626469);color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF)}";

class TableComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return h(Host, { role: "table" }, h("div", { class: "table-rows-wrapper" }, h("slot", { name: "start" }), h("slot", null)));
    }
    static get style() { return tableCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-table",
        "$members$": undefined,
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tableGroupCss = "/*!@:host*/.sc-se-table-group-h{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);display:-ms-inline-flexbox;display:inline-flex;-ms-flex-direction:column;flex-direction:column;min-width:100%;margin:0;padding:0;-webkit-transition:0.2s;transition:0.2s;border-bottom:1px solid #E6E6E6}/*!@.table-group-row*/.table-group-row.sc-se-table-group{display:-ms-flexbox;display:flex;-ms-flex-flow:row;flex-flow:row}/*!@::slotted(*[slot=detail])*/.sc-se-table-group-s>*[slot=detail]{background-color:#EDEDED;background-color:var(--se-standard, #EDEDED);color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);width:100%}";

class TableGroupComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates whether or not the `se-table-group` is selectable.  Set to `false` by default.
         */
        this.selectable = false;
        /**
         * Indicates whether or not the `se-table-group` is selected.  Set to `false` by default.
         */
        this.selected = false;
    }
    setButtonId() {
        this.innerId = this.el.getAttribute('id') || '';
    }
    componentWillLoad() {
        this.setButtonId();
    }
    render() {
        return (h(Host, { role: "row", class: { selectable: this.selectable, selected: this.selected } }, h("div", { class: "table-group-row", id: `wc-${this.innerId}` }, h("slot", null)), h("slot", { name: "detail" })));
    }
    get el() { return getElement(this); }
    static get style() { return tableGroupCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-table-group",
        "$members$": {
            "selectable": [4],
            "selected": [4],
            "innerId": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tableGroupHeaderCss = "/*!@:host*/.sc-se-table-group-header-h{margin:0;padding:0;display:-ms-flexbox;display:flex;position:-webkit-sticky;position:sticky;top:0;left:0;display:-ms-inline-flexbox;display:inline-flex;min-width:100%;z-index:2;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}";

class TableGroupHeaderComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return (h(Host, { role: "row", slot: "start" }, h("slot", null)));
    }
    get el() { return getElement(this); }
    static get style() { return tableGroupHeaderCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-table-group-header",
        "$members$": undefined,
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tableItemCss = "/*!@:host*/.sc-se-table-item-h{margin:0;-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:1;flex-shrink:1;-ms-flex-preferred-size:0px;flex-basis:0px;width:0;min-width:58px;max-width:100%;font-weight:lighter}/*!@.table-item-content*/.table-item-content.sc-se-table-item{overflow:hidden;background:none;-webkit-box-sizing:border-box;box-sizing:border-box;border:none;min-height:47px;height:20px;margin:0;padding:0 16px;font-weight:300;font-size:16px;position:relative;outline:none;width:100%;max-width:100%;color:inherit;font:inherit;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;text-align:left;text-align:start;text-decoration:none}/*!@.table-item-label*/.table-item-label.sc-se-table-item{width:100%;line-height:24px}/*!@div*/div.sc-se-table-item{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}/*!@:host(.opt-dropdown) .table-item-content*/.opt-dropdown.sc-se-table-item-h .table-item-content.sc-se-table-item{overflow:unset}/*!@:host(.opt-dropdown) .table-item-content .table-item-label*/.opt-dropdown.sc-se-table-item-h .table-item-content.sc-se-table-item .table-item-label.sc-se-table-item{overflow:unset}";

class TableItemComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.option = 'text';
        /**
         * Optional property defines the tag type within the `se-table-item`.
         * Default value `false` defines the tag type as `div`.
         * `true` defines the tag type as a `button`.
         */
        this.clickable = false;
    }
    render() {
        const displayStyle = {
            flex: this.flex || '',
            maxWidth: this.width || '',
            width: this.width || '',
            minWidth: this.minWidth || ''
        };
        return (h(Host, { role: "cell", class: ["se-table-item", `opt-${this.option}`].join(' '), style: displayStyle }, h("div", { class: "table-item-content" }, h("div", { class: "table-item-label" }, h("slot", null)))));
    }
    get el() { return getElement(this); }
    static get style() { return tableItemCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-table-item",
        "$members$": {
            "option": [1],
            "flex": [1],
            "width": [1],
            "minWidth": [1, "min-width"],
            "clickable": [4]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tableItemHeaderCss = "/*!@:host*/.sc-se-table-item-header-h{margin:0;-ms-flex-positive:1;flex-grow:1;-ms-flex-negative:1;flex-shrink:1;-ms-flex-preferred-size:0px;flex-basis:0px;width:0;min-width:58px;max-width:100%;font-weight:lighter}/*!@.table-item-content*/.table-item-content.sc-se-table-item-header{overflow:hidden;background:none;-webkit-box-sizing:border-box;box-sizing:border-box;border:none;min-height:47px;height:20px;margin:0;padding:0 16px;font-weight:300;font-size:16px;position:relative;outline:none;width:100%;max-width:100%;color:inherit;font:inherit;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;text-align:left;text-align:start;text-decoration:none}/*!@.table-item-label*/.table-item-label.sc-se-table-item-header{width:100%;line-height:24px}/*!@div*/div.sc-se-table-item-header{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}/*!@:host(.opt-dropdown) .table-item-content*/.opt-dropdown.sc-se-table-item-header-h .table-item-content.sc-se-table-item-header{overflow:unset}/*!@:host(.opt-dropdown) .table-item-content .table-item-label*/.opt-dropdown.sc-se-table-item-header-h .table-item-content.sc-se-table-item-header .table-item-label.sc-se-table-item-header{overflow:unset}/*!@:host*/.sc-se-table-item-header-h{font-weight:500;border:1px solid #E6E6E6;border-right:none}/*!@:host(:first-child)*/.sc-se-table-item-header-h:first-child{border-left:none}/*!@:host(:not(:first-child))*/.sc-se-table-item-header-h:not(:first-child){margin-left:-1px}/*!@.table-item-content*/.table-item-content.sc-se-table-item-header{-ms-flex-pack:justify;justify-content:space-between}/*!@button:hover*/button.sc-se-table-item-header:hover{cursor:pointer}/*!@se-icon*/se-icon.sc-se-table-item-header{-webkit-transition:0.3s;transition:0.3s}/*!@se-icon.sort-desc*/se-icon.sort-desc.sc-se-table-item-header{-webkit-transform:rotate(180deg);transform:rotate(180deg)}/*!@se-icon.sortable*/se-icon.sortable.sc-se-table-item-header{margin-left:calc(8px * 1.375)}";

class TableItemHeaderComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    componentWillLoad() {
        this.setButtonId();
    }
    render() {
        let ariaLabelSort;
        let disabled = false;
        const isSortable = !!this.sort;
        const displayStyle = {
            flex: this.flex || '',
            maxWidth: this.width || '',
            width: this.width || '',
            minWidth: this.minWidth || ''
        };
        if (isSortable) {
            this.clickable = true;
            if (this.sort === "asc") {
                ariaLabelSort = "sort asc";
            }
            else if (this.sort === "desc") {
                ariaLabelSort = "sort desc";
            }
            else {
                disabled = true;
            }
        }
        else {
            ariaLabelSort = null;
        }
        const TagType = this.clickable || isSortable ? 'button' : 'div';
        return (h(Host, { role: "cell", class: ["se-table-item", isSortable ? `sort-${this.sort}` : ''].join(' '), id: this.innerId, style: displayStyle }, h(TagType, { class: "table-item-content", "aria-label": ariaLabelSort }, h("div", { class: "table-item-label" }, h("slot", null)), isSortable ?
            h("se-icon", { class: ["sortable", isSortable ? `sort-${this.sort}` : ''].join(' '), "aria-hidden": "true", size: "nano", style: { opacity: disabled ? '.3' : '1' } }, h("span", { innerHTML: arrow4Top })) : '')));
    }
    get el() { return getElement(this); }
    static get style() { return tableItemHeaderCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-table-item-header",
        "$members$": {
            "flex": [1],
            "width": [1],
            "minWidth": [1, "min-width"],
            "clickable": [4],
            "sort": [1],
            "innerId": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tooltipCss = "/*!@:host*/.sc-se-tooltip-h{position:relative;display:inline-block}/*!@:host .tooltip*/.sc-se-tooltip-h .tooltip.sc-se-tooltip{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6);max-width:260px;width:-moz-max-content;width:-webkit-max-content;width:max-content;visibility:hidden;position:absolute;padding:8px 8px;font-size:12px;display:inline-table;line-height:14px;z-index:-1;border-radius:2px px;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);opacity:0;-webkit-transition:0.2s;transition:0.2s}/*!@:host .tooltip::after*/.sc-se-tooltip-h .tooltip.sc-se-tooltip::after{content:\"\";position:absolute;border:5px solid}/*!@:host .tooltip.show*/.sc-se-tooltip-h .tooltip.show.sc-se-tooltip{opacity:1;visibility:visible;z-index:10}/*!@:host .tooltip-top .tooltip*/.sc-se-tooltip-h .tooltip-top.sc-se-tooltip .tooltip.sc-se-tooltip{margin-bottom:8px;bottom:100%;left:50%;transform:translateX(-50%) translateY(0%);-webkit-transform:translateX(-50%) translateY(0%);-moz-transform:translateX(-50%) translateY(0%);-ms-transform:translateX(-50%) translateY(0%);-o-transform:translateX(-50%) translateY(0%)}/*!@:host .tooltip-top .tooltip::after*/.sc-se-tooltip-h .tooltip-top.sc-se-tooltip .tooltip.sc-se-tooltip::after{top:100%;left:50%;margin-left:-5px;border-color:#42B4E6 transparent transparent transparent;border-color:var(--se-secondary, #42B4E6) transparent transparent transparent}/*!@:host .tooltip-bottom .tooltip*/.sc-se-tooltip-h .tooltip-bottom.sc-se-tooltip .tooltip.sc-se-tooltip{margin-top:8px;top:100%;left:50%;transform:translateX(-50%) translateY(0%);-webkit-transform:translateX(-50%) translateY(0%);-moz-transform:translateX(-50%) translateY(0%);-ms-transform:translateX(-50%) translateY(0%);-o-transform:translateX(-50%) translateY(0%)}/*!@:host .tooltip-bottom .tooltip::after*/.sc-se-tooltip-h .tooltip-bottom.sc-se-tooltip .tooltip.sc-se-tooltip::after{bottom:100%;left:50%;margin-left:-5px;border-color:transparent transparent #42B4E6 transparent;border-color:transparent transparent var(--se-secondary, #42B4E6) transparent}/*!@:host .tooltip-left .tooltip*/.sc-se-tooltip-h .tooltip-left.sc-se-tooltip .tooltip.sc-se-tooltip{left:-8px;top:50%;transform:translateX(-100%) translateY(-50%);-webkit-transform:translateX(-100%) translateY(-50%);-moz-transform:translateX(-100%) translateY(-50%);-ms-transform:translateX(-100%) translateY(-50%);-o-transform:translateX(-100%) translateY(-50%)}/*!@:host .tooltip-left .tooltip::after*/.sc-se-tooltip-h .tooltip-left.sc-se-tooltip .tooltip.sc-se-tooltip::after{top:50%;left:100%;margin-top:-5px;border-color:transparent transparent transparent #42B4E6;border-color:transparent transparent transparent var(--se-secondary, #42B4E6)}/*!@:host .tooltip-right .tooltip*/.sc-se-tooltip-h .tooltip-right.sc-se-tooltip .tooltip.sc-se-tooltip{margin-left:8px;left:100%;top:50%;transform:translateX(0%) translateY(-50%);-webkit-transform:translateX(0%) translateY(-50%);-moz-transform:translateX(0%) translateY(-50%);-ms-transform:translateX(0%) translateY(-50%);-o-transform:translateX(0%) translateY(-50%)}/*!@:host .tooltip-right .tooltip::after*/.sc-se-tooltip-h .tooltip-right.sc-se-tooltip .tooltip.sc-se-tooltip::after{top:50%;right:100%;margin-top:-5px;border-color:transparent #42B4E6 transparent transparent;border-color:transparent var(--se-secondary, #42B4E6) transparent transparent}/*!@:host([hidden])*/[hidden].sc-se-tooltip-h{display:none}/*!@.tooltip-fab .tooltip, .tooltip-fab-top .tooltip*/.tooltip-fab.sc-se-tooltip .tooltip.sc-se-tooltip,.tooltip-fab-top.sc-se-tooltip .tooltip.sc-se-tooltip{position:fixed}/*!@.tooltip-fab.tooltip-top .tooltip, .tooltip-fab.tooltip-left .tooltip*/.tooltip-fab.tooltip-top.sc-se-tooltip .tooltip.sc-se-tooltip,.tooltip-fab.tooltip-left.sc-se-tooltip .tooltip.sc-se-tooltip{top:auto;left:auto;-webkit-transform:none;transform:none}/*!@.tooltip-fab.tooltip-left .tooltip*/.tooltip-fab.tooltip-left.sc-se-tooltip .tooltip.sc-se-tooltip{right:104px;bottom:calc((56px / 2) + 16px);-webkit-transform:translateY(50%);transform:translateY(50%)}/*!@.tooltip-fab.tooltip-top .tooltip*/.tooltip-fab.tooltip-top.sc-se-tooltip .tooltip.sc-se-tooltip{right:16px;bottom:72px;min-width:80px}/*!@.tooltip-fab-top.tooltip-top .tooltip, .tooltip-fab-top.tooltip-left .tooltip, .tooltip-fab-top.tooltip-bottom .tooltip*/.tooltip-fab-top.tooltip-top.sc-se-tooltip .tooltip.sc-se-tooltip,.tooltip-fab-top.tooltip-left.sc-se-tooltip .tooltip.sc-se-tooltip,.tooltip-fab-top.tooltip-bottom.sc-se-tooltip .tooltip.sc-se-tooltip{left:auto;-webkit-transform:none;transform:none}/*!@.tooltip-fab-top.tooltip-left .tooltip*/.tooltip-fab-top.tooltip-left.sc-se-tooltip .tooltip.sc-se-tooltip{top:calc(-100vh + 64px + 48px);right:104px;-webkit-transform:translateY(-50%);transform:translateY(-50%)}/*!@.tooltip-fab-top.tooltip-top .tooltip*/.tooltip-fab-top.tooltip-top.sc-se-tooltip .tooltip.sc-se-tooltip{top:auto;right:16px;bottom:calc(100vh - 64px - 16px);min-width:80px}/*!@.tooltip-fab-top.tooltip-bottom .tooltip*/.tooltip-fab-top.tooltip-bottom.sc-se-tooltip .tooltip.sc-se-tooltip{top:calc(-100vh + 64px + 24px + 56px);right:16px;min-width:80px}";

class TooltipComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Indicates the position of your tooltip.
         * The default setting is `bottom`, rendering the tooltip below its parent.
         */
        this.position = "bottom";
        /**
         * Indicates the action of your tooltip.
         * The default setting is `hover`, triggering the tooltip when hovering over the parent element.
         * The `click` action triggers the tooltip when you click on the parent element.
         */
        this.action = "hover";
        this.opened = false;
        this.didOpen = createEvent(this, "didOpen", 7);
        this.didClose = createEvent(this, "didClose", 7);
        this.closeTooltips = createEvent(this, "closeTooltips", 7);
    }
    /**
     * Method to open the tooltip separate from hovering or clicking the parent element.
     */
    async open() {
        this.opened = true;
    }
    /**
     * Method to close the tooltip separate from hovering or clicking the parent element.
     */
    async close() {
        this.opened = false;
    }
    handleTouchstart(ev) {
        this._toggle(ev);
    }
    handleTouchEnd(ev) {
        this._toggle(ev);
    }
    handleMouseOver(ev) {
        if (this.action === "hover") {
            this._toggle(ev);
        }
    }
    handleMouseLeave(ev) {
        if (this.action === "hover" && this.opened) {
            this._toggle(ev);
        }
    }
    handleMouseClick(ev) {
        if (this.action === "click" && this.opened) {
            this._toggle(ev);
        }
    }
    handleCloseTooltip() {
        this.close();
    }
    _toggle(ev) {
        ev.stopPropagation();
        if (this.opened) {
            this.close();
            this.didClose.emit(ev);
        }
        else {
            this.closeTooltips.emit(); // close other tooltips before opening target tooltip
            this.open();
            this.didOpen.emit(ev);
        }
    }
    render() {
        const containsFab = this.el.querySelector("se-fab");
        const tooltipPosition = this.el.getAttribute("position");
        if (!!this.el.shadowRoot.querySelector("div .tooltip") && containsFab && containsFab.getAttribute("position") === "top") {
            const fabButtonHeight = this.el.querySelector("se-fab").shadowRoot.querySelector("se-button").shadowRoot.querySelector("button");
            const fabHeight = this.el.querySelector("se-fab").shadowRoot.querySelector("div").offsetTop;
            if (!!tooltipPosition && tooltipPosition === "left") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `top: calc(${fabHeight}px + ${fabButtonHeight.offsetTop}px + (${fabButtonHeight.offsetHeight}px / 2))`);
            }
            else if (!!tooltipPosition && tooltipPosition === "top") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `bottom: calc(100vh - ${fabHeight}px - 8px `);
            }
            else if (tooltipPosition === null || tooltipPosition === "bottom") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `top: calc(${fabHeight}px + ${fabButtonHeight.offsetHeight}px + 8px`);
            }
        }
        return (h("div", { class: [
                this.position ? `tooltip-${this.position}` : 'tooltip-bottom',
                containsFab ? `tooltip-fab${containsFab.getAttribute("position") === "top" ? '-top' : ''}` : ''
            ]
                .join(' ') }, h("div", { onClick: this.action == "click" ? ev => { this._toggle(ev); } : () => { } }, h("slot", { name: "tooltip" })), h("div", { class: `${this.opened ? "show" : ""} tooltip` }, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get style() { return tooltipCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-tooltip",
        "$members$": {
            "position": [1],
            "action": [1],
            "opened": [32],
            "open": [64],
            "close": [64]
        },
        "$listeners$": [[9, "touchstart", "handleTouchstart"], [9, "touchend", "handleTouchEnd"], [1, "mouseover", "handleMouseOver"], [1, "mouseleave", "handleMouseLeave"], [8, "click", "handleMouseClick"], [4, "closeTooltips", "handleCloseTooltip"]],
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tooltipContentCss = "/*!@:host*/.sc-se-tooltip-content-h{position:relative}/*!@.tooltip-content*/.tooltip-content.sc-se-tooltip-content{position:relative;font-size:14px;line-height:17px;display:-ms-flexbox;display:flex}/*!@.se-icon*/.se-icon.sc-se-tooltip-content{font-family:\"se-icon\";padding-top:4px;padding-right:5px}";

class TooltipContentComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return (h("div", { class: "tooltip-content" }, this.icon && h("se-icon", { class: "se-icon", size: "small" }, this.icon), h("slot", { name: "icon" }), h("slot", null)));
    }
    static get style() { return tooltipContentCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-tooltip-content",
        "$members$": {
            "icon": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tooltipFooterCss = "/*!@:host*/.sc-se-tooltip-footer-h{position:relative;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-moz-align-items:center;-ms-flex-align:center;align-items:center;font-size:14px;line-height:17px}/*!@.flex*/.flex.sc-se-tooltip-footer{display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}";

class TooltipFooterComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return [
            h("div", { class: "flex" }, h("slot", { name: "start" })),
            h("slot", null)
        ];
    }
    static get style() { return tooltipFooterCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-tooltip-footer",
        "$members$": undefined,
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const tooltipHeaderCss = "/*!@:host*/.sc-se-tooltip-header-h{position:relative}/*!@.tooltip-header*/.tooltip-header.sc-se-tooltip-header{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;position:relative;font-weight:600;font-size:14px;line-height:17px}/*!@.se-icon*/.se-icon.sc-se-tooltip-header{font-family:\"se-icon\";padding-right:5px}";

class TooltipHeaderComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return [
            h("div", { class: "tooltip-header" }, this.icon && h("se-icon", { class: "se-icon", size: "small" }, this.icon), h("slot", { name: "icon" }), h("slot", null)),
            h("slot", { name: "end" })
        ];
    }
    static get style() { return tooltipHeaderCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-tooltip-header",
        "$members$": {
            "icon": [1]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const visualLinearCss = "/*!@:host*/.sc-se-visual-linear-h{margin:4px}/*!@.se-visual-linear*/.se-visual-linear.sc-se-visual-linear{display:-ms-flexbox;display:flex}/*!@svg*/svg.sc-se-visual-linear{margin-top:4px;margin-bottom:4px}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm){/*!@svg*/svg.sc-se-visual-linear{width:100%}}@-moz-document url-prefix(){svg{width:100%}}@supports (-ms-ime-align: auto){/*!@svg*/svg.sc-se-visual-linear{width:80%}}/*!@.progress-bar-wrapper*/.progress-bar-wrapper.sc-se-visual-linear{fill:#F7F7F7;width:100%}/*!@.progress-bar*/.progress-bar.sc-se-visual-linear{color:inherit}/*!@text*/text.sc-se-visual-linear{color:#333333}/*!@.linear-value*/.linear-value.sc-se-visual-linear{font-weight:600}/*!@.linear-label*/.linear-label.sc-se-visual-linear{font-size:12px}/*!@.linear-value + .linear-label*/.linear-value.sc-se-visual-linear+.linear-label.sc-se-visual-linear{font-size:14px}/*!@.inline.se-visual-linear*/.inline.se-visual-linear.sc-se-visual-linear{-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:center;justify-content:center;-moz-align-items:start;-ms-flex-align:start;align-items:start}/*!@.inline svg*/.inline.sc-se-visual-linear svg.sc-se-visual-linear{margin-right:16px}/*!@.inline .linear-value*/.inline.sc-se-visual-linear .linear-value.sc-se-visual-linear{margin-right:4px}/*!@.stacked.se-visual-linear*/.stacked.se-visual-linear.sc-se-visual-linear{-ms-flex-direction:column-reverse;flex-direction:column-reverse}/*!@.stacked .linear-value + .linear-label*/.stacked.sc-se-visual-linear .linear-value.sc-se-visual-linear+.linear-label.sc-se-visual-linear{float:right}";

class VisualLinearComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the layout of your component.
         * `inline` is the default option.  This sets the "progress bar" adjacent to the label.
         * `stacked` option will render the "progress bar" below the label.
         */
        this.option = 'inline';
        /**
         * Sets the color of the visual "progress bar".
         * The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58).
         * By default, the progress bar will have a green color.
         */
        this.secolor = 'primary';
        this.isHexColor = false;
    }
    colorDidChange() {
        this.isHexColor = (this.secolor && this.secolor.indexOf('#') !== -1) ? true : false;
    }
    componentDidLoad() {
        this.colorDidChange();
    }
    render() {
        return (h(Host, { class: !this.isHexColor ? `color-${this.secolor}` : '' }, h("div", { class: ["se-visual-linear", this.option].join(' ') }, h("svg", { height: "8" }, h("rect", { class: "progress-bar-wrapper", width: "100%", height: "8" }), h("rect", { class: "progress-bar", width: this.percentage + '%', height: "8", style: { fill: this.isHexColor ? this.secolor : 'currentColor' } }), "Sorry, your browser does not support inline SVG."), h("text", null, this.value ? h("tspan", { class: "linear-value" }, this.value) : '', h("tspan", { x: "100%", class: "linear-label" }, this.label)))));
    }
    static get watchers() { return {
        "secolor": ["colorDidChange"]
    }; }
    static get style() { return visualLinearCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-visual-linear",
        "$members$": {
            "option": [1],
            "label": [1],
            "value": [1025],
            "secolor": [1],
            "percentage": [1026],
            "isHexColor": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

const visualRadialCss = "/*!@.visual-radial-wrapper*/.visual-radial-wrapper.sc-se-visual-radial{position:relative}/*!@.se-visual-radial,\n.radial-data*/.se-visual-radial.sc-se-visual-radial,.radial-data.sc-se-visual-radial{position:absolute;top:0;bottom:0;left:0;right:0}/*!@.se-visual-radial*/.se-visual-radial.sc-se-visual-radial{-webkit-transform:rotate(-90deg);transform:rotate(-90deg);border-radius:100%}/*!@.radial-data*/.radial-data.sc-se-visual-radial{color:#333333;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;width:100%;height:100%}/*!@.radial-value*/.radial-value.sc-se-visual-radial{-ms-flex-item-align:center;align-self:center}/*!@.radial-label*/.radial-label.sc-se-visual-radial{font-size:12px;-ms-flex-item-align:center;align-self:center}/*!@.small.visual-radial-wrapper*/.small.visual-radial-wrapper.sc-se-visual-radial{width:82px;height:82px}/*!@.small .se-visual-radial*/.small.sc-se-visual-radial .se-visual-radial.sc-se-visual-radial{stroke-dasharray:208 208}/*!@.small .radial-value*/.small.sc-se-visual-radial .radial-value.sc-se-visual-radial{font-size:26px}/*!@.large.visual-radial-wrapper*/.large.visual-radial-wrapper.sc-se-visual-radial{width:164px;height:164px}/*!@.large .se-visual-radial*/.large.sc-se-visual-radial .se-visual-radial.sc-se-visual-radial{stroke-dasharray:415 415}/*!@.large .radial-value*/.large.sc-se-visual-radial .radial-value.sc-se-visual-radial{font-size:52px}";

class VisualRadialComponent {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Determines the visual size of your circular progress bar.  The default setting is `large`.
         */
        this.size = 'large';
        /**
         * Sets the color of the visual "progress bar".
         * The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58).
         * By default, the progress bar will have a green color.
         */
        this.secolor = 'primary';
        this.isHexColor = false;
    }
    sizeDidChange() {
        this.svgSize = (this.size == 'small') ? 82 : 164;
        this.circleDimensions = (this.size == 'small') ? 41 : 82;
        this.circleRadius = (this.size == 'small') ? 33 : 66;
        const circumference = (this.size == 'small') ? 66 * Math.PI : 132 * Math.PI;
        this.offset = circumference - this.percentage / 100 * circumference;
    }
    colorDidChange() {
        this.isHexColor = (this.secolor && this.secolor.indexOf('#') !== -1) ? true : false;
    }
    componentDidLoad() {
        this.colorDidChange();
        this.sizeDidChange();
    }
    render() {
        return (h(Host, { class: !this.isHexColor ? `color-${this.secolor}` : '' }, h("div", { class: ["visual-radial-wrapper", this.size].join(' ') }, h("svg", { class: "se-visual-radial", height: this.svgSize, width: this.svgSize }, h("circle", { cx: this.circleDimensions, cy: this.circleDimensions, r: this.circleRadius, stroke: "#f7f7f7", "stroke-width": "8", fill: "transparent" }), h("circle", { cx: this.circleDimensions, cy: this.circleDimensions, r: this.circleRadius, stroke: this.isHexColor ? this.secolor : 'currentColor', "stroke-width": "8", fill: "transparent", style: { strokeDashoffset: String(this.offset) } }), "Sorry, your browser does not support inline SVG."), h("svg", { height: this.svgSize, width: this.svgSize }, h("text", null, this.value ? h("tspan", { class: "radial-value", x: "50%", y: "50%", "text-anchor": "middle" }, this.value) : '', h("tspan", { class: "radial-label", x: "50%", y: this.value ? "70%" : "53%", "text-anchor": "middle" }, this.label))))));
    }
    static get watchers() { return {
        "size": ["sizeDidChange"],
        "secolor": ["colorDidChange"]
    }; }
    static get style() { return visualRadialCss; }
    static get cmpMeta() { return {
        "$flags$": 9,
        "$tagName$": "se-visual-radial",
        "$members$": {
            "size": [1],
            "label": [1],
            "value": [1025],
            "secolor": [1],
            "percentage": [1026],
            "isHexColor": [32],
            "offset": [32],
            "circleDimensions": [32],
            "circleRadius": [32],
            "svgSize": [32]
        },
        "$listeners$": undefined,
        "$lazyBundleIds$": "-",
        "$attrsToReflect$": []
    }; }
}

registerComponents([
  AboutComponent,
  AppComponent,
  AuthenticationComponent,
  BannerComponent,
  BannerItemComponent,
  BlockComponent,
  BlockContent,
  BlockFooter,
  BlockHeader,
  BreadcrumbComponent,
  BreadcrumbItemComponent,
  ButtonComponent,
  CheckboxComponent,
  ChipComponent,
  ContainerComponent,
  DialogComponent,
  DialogContentComponent,
  DialogFooterComponent,
  DialogHeaderComponent,
  DividerComponent,
  DropdownComponent,
  FabComponent,
  FabItemComponent,
  FormFieldComponent,
  HeaderComponent,
  IconComponent,
  IconEcostruxureComponent,
  IconLifeisonComponent,
  IconSchneiderComponent,
  LinkComponent,
  ListComponent,
  ListGroupComponent,
  ListItemComponent,
  LoadingComponent,
  RadioComponent,
  RadioGroupComponent,
  SidemenuComponent,
  SidemenuItemComponent,
  SliderComponent,
  SnackbarComponent,
  StepperComponent,
  StepperItemComponent,
  TabbarComponent,
  TableComponent,
  TableGroupComponent,
  TableGroupHeaderComponent,
  TableItemComponent,
  TableItemHeaderComponent,
  TooltipComponent,
  TooltipContentComponent,
  TooltipFooterComponent,
  TooltipHeaderComponent,
  VisualLinearComponent,
  VisualRadialComponent,
]);

exports.hydrateApp = hydrateApp;


  /*hydrateAppClosure end*/
  hydrateApp(window, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve);
  }

  hydrateAppClosure($stencilWindow);
}

/*
 Stencil Hydrate Runner v1.13.0 | MIT Licensed | https://stenciljs.com
 */

const templateWindows = new Map();
function createWindowFromHtml(templateHtml, uniqueId) {
    let templateWindow = templateWindows.get(uniqueId);
    if (templateWindow == null) {
        templateWindow = new MockWindow(templateHtml);
        templateWindows.set(uniqueId, templateWindow);
    }
    const win = cloneWindow(templateWindow);
    return win;
}

const URL_ = /*@__PURE__*/ (() => {
  if (typeof URL === 'function') {
    return URL;
  }
  const requireFunc = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require;
  if (typeof requireFunc === 'function') {
    try {
      return requireFunc('url').URL;
    } catch (e) {}
  }
  return function() {};
})();

function normalizeHydrateOptions(inputOpts) {
    const outputOpts = Object.assign({
        serializeToHtml: false,
        destroyWindow: false,
        destroyDocument: false,
    }, inputOpts || {});
    if (typeof outputOpts.clientHydrateAnnotations !== 'boolean') {
        outputOpts.clientHydrateAnnotations = true;
    }
    if (typeof outputOpts.constrainTimeouts !== 'boolean') {
        outputOpts.constrainTimeouts = true;
    }
    if (typeof outputOpts.maxHydrateCount !== 'number') {
        outputOpts.maxHydrateCount = 300;
    }
    if (typeof outputOpts.runtimeLogging !== 'boolean') {
        outputOpts.runtimeLogging = false;
    }
    if (typeof outputOpts.timeout !== 'number') {
        outputOpts.timeout = 15000;
    }
    if (Array.isArray(outputOpts.excludeComponents)) {
        outputOpts.excludeComponents = outputOpts.excludeComponents.filter(filterValidTags).map(mapValidTags);
    }
    else {
        outputOpts.excludeComponents = [];
    }
    if (Array.isArray(outputOpts.staticComponents)) {
        outputOpts.staticComponents = outputOpts.staticComponents.filter(filterValidTags).map(mapValidTags);
    }
    else {
        outputOpts.staticComponents = [];
    }
    return outputOpts;
}
function filterValidTags(tag) {
    return typeof tag === 'string' && tag.includes('-');
}
function mapValidTags(tag) {
    return tag.trim().toLowerCase();
}
function generateHydrateResults(opts) {
    if (typeof opts.url !== 'string') {
        opts.url = `https://hydrate.stenciljs.com/`;
    }
    const results = {
        diagnostics: [],
        url: opts.url,
        host: null,
        hostname: null,
        href: null,
        pathname: null,
        port: null,
        search: null,
        hash: null,
        html: null,
        httpStatus: null,
        hydratedCount: 0,
        anchors: [],
        components: [],
        imgs: [],
        scripts: [],
        styles: [],
        title: null,
    };
    try {
        const url = new URL_(opts.url, `https://hydrate.stenciljs.com/`);
        results.url = url.href;
        results.host = url.host;
        results.hostname = url.hostname;
        results.href = url.href;
        results.port = url.port;
        results.pathname = url.pathname;
        results.search = url.search;
        results.hash = url.hash;
    }
    catch (e) {
        renderCatchError(results, e);
    }
    return results;
}
function renderBuildDiagnostic(results, level, header, msg) {
    const diagnostic = {
        level: level,
        type: 'build',
        header: header,
        messageText: msg,
        relFilePath: null,
        absFilePath: null,
        lines: [],
    };
    if (results.pathname) {
        if (results.pathname !== '/') {
            diagnostic.header += ': ' + results.pathname;
        }
    }
    else if (results.url) {
        diagnostic.header += ': ' + results.url;
    }
    results.diagnostics.push(diagnostic);
    return diagnostic;
}
function renderBuildError(results, msg) {
    return renderBuildDiagnostic(results, 'error', 'Hydrate Error', msg);
}
function renderCatchError(results, err) {
    const diagnostic = renderBuildError(results, null);
    if (err != null) {
        if (err.stack != null) {
            diagnostic.messageText = err.stack.toString();
        }
        else {
            if (err.message != null) {
                diagnostic.messageText = err.message.toString();
            }
            else {
                diagnostic.messageText = err.toString();
            }
        }
    }
    return diagnostic;
}

const IS_NODE_ENV = typeof global !== 'undefined' &&
    typeof require === 'function' &&
    !!global.process &&
    Array.isArray(global.process.argv) &&
    typeof __filename === 'string' &&
    (!global.origin || typeof global.origin !== 'string');
const IS_NODE_WINDOWS_ENV = IS_NODE_ENV && global.process.platform === 'win32';

const isString = (v) => typeof v === 'string';
const isPromise = (v) => !!v && (typeof v === 'object' || typeof v === 'function') && typeof v.then === 'function';

const catchError = (diagnostics, err, msg) => {
    const diagnostic = {
        level: 'error',
        type: 'build',
        header: 'Build Error',
        messageText: 'build error',
        relFilePath: null,
        absFilePath: null,
        lines: [],
    };
    if (isString(msg)) {
        diagnostic.messageText = msg;
    }
    else if (err != null) {
        if (err.stack != null) {
            diagnostic.messageText = err.stack.toString();
        }
        else {
            if (err.message != null) {
                diagnostic.messageText = err.message.toString();
            }
            else {
                diagnostic.messageText = err.toString();
            }
        }
    }
    if (diagnostics != null && !shouldIgnoreError(diagnostic.messageText)) {
        diagnostics.push(diagnostic);
    }
    return diagnostic;
};
const hasError = (diagnostics) => {
    if (diagnostics == null || diagnostics.length === 0) {
        return false;
    }
    return diagnostics.some(d => d.level === 'error' && d.type !== 'runtime');
};
const shouldIgnoreError = (msg) => {
    return msg === TASK_CANCELED_MSG;
};
const TASK_CANCELED_MSG = `task canceled`;

function runtimeLogging(win, opts, results) {
    try {
        const pathname = win.location.pathname;
        win.console.error = (...msgs) => {
            renderCatchError(results, [...msgs].join(', '));
            if (opts.runtimeLogging) {
                runtimeLog(pathname, 'error', msgs);
            }
        };
        win.console.debug = (...msgs) => {
            renderBuildDiagnostic(results, 'debug', 'Hydrate Debug', [...msgs].join(', '));
            if (opts.runtimeLogging) {
                runtimeLog(pathname, 'debug', msgs);
            }
        };
        if (opts.runtimeLogging) {
            ['log', 'warn', 'assert', 'info', 'trace'].forEach(type => {
                win.console[type] = (...msgs) => {
                    runtimeLog(pathname, type, msgs);
                };
            });
        }
    }
    catch (e) {
        renderCatchError(results, e);
    }
}
function runtimeLog(pathname, type, msgs) {
    global.console[type].apply(global.console, [`[ ${pathname}  ${type} ] `, ...msgs]);
}

function initializeWindow(win, opts, results) {
    try {
        win.location.href = opts.url;
    }
    catch (e) {
        renderCatchError(results, e);
    }
    if (typeof opts.userAgent === 'string') {
        try {
            win.navigator.userAgent = opts.userAgent;
        }
        catch (e) { }
    }
    if (typeof opts.cookie === 'string') {
        try {
            win.document.cookie = opts.cookie;
        }
        catch (e) { }
    }
    if (typeof opts.referrer === 'string') {
        try {
            win.document.referrer = opts.referrer;
        }
        catch (e) { }
    }
    if (typeof opts.direction === 'string') {
        try {
            win.document.documentElement.setAttribute('dir', opts.direction);
        }
        catch (e) { }
    }
    if (typeof opts.language === 'string') {
        try {
            win.document.documentElement.setAttribute('lang', opts.language);
        }
        catch (e) { }
    }
    try {
        win.customElements = null;
    }
    catch (e) { }
    if (opts.constrainTimeouts) {
        constrainTimeouts(win);
    }
    runtimeLogging(win, opts, results);
    return win;
}

function inspectElement(results, elm, depth) {
    const children = elm.children;
    for (let i = 0, ii = children.length; i < ii; i++) {
        const childElm = children[i];
        const tagName = childElm.nodeName.toLowerCase();
        if (tagName.includes('-')) {
            // we've already collected components that were hydrated
            // now that the document is completed we can count how
            // many they are and their depth
            const cmp = results.components.find(c => c.tag === tagName);
            if (cmp != null) {
                cmp.count++;
                if (depth > cmp.depth) {
                    cmp.depth = depth;
                }
            }
        }
        else {
            switch (tagName) {
                case 'a':
                    const anchor = collectAttributes(childElm);
                    anchor.href = childElm.href;
                    if (typeof anchor.href === 'string') {
                        if (!results.anchors.some(a => a.href === anchor.href)) {
                            results.anchors.push(anchor);
                        }
                    }
                    break;
                case 'img':
                    const img = collectAttributes(childElm);
                    img.src = childElm.src;
                    if (typeof img.src === 'string') {
                        if (!results.imgs.some(a => a.src === img.src)) {
                            results.imgs.push(img);
                        }
                    }
                    break;
                case 'link':
                    const link = collectAttributes(childElm);
                    link.href = childElm.href;
                    if (typeof link.rel === 'string' && link.rel.toLowerCase() === 'stylesheet') {
                        if (typeof link.href === 'string') {
                            if (!results.styles.some(s => s.link === link.href)) {
                                delete link.rel;
                                delete link.type;
                                results.styles.push(link);
                            }
                        }
                    }
                    break;
                case 'script':
                    const script = collectAttributes(childElm);
                    script.src = childElm.src;
                    if (typeof script.src === 'string') {
                        if (!results.scripts.some(s => s.src === script.src)) {
                            results.scripts.push(script);
                        }
                    }
                    break;
            }
        }
        depth++;
        inspectElement(results, childElm, depth);
    }
}
function collectAttributes(node) {
    const parsedElm = {};
    const attrs = node.attributes;
    for (let i = 0, ii = attrs.length; i < ii; i++) {
        const attr = attrs.item(i);
        const attrName = attr.nodeName.toLowerCase();
        if (SKIP_ATTRS.has(attrName)) {
            continue;
        }
        const attrValue = attr.nodeValue;
        if (attrName === 'class' && attrValue === '') {
            continue;
        }
        parsedElm[attrName] = attrValue;
    }
    return parsedElm;
}
const SKIP_ATTRS = new Set(['s-id', 'c-id']);

function patchDomImplementation(doc, opts) {
    let win;
    if (doc.defaultView != null) {
        opts.destroyWindow = true;
        patchWindow(doc.defaultView);
        win = doc.defaultView;
    }
    else {
        opts.destroyWindow = true;
        opts.destroyDocument = false;
        win = new MockWindow(false);
    }
    if (win.document !== doc) {
        win.document = doc;
    }
    if (doc.defaultView !== win) {
        doc.defaultView = win;
    }
    const HTMLElement = doc.documentElement.constructor.prototype;
    if (typeof HTMLElement.getRootNode !== 'function') {
        const elm = doc.createElement('unknown-element');
        const HTMLUnknownElement = elm.constructor.prototype;
        HTMLUnknownElement.getRootNode = getRootNode;
    }
    if (typeof doc.createEvent === 'function') {
        const CustomEvent = doc.createEvent('CustomEvent').constructor;
        if (win.CustomEvent !== CustomEvent) {
            win.CustomEvent = CustomEvent;
        }
    }
    try {
        doc.baseURI;
    }
    catch (e) {
        Object.defineProperty(doc, 'baseURI', {
            get() {
                const baseElm = doc.querySelector('base[href]');
                if (baseElm) {
                    return new URL(baseElm.getAttribute('href'), win.location.href).href;
                }
                return win.location.href;
            },
        });
    }
    return win;
}
function getRootNode(opts) {
    const isComposed = opts != null && opts.composed === true;
    let node = this;
    while (node.parentNode != null) {
        node = node.parentNode;
        if (isComposed === true && node.parentNode == null && node.host != null) {
            node = node.host;
        }
    }
    return node;
}

const relocateMetaCharset = (doc) => {
    const head = doc.head;
    let charsetElm = head.querySelector('meta[charset]');
    if (charsetElm == null) {
        // doesn't have <meta charset>, so create it
        charsetElm = doc.createElement('meta');
        charsetElm.setAttribute('charset', 'utf-8');
    }
    else {
        // take the current one out of its existing location
        charsetElm.remove();
    }
    // ensure the <meta charset> is the first node in <head>
    head.insertBefore(charsetElm, head.firstChild);
};

const getUsedSelectors = (elm) => {
    const usedSelectors = {
        attrs: new Set(),
        classNames: new Set(),
        ids: new Set(),
        tags: new Set(),
    };
    collectUsedSelectors(usedSelectors, elm);
    return usedSelectors;
};
const collectUsedSelectors = (usedSelectors, elm) => {
    if (elm != null && elm.nodeType === 1) {
        // tags
        const children = elm.children;
        const tagName = elm.nodeName.toLowerCase();
        usedSelectors.tags.add(tagName);
        // attributes
        const attributes = elm.attributes;
        for (let i = 0, l = attributes.length; i < l; i++) {
            const attr = attributes.item(i);
            const attrName = attr.name.toLowerCase();
            usedSelectors.attrs.add(attrName);
            if (attrName === 'class') {
                // classes
                const classList = elm.classList;
                for (let i = 0, l = classList.length; i < l; i++) {
                    usedSelectors.classNames.add(classList.item(i));
                }
            }
            else if (attrName === 'id') {
                // ids
                usedSelectors.ids.add(attr.value);
            }
        }
        // drill down
        if (children) {
            for (let i = 0, l = children.length; i < l; i++) {
                collectUsedSelectors(usedSelectors, children[i]);
            }
        }
    }
};

const parseCss = (css, filePath) => {
    let lineno = 1;
    let column = 1;
    const diagnostics = [];
    const updatePosition = (str) => {
        const lines = str.match(/\n/g);
        if (lines)
            lineno += lines.length;
        const i = str.lastIndexOf('\n');
        column = ~i ? str.length - i : column + str.length;
    };
    const position = () => {
        const start = { line: lineno, column: column };
        return (node) => {
            node.position = new ParsePosition(start);
            whitespace();
            return node;
        };
    };
    const error = (msg) => {
        const srcLines = css.split('\n');
        const d = {
            level: 'error',
            type: 'css',
            language: 'css',
            header: 'CSS Parse',
            messageText: msg,
            absFilePath: filePath,
            lines: [
                {
                    lineIndex: lineno - 1,
                    lineNumber: lineno,
                    errorCharStart: column,
                    text: css[lineno - 1],
                },
            ],
        };
        if (lineno > 1) {
            const previousLine = {
                lineIndex: lineno - 1,
                lineNumber: lineno - 1,
                text: css[lineno - 2],
                errorCharStart: -1,
                errorLength: -1,
            };
            d.lines.unshift(previousLine);
        }
        if (lineno + 2 < srcLines.length) {
            const nextLine = {
                lineIndex: lineno,
                lineNumber: lineno + 1,
                text: srcLines[lineno],
                errorCharStart: -1,
                errorLength: -1,
            };
            d.lines.push(nextLine);
        }
        diagnostics.push(d);
        return null;
    };
    const stylesheet = () => {
        const rulesList = rules();
        return {
            type: 'stylesheet',
            stylesheet: {
                source: filePath,
                rules: rulesList,
            },
        };
    };
    const open = () => match(/^{\s*/);
    const close = () => match(/^}/);
    const match = (re) => {
        const m = re.exec(css);
        if (!m)
            return;
        const str = m[0];
        updatePosition(str);
        css = css.slice(str.length);
        return m;
    };
    const rules = () => {
        let node;
        const rules = [];
        whitespace();
        comments(rules);
        while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {
            if (node !== false) {
                rules.push(node);
                comments(rules);
            }
        }
        return rules;
    };
    /**
     * Parse whitespace.
     */
    const whitespace = () => match(/^\s*/);
    const comments = (rules) => {
        let c;
        rules = rules || [];
        while ((c = comment())) {
            if (c !== false) {
                rules.push(c);
            }
        }
        return rules;
    };
    const comment = () => {
        const pos = position();
        if ('/' !== css.charAt(0) || '*' !== css.charAt(1))
            return null;
        let i = 2;
        while ('' !== css.charAt(i) && ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1)))
            ++i;
        i += 2;
        if ('' === css.charAt(i - 1)) {
            return error('End of comment missing');
        }
        const comment = css.slice(2, i - 2);
        column += 2;
        updatePosition(comment);
        css = css.slice(i);
        column += 2;
        return pos({
            type: 'comment',
            comment,
        });
    };
    const selector = () => {
        const m = match(/^([^{]+)/);
        if (!m)
            return null;
        return trim(m[0])
            .replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '')
            .replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function (m) {
            return m.replace(/,/g, '\u200C');
        })
            .split(/\s*(?![^(]*\)),\s*/)
            .map(function (s) {
            return s.replace(/\u200C/g, ',');
        });
    };
    const declaration = () => {
        const pos = position();
        // prop
        let prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
        if (!prop)
            return null;
        prop = trim(prop[0]);
        // :
        if (!match(/^:\s*/))
            return error(`property missing ':'`);
        // val
        const val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
        const ret = pos({
            type: 'declaration',
            property: prop.replace(commentre, ''),
            value: val ? trim(val[0]).replace(commentre, '') : '',
        });
        match(/^[;\s]*/);
        return ret;
    };
    const declarations = () => {
        const decls = [];
        if (!open())
            return error(`missing '{'`);
        comments(decls);
        // declarations
        let decl;
        while ((decl = declaration())) {
            if (decl !== false) {
                decls.push(decl);
                comments(decls);
            }
        }
        if (!close())
            return error(`missing '}'`);
        return decls;
    };
    const keyframe = () => {
        let m;
        const values = [];
        const pos = position();
        while ((m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/))) {
            values.push(m[1]);
            match(/^,\s*/);
        }
        if (!values.length)
            return null;
        return pos({
            type: 'keyframe',
            values,
            declarations: declarations(),
        });
    };
    const atkeyframes = () => {
        const pos = position();
        let m = match(/^@([-\w]+)?keyframes\s*/);
        if (!m)
            return null;
        const vendor = m[1];
        // identifier
        m = match(/^([-\w]+)\s*/);
        if (!m)
            return error(`@keyframes missing name`);
        const name = m[1];
        if (!open())
            return error(`@keyframes missing '{'`);
        let frame;
        let frames = comments();
        while ((frame = keyframe())) {
            frames.push(frame);
            frames = frames.concat(comments());
        }
        if (!close())
            return error(`@keyframes missing '}'`);
        return pos({
            type: 'keyframes',
            name: name,
            vendor: vendor,
            keyframes: frames,
        });
    };
    const atsupports = () => {
        const pos = position();
        const m = match(/^@supports *([^{]+)/);
        if (!m)
            return null;
        const supports = trim(m[1]);
        if (!open())
            return error(`@supports missing '{'`);
        const style = comments().concat(rules());
        if (!close())
            return error(`@supports missing '}'`);
        return pos({
            type: 'supports',
            supports: supports,
            rules: style,
        });
    };
    const athost = () => {
        const pos = position();
        const m = match(/^@host\s*/);
        if (!m)
            return null;
        if (!open())
            return error(`@host missing '{'`);
        const style = comments().concat(rules());
        if (!close())
            return error(`@host missing '}'`);
        return pos({
            type: 'host',
            rules: style,
        });
    };
    const atmedia = () => {
        const pos = position();
        const m = match(/^@media *([^{]+)/);
        if (!m)
            return null;
        const media = trim(m[1]);
        if (!open())
            return error(`@media missing '{'`);
        const style = comments().concat(rules());
        if (!close())
            return error(`@media missing '}'`);
        return pos({
            type: 'media',
            media: media,
            rules: style,
        });
    };
    const atcustommedia = () => {
        const pos = position();
        const m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
        if (!m)
            return null;
        return pos({
            type: 'custom-media',
            name: trim(m[1]),
            media: trim(m[2]),
        });
    };
    const atpage = () => {
        const pos = position();
        const m = match(/^@page */);
        if (!m)
            return null;
        const sel = selector() || [];
        if (!open())
            return error(`@page missing '{'`);
        let decls = comments();
        let decl;
        while ((decl = declaration())) {
            decls.push(decl);
            decls = decls.concat(comments());
        }
        if (!close())
            return error(`@page missing '}'`);
        return pos({
            type: 'page',
            selectors: sel,
            declarations: decls,
        });
    };
    const atdocument = () => {
        const pos = position();
        const m = match(/^@([-\w]+)?document *([^{]+)/);
        if (!m)
            return null;
        const vendor = trim(m[1]);
        const doc = trim(m[2]);
        if (!open())
            return error(`@document missing '{'`);
        const style = comments().concat(rules());
        if (!close())
            return error(`@document missing '}'`);
        return pos({
            type: 'document',
            document: doc,
            vendor: vendor,
            rules: style,
        });
    };
    const atfontface = () => {
        const pos = position();
        const m = match(/^@font-face\s*/);
        if (!m)
            return null;
        if (!open())
            return error(`@font-face missing '{'`);
        let decls = comments();
        let decl;
        while ((decl = declaration())) {
            decls.push(decl);
            decls = decls.concat(comments());
        }
        if (!close())
            return error(`@font-face missing '}'`);
        return pos({
            type: 'font-face',
            declarations: decls,
        });
    };
    const _compileAtrule = (name) => {
        const re = new RegExp('^@' + name + '\\s*([^;]+);');
        return () => {
            const pos = position();
            const m = match(re);
            if (!m)
                return null;
            const ret = { type: name };
            ret[name] = m[1].trim();
            return pos(ret);
        };
    };
    const atimport = _compileAtrule('import');
    const atcharset = _compileAtrule('charset');
    const atnamespace = _compileAtrule('namespace');
    const atrule = () => {
        if (css[0] !== '@')
            return null;
        return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
    };
    const rule = () => {
        const pos = position();
        const sel = selector();
        if (!sel)
            return error('selector missing');
        comments();
        return pos({
            type: 'rule',
            selectors: sel,
            declarations: declarations(),
        });
    };
    class ParsePosition {
        constructor(start) {
            this.start = start;
            this.end = { line: lineno, column: column };
            this.source = filePath;
        }
    }
    ParsePosition.prototype.content = css;
    return Object.assign({ diagnostics }, addParent(stylesheet()));
};
const trim = (str) => (str ? str.trim() : '');
/**
 * Adds non-enumerable parent node reference to each node.
 */
const addParent = (obj, parent) => {
    const isNode = obj && typeof obj.type === 'string';
    const childParent = isNode ? obj : parent;
    for (const k in obj) {
        const value = obj[k];
        if (Array.isArray(value)) {
            value.forEach(function (v) {
                addParent(v, childParent);
            });
        }
        else if (value && typeof value === 'object') {
            addParent(value, childParent);
        }
    }
    if (isNode) {
        Object.defineProperty(obj, 'parent', {
            configurable: true,
            writable: true,
            enumerable: false,
            value: parent || null,
        });
    }
    return obj;
};
// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
const commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

const getCssSelectors = (sel) => {
    // reusing global SELECTORS since this is a synchronous operation
    SELECTORS.all.length = SELECTORS.tags.length = SELECTORS.classNames.length = SELECTORS.ids.length = SELECTORS.attrs.length = 0;
    sel = sel
        .replace(/\./g, ' .')
        .replace(/\#/g, ' #')
        .replace(/\[/g, ' [')
        .replace(/\>/g, ' > ')
        .replace(/\+/g, ' + ')
        .replace(/\~/g, ' ~ ')
        .replace(/\*/g, ' * ')
        .replace(/\:not\((.*?)\)/g, ' ');
    const items = sel.split(' ');
    for (let i = 0, l = items.length; i < l; i++) {
        items[i] = items[i].split(':')[0];
        if (items[i].length === 0)
            continue;
        if (items[i].charAt(0) === '.') {
            SELECTORS.classNames.push(items[i].substr(1));
        }
        else if (items[i].charAt(0) === '#') {
            SELECTORS.ids.push(items[i].substr(1));
        }
        else if (items[i].charAt(0) === '[') {
            items[i] = items[i]
                .substr(1)
                .split('=')[0]
                .split(']')[0]
                .trim();
            SELECTORS.attrs.push(items[i].toLowerCase());
        }
        else if (/[a-z]/g.test(items[i].charAt(0))) {
            SELECTORS.tags.push(items[i].toLowerCase());
        }
    }
    SELECTORS.classNames = SELECTORS.classNames.sort((a, b) => {
        if (a.length < b.length)
            return -1;
        if (a.length > b.length)
            return 1;
        return 0;
    });
    return SELECTORS;
};
const SELECTORS = {
    all: [],
    tags: [],
    classNames: [],
    ids: [],
    attrs: [],
};

const serializeCss = (stylesheet, serializeOpts) => {
    const usedSelectors = serializeOpts.usedSelectors || null;
    const opts = {
        usedSelectors: usedSelectors || null,
        hasUsedAttrs: !!usedSelectors && usedSelectors.attrs.size > 0,
        hasUsedClassNames: !!usedSelectors && usedSelectors.classNames.size > 0,
        hasUsedIds: !!usedSelectors && usedSelectors.ids.size > 0,
        hasUsedTags: !!usedSelectors && usedSelectors.tags.size > 0,
    };
    const rules = stylesheet.rules;
    if (!rules) {
        return '';
    }
    const rulesLen = rules.length;
    const out = [];
    for (let i = 0; i < rulesLen; i++) {
        out.push(serializeCssVisitNode(opts, rules[i], i, rulesLen));
    }
    return out.join('');
};
const serializeCssVisitNode = (opts, node, index, len) => {
    const nodeType = node.type;
    if (nodeType === 'declaration') {
        return serializeCssDeclaration(node, index, len);
    }
    if (nodeType === 'rule') {
        return serializeCssRule(opts, node);
    }
    if (nodeType === 'comment') {
        if (node.comment[0] === '!') {
            return `/*${node.comment}*/`;
        }
        else {
            return '';
        }
    }
    if (nodeType === 'media') {
        return serializeCssMedia(opts, node);
    }
    if (nodeType === 'keyframes') {
        return serializeCssKeyframes(opts, node);
    }
    if (nodeType === 'keyframe') {
        return serializeCssKeyframe(opts, node);
    }
    if (nodeType === 'font-face') {
        return serializeCssFontFace(opts, node);
    }
    if (nodeType === 'supports') {
        return serializeCssSupports(opts, node);
    }
    if (nodeType === 'import') {
        return '@import ' + node.import + ';';
    }
    if (nodeType === 'charset') {
        return '@charset ' + node.charset + ';';
    }
    if (nodeType === 'page') {
        return serializeCssPage(opts, node);
    }
    if (nodeType === 'host') {
        return '@host{' + serializeCssMapVisit(opts, node.rules) + '}';
    }
    if (nodeType === 'custom-media') {
        return '@custom-media ' + node.name + ' ' + node.media + ';';
    }
    if (nodeType === 'document') {
        return serializeCssDocument(opts, node);
    }
    if (nodeType === 'namespace') {
        return '@namespace ' + node.namespace + ';';
    }
    return '';
};
const serializeCssRule = (opts, node) => {
    const decls = node.declarations;
    const usedSelectors = opts.usedSelectors;
    const selectors = node.selectors.slice();
    if (decls == null || decls.length === 0) {
        return '';
    }
    if (usedSelectors) {
        let i;
        let j;
        let include = true;
        for (i = selectors.length - 1; i >= 0; i--) {
            const sel = getCssSelectors(selectors[i]);
            include = true;
            // classes
            let jlen = sel.classNames.length;
            if (jlen > 0 && opts.hasUsedClassNames) {
                for (j = 0; j < jlen; j++) {
                    if (!usedSelectors.classNames.has(sel.classNames[j])) {
                        include = false;
                        break;
                    }
                }
            }
            // tags
            if (include && opts.hasUsedTags) {
                jlen = sel.tags.length;
                if (jlen > 0) {
                    for (j = 0; j < jlen; j++) {
                        if (!usedSelectors.tags.has(sel.tags[j])) {
                            include = false;
                            break;
                        }
                    }
                }
            }
            // attrs
            if (include && opts.hasUsedAttrs) {
                jlen = sel.attrs.length;
                if (jlen > 0) {
                    for (j = 0; j < jlen; j++) {
                        if (!usedSelectors.attrs.has(sel.attrs[j])) {
                            include = false;
                            break;
                        }
                    }
                }
            }
            // ids
            if (include && opts.hasUsedIds) {
                jlen = sel.ids.length;
                if (jlen > 0) {
                    for (j = 0; j < jlen; j++) {
                        if (!usedSelectors.ids.has(sel.ids[j])) {
                            include = false;
                            break;
                        }
                    }
                }
            }
            if (!include) {
                selectors.splice(i, 1);
            }
        }
    }
    if (selectors.length === 0) {
        return '';
    }
    const cleanedSelectors = [];
    let cleanedSelector = '';
    for (const selector of node.selectors) {
        cleanedSelector = removeSelectorWhitespace(selector);
        if (!cleanedSelectors.includes(cleanedSelector)) {
            cleanedSelectors.push(cleanedSelector);
        }
    }
    return `${cleanedSelectors}{${serializeCssMapVisit(opts, decls)}}`;
};
const serializeCssDeclaration = (node, index, len) => {
    if (node.value === '') {
        return '';
    }
    if (len - 1 === index) {
        return node.property + ':' + node.value;
    }
    return node.property + ':' + node.value + ';';
};
const serializeCssMedia = (opts, node) => {
    const mediaCss = serializeCssMapVisit(opts, node.rules);
    if (mediaCss === '') {
        return '';
    }
    return '@media ' + removeMediaWhitespace(node.media) + '{' + mediaCss + '}';
};
const serializeCssKeyframes = (opts, node) => {
    const keyframesCss = serializeCssMapVisit(opts, node.keyframes);
    if (keyframesCss === '') {
        return '';
    }
    return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + keyframesCss + '}';
};
const serializeCssKeyframe = (opts, node) => {
    return node.values.join(',') + '{' + serializeCssMapVisit(opts, node.declarations) + '}';
};
const serializeCssFontFace = (opts, node) => {
    const fontCss = serializeCssMapVisit(opts, node.declarations);
    if (fontCss === '') {
        return '';
    }
    return '@font-face{' + fontCss + '}';
};
const serializeCssSupports = (opts, node) => {
    const supportsCss = serializeCssMapVisit(opts, node.rules);
    if (supportsCss === '') {
        return '';
    }
    return '@supports ' + node.supports + '{' + supportsCss + '}';
};
const serializeCssPage = (opts, node) => {
    const sel = node.selectors.join(', ');
    return '@page ' + sel + '{' + serializeCssMapVisit(opts, node.declarations) + '}';
};
const serializeCssDocument = (opts, node) => {
    const documentCss = serializeCssMapVisit(opts, node.rules);
    const doc = '@' + (node.vendor || '') + 'document ' + node.document;
    if (documentCss === '') {
        return '';
    }
    return doc + '{' + documentCss + '}';
};
const serializeCssMapVisit = (opts, nodes) => {
    let rtn = '';
    if (nodes) {
        for (let i = 0, len = nodes.length; i < len; i++) {
            rtn += serializeCssVisitNode(opts, nodes[i], i, len);
        }
    }
    return rtn;
};
const removeSelectorWhitespace = (selector) => {
    let rtn = '';
    let char = '';
    let inAttr = false;
    selector = selector.trim();
    for (let i = 0, l = selector.length; i < l; i++) {
        char = selector[i];
        if (char === '[' && rtn[rtn.length - 1] !== '\\') {
            inAttr = true;
        }
        else if (char === ']' && rtn[rtn.length - 1] !== '\\') {
            inAttr = false;
        }
        if (!inAttr && CSS_WS_REG.test(char)) {
            if (CSS_NEXT_CHAR_REG.test(selector[i + 1])) {
                continue;
            }
            if (CSS_PREV_CHAR_REG.test(rtn[rtn.length - 1])) {
                continue;
            }
            rtn += ' ';
        }
        else {
            rtn += char;
        }
    }
    return rtn;
};
const removeMediaWhitespace = (media) => {
    let rtn = '';
    let char = '';
    media = media.trim();
    for (let i = 0, l = media.length; i < l; i++) {
        char = media[i];
        if (CSS_WS_REG.test(char)) {
            if (CSS_WS_REG.test(rtn[rtn.length - 1])) {
                continue;
            }
            rtn += ' ';
        }
        else {
            rtn += char;
        }
    }
    return rtn;
};
const CSS_WS_REG = /\s/;
const CSS_NEXT_CHAR_REG = /[>\(\)\~\,\+\s]/;
const CSS_PREV_CHAR_REG = /[>\(\~\,\+]/;

const removeUnusedStyles = (doc, diagnostics) => {
    try {
        const styleElms = doc.head.querySelectorAll(`style[data-styles]`);
        const styleLen = styleElms.length;
        if (styleLen > 0) {
            // pick out all of the selectors that are actually
            // being used in the html document
            const usedSelectors = getUsedSelectors(doc.documentElement);
            for (let i = 0; i < styleLen; i++) {
                removeUnusedStyleText(usedSelectors, diagnostics, styleElms[i]);
            }
        }
    }
    catch (e) {
        catchError(diagnostics, e);
    }
};
const removeUnusedStyleText = (usedSelectors, diagnostics, styleElm) => {
    try {
        // parse the css from being applied to the document
        const parseResults = parseCss(styleElm.innerHTML);
        diagnostics.push(...parseResults.diagnostics);
        if (hasError(diagnostics)) {
            return;
        }
        try {
            // convert the parsed css back into a string
            // but only keeping what was found in our active selectors
            styleElm.innerHTML = serializeCss(parseResults.stylesheet, {
                usedSelectors,
            });
        }
        catch (e) {
            diagnostics.push({
                level: 'warn',
                type: 'css',
                header: 'CSS Stringify',
                messageText: e,
            });
        }
    }
    catch (e) {
        diagnostics.push({
            level: 'warn',
            type: 'css',
            header: 'CSS Parse',
            messageText: e,
        });
    }
};

const updateCanonicalLink = (doc, href) => {
    // https://webmasters.googleblog.com/2009/02/specify-your-canonical.html
    // <link rel="canonical" href="http://www.example.com/product.php?item=swedish-fish" />
    let canonicalLinkElm = doc.head.querySelector('link[rel="canonical"]');
    if (typeof href === 'string') {
        // have a valid href to add
        if (canonicalLinkElm == null) {
            // don't have a <link> element yet, create one
            canonicalLinkElm = doc.createElement('link');
            canonicalLinkElm.setAttribute('rel', 'canonical');
            doc.head.appendChild(canonicalLinkElm);
        }
        // set the href attribute
        canonicalLinkElm.setAttribute('href', href);
    }
    else {
        // don't have a href
        if (canonicalLinkElm != null) {
            // but there is a canonical link in the head so let's remove it
            const existingHref = canonicalLinkElm.getAttribute('href');
            if (!existingHref) {
                canonicalLinkElm.parentNode.removeChild(canonicalLinkElm);
            }
        }
    }
};

function renderToString(html, options) {
    const opts = normalizeHydrateOptions(options);
    opts.serializeToHtml = true;
    return new Promise(resolve => {
        const results = generateHydrateResults(opts);
        if (hasError(results.diagnostics)) {
            resolve(results);
        }
        else if (typeof html === 'string') {
            try {
                opts.destroyWindow = true;
                opts.destroyDocument = true;
                const win = new MockWindow(html);
                render(win, opts, results, resolve);
            }
            catch (e) {
                renderCatchError(results, e);
                resolve(results);
            }
        }
        else if (isValidDocument(html)) {
            try {
                opts.destroyDocument = false;
                const win = patchDomImplementation(html, opts);
                render(win, opts, results, resolve);
            }
            catch (e) {
                renderCatchError(results, e);
                resolve(results);
            }
        }
        else {
            renderBuildError(results, `Invalid html or document. Must be either a valid "html" string, or DOM "document".`);
            resolve(results);
        }
    });
}
function hydrateDocument(doc, options) {
    const opts = normalizeHydrateOptions(options);
    opts.serializeToHtml = false;
    return new Promise(resolve => {
        const results = generateHydrateResults(opts);
        if (hasError(results.diagnostics)) {
            resolve(results);
        }
        else if (typeof doc === 'string') {
            try {
                opts.destroyWindow = true;
                opts.destroyDocument = true;
                const win = new MockWindow(doc);
                render(win, opts, results, resolve);
            }
            catch (e) {
                renderCatchError(results, e);
                resolve(results);
            }
        }
        else if (isValidDocument(doc)) {
            try {
                opts.destroyDocument = false;
                const win = patchDomImplementation(doc, opts);
                render(win, opts, results, resolve);
            }
            catch (e) {
                renderCatchError(results, e);
                resolve(results);
            }
        }
        else {
            renderBuildError(results, `Invalid html or document. Must be either a valid "html" string, or DOM "document".`);
            resolve(results);
        }
    });
}
function render(win, opts, results, resolve) {
    if (!process.__stencilErrors) {
        process.__stencilErrors = true;
        process.on('unhandledRejection', e => {
            console.log('unhandledRejection', e);
        });
    }
    initializeWindow(win, opts, results);
    if (typeof opts.beforeHydrate === 'function') {
        try {
            const rtn = opts.beforeHydrate(win.document);
            if (isPromise(rtn)) {
                rtn.then(() => {
                    hydrateFactory(win, opts, results, afterHydrate, resolve);
                });
            }
            else {
                hydrateFactory(win, opts, results, afterHydrate, resolve);
            }
        }
        catch (e) {
            renderCatchError(results, e);
            finalizeHydrate(win, win.document, opts, results, resolve);
        }
    }
    else {
        hydrateFactory(win, opts, results, afterHydrate, resolve);
    }
}
function afterHydrate(win, opts, results, resolve) {
    if (typeof opts.afterHydrate === 'function') {
        try {
            const rtn = opts.afterHydrate(win.document);
            if (isPromise(rtn)) {
                rtn.then(() => {
                    finalizeHydrate(win, win.document, opts, results, resolve);
                });
            }
            else {
                finalizeHydrate(win, win.document, opts, results, resolve);
            }
        }
        catch (e) {
            renderCatchError(results, e);
            finalizeHydrate(win, win.document, opts, results, resolve);
        }
    }
    else {
        finalizeHydrate(win, win.document, opts, results, resolve);
    }
}
function finalizeHydrate(win, doc, opts, results, resolve) {
    try {
        inspectElement(results, doc.documentElement, 0);
        if (opts.removeUnusedStyles !== false) {
            try {
                removeUnusedStyles(doc, results.diagnostics);
            }
            catch (e) {
                renderCatchError(results, e);
            }
        }
        if (typeof opts.title === 'string') {
            try {
                doc.title = opts.title;
            }
            catch (e) {
                renderCatchError(results, e);
            }
        }
        results.title = doc.title;
        if (opts.removeScripts) {
            removeScripts(doc.documentElement);
        }
        try {
            updateCanonicalLink(doc, opts.canonicalUrl);
        }
        catch (e) {
            renderCatchError(results, e);
        }
        try {
            relocateMetaCharset(doc);
        }
        catch (e) { }
        if (!hasError(results.diagnostics)) {
            results.httpStatus = 200;
        }
        try {
            const metaStatus = doc.head.querySelector('meta[http-equiv="status"]');
            if (metaStatus != null) {
                const metaStatusContent = metaStatus.getAttribute('content');
                if (metaStatusContent && metaStatusContent.length > 0) {
                    results.httpStatus = parseInt(metaStatusContent, 10);
                }
            }
        }
        catch (e) { }
        if (opts.clientHydrateAnnotations) {
            doc.documentElement.classList.add('hydrated');
        }
        if (opts.serializeToHtml) {
            results.html = serializeDocumentToString(doc, opts);
        }
    }
    catch (e) {
        renderCatchError(results, e);
    }
    if (opts.destroyWindow) {
        try {
            if (!opts.destroyDocument) {
                win.document = null;
                doc.defaultView = null;
            }
            win.close();
        }
        catch (e) {
            renderCatchError(results, e);
        }
    }
    resolve(results);
}
function serializeDocumentToString(doc, opts) {
    return serializeNodeToHtml(doc, {
        approximateLineWidth: opts.approximateLineWidth,
        outerHtml: false,
        prettyHtml: opts.prettyHtml,
        removeAttributeQuotes: opts.removeAttributeQuotes,
        removeBooleanAttributeQuotes: opts.removeBooleanAttributeQuotes,
        removeEmptyAttributes: opts.removeEmptyAttributes,
        removeHtmlComments: opts.removeHtmlComments,
        serializeShadowRoot: false,
    });
}
function isValidDocument(doc) {
    return doc != null && doc.nodeType === 9 && doc.documentElement != null && doc.documentElement.nodeType === 1 && doc.body != null && doc.body.nodeType === 1;
}
function removeScripts(elm) {
    const children = elm.children;
    for (let i = children.length - 1; i >= 0; i--) {
        const child = children[i];
        removeScripts(child);
        if (child.nodeName === 'SCRIPT' || (child.nodeName === 'LINK' && child.getAttribute('rel') === 'modulepreload')) {
            child.remove();
        }
    }
}

exports.createWindowFromHtml = createWindowFromHtml;
exports.hydrateDocument = hydrateDocument;
exports.renderToString = renderToString;
exports.serializeDocumentToString = serializeDocumentToString;
