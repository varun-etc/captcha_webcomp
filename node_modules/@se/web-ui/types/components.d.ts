/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface SeAbout {
        /**
          * The title of your about screen.
         */
        "appTitle": string;
        /**
          * The copyright you would like to display.
         */
        "copyright": string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain": string;
        /**
          * Sets the background image for your about page.
         */
        "imageUrl": string;
        /**
          * The version number you want to display.
         */
        "version": string;
    }
    interface SeApp {
        /**
          * Define the type of application. updating the option will impact the font used. - `technical`: For technical application (i.e. EcoStuxure), the font used will be `Nunito`. - `website` or `dcx`: For `se.com` application, the font used will be `Arial Rounded`.
         */
        "option": "technical" | "website" | "dcx";
    }
    interface SeAuthentication {
        /**
          * The title of your authentication screen.
         */
        "appTitle": string;
        /**
          * The copyright you would like to display.
         */
        "copyright": string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain": string;
        /**
          * If set to `true`, this will hide the authentication screen.
         */
        "hide": boolean;
        /**
          * Sets the background image for your authentication screen.
         */
        "imageUrl": string;
        /**
          * The version number you want to display.
         */
        "version": string;
    }
    interface SeBanner {
        /**
          * Set the duration (in ms) that the banner will automatically switch slides. Default is `6000`.
         */
        "duration": number;
    }
    interface SeBannerItem {
        /**
          * Indicates the active banner item in your banner component.
         */
        "active": boolean;
        /**
          * Sets the background image for your banner item.
         */
        "imageUrl": string;
    }
    interface SeBlock {
        /**
          * Defines the se-block item's ability to appear clickable / selectable. Default setting is `false`, resulting in no hover effects on the block level. `true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block.
         */
        "clickable": boolean;
        /**
          * Defines clickable se-block item's bar on hover. Default setting is `false`. `true` renders a `$se-life-green` colored bar on a hover.
         */
        "clickableBar": boolean;
        /**
          * Optional property that defines the background color of the block. Default setting is `alternative`, rendering the "alternative" theme background. `none` has no background. `standard` renders the "standard" theme background.
         */
        "color": "none" | "standard" | "alternative";
        /**
          * Defines the se-block corner radius. Default setting is `small`, rendering a rounded, 4px rounded corner. `none` is for a sharp, 90 degree corner. `nano` is for a slightly rounded, 2px rounded corner.
         */
        "corner": "none" | "nano" | "small";
        /**
          * Defines how to display the element. `flex` is the default display. `block` helps in specific cases. Make sure you know what you are doing.
         */
        "display": "flex" | "block" | "grid";
        /**
          * Defines whether or not a divider will be applied to the se-block header and footer. `true` will add a divider to the se-block-header and se-block-footer, if they are present. `false` will remove dividers on the se-block header and se-block-footer, if they are present.
         */
        "divider": boolean;
        /**
          * When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item. Default setting is `false`, spanning 1 row and 1 column (1/1). `true` spans 2 rows and 2 columns (2/2). `vertical` spans 2 rows (2/1). `horizontal` spans 2 columns (1/2).
         */
        "enlarged": "vertical" | "horizontal" | boolean;
        /**
          * Defines the specific height of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "height": string;
        /**
          * Displays the loading icon if set to `true`.  Default setting is `false`.
         */
        "loading": boolean;
        /**
          * Defines the spacing around the outside edge of a block. Default `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "margin": "none" | "small" | "medium" | "large" | "xlarge";
        /**
          * Defines the visual appearance of a block. Default setting is `basic`, which will remove any spacing. `widget` will create a flat widget look and feel with a `medium` margin around it. `card` will create a card look and feel with rounded corners, and with a `large` margin around it. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         */
        "option": "basic" | "card" | "card-old" | "widget";
        /**
          * Defines the se-block outline. Default setting is `false`. Setting this property to `true` will add a 1px border.
         */
        "outline": boolean;
        /**
          * Defines the se-block outline color. Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color. `primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected. `secondary` defines the outline color as `$se-sky-blue`.
         */
        "outlineColor": "standard" | "secondary" | "primary";
        /**
          * Defines the specific width of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "width": string;
    }
    interface SeBlockContent {
        /**
          * The block-content component will add 8px padding on the top and bottom, and 16px padding on the left and right by default. When the option is set to `fill`, the content will fill the whole space of the block-content with no padding.
         */
        "option": "card" | "widget" | "basic" | "fill";
    }
    interface SeBlockFooter {
        /**
          * Defines the direction of the flex element. Default setting is `row`. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction": "row" | "column";
        /**
          * Defines whether or not a divider will be applied to the se-block-footer. The se-block component's divider property will be applied to the se-block-footer component.
         */
        "divider": boolean;
        /**
          * Defines the visual appearance of a footer. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the footer with respect to the card design.
         */
        "option": "card" | "widget" | "basic";
    }
    interface SeBlockHeader {
        /**
          * Defines whether or not a divider will be applied to the se-block-header. The se-block component's divider property will be applied to the se-block-header component.
         */
        "divider": boolean;
        /**
          * Defines the visual appearance of a header. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the header with respect to the card design. `fill` removes all spacing, for example with use of the `se-tabbar` option `content`.
         */
        "option": "card" | "widget" | "basic" | "fill";
    }
    interface SeBreadcrumb {
    }
    interface SeBreadcrumbItem {
        /**
          * Indicates the URL you wish to navigate to when clicking on your breadcrumb item.
         */
        "href": string;
        /**
          * Indicates whether or not the breadcrumb item should be selected.  The default setting is `false`.
         */
        "isLast": boolean;
    }
    interface SeButton {
        /**
          * Optional property that defines if the button displays as a block in it's container. When set to true, the button will be as wide as its container.
         */
        "block": boolean;
        /**
          * Optional property that defines if the button has a caption or tooltip text.
         */
        "caption": string;
        /**
          * Defines the background color of the button. The default setting is `standard`.
         */
        "color": "standard" | "alternative" | "primary" | "secondary";
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Optional property that determines if your button includes an icon.
         */
        "icon": string;
        /**
          * Optional property to change the color of the icon when needed. For example, the user dropdown in the header component.
         */
        "iconColor": "standard" | "alternative" | "primary" | "secondary";
        /**
          * Property to specify if the button should only display an icon (no extra spacing).
         */
        "iconOnly": boolean;
        /**
          * Defines the visual appearance of the button. `flat` is the default option, which includes a gray background. `raised` adds a box shadow to the button. `outline` adds a border to the button. `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application.
         */
        "option": "flat" | "raised" | "outline" | "login" | "signup" | "inherit" | "fab" | "minifab";
        /**
          * Optional property that defines if the button should be shown as selected. Used with the `se-radio-group` component.
         */
        "selected": boolean;
        /**
          * Sets the disabled property for your button from the parent component.
          * @param val set to `true` or `false`.
         */
        "setDisabled": (val: boolean) => Promise<void>;
        /**
          * Indicates if the button is part of a group of buttons within the `se-radio-group` component.
         */
        "setGrouped": () => Promise<void>;
        /**
          * Defines the size of the button. `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component. `small` is the default option, with a 14px font and a 32px height. `medium` sets the font to 16px and the height to 40px. `large` sets the font to 18px and the height to 48px.
         */
        "size": "nano" | "small" | "medium" | "large";
        /**
          * Optional property. `button`	is the default setting, creating a clickable button. `submit`	creates a "submit" button (useful to submit form-data). `reset`	creates a reset button (useful to reset form-data to its initial values).
         */
        "type": "button" | "submit" | "reset";
        /**
          * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
         */
        "value": string;
    }
    interface SeCheckbox {
        /**
          * Defines the color schema of the checkbox when the option is set to `onoff`. The default value is `standard`.
         */
        "background": "standard" | "alternative";
        /**
          * Defines the color of the checkbox for when the option is set to `checkbox` or `switch`. The default value is `success`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color": "primary" | "secondary" | "success";
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Reduces the visual height of the checkbox when the option is set to `onoff`. Useful if the on/off checkbox is within a header element.
         */
        "header": boolean;
        /**
          * The label of the checkbox that will be attached to the box.
         */
        "label": string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right` when the option is set to `checkbox`. The default setting is `left` when the option is set to `switch`.
         */
        "labelPos": "left" | "right";
        /**
          * Determines the visual appearance of the component. `checkbox` is the default option, which will render the component like a standard HTML checkbox. `switch` renders the component like a toggle switch. `onoff` renders the component like an "on/off" switch, with a red "off" button and a green "on" button.
         */
        "option": "checkbox" | "onoff" | "switch";
        /**
          * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
         */
        "required": boolean;
        /**
          * The "checked" state of the checkbox, `false` by default.
         */
        "selected": boolean;
        /**
          * Sets the required property on the checkbox element.  Used when the checkbox is within a form field.
         */
        "setRequired": () => Promise<void>;
        /**
          * Defines the text the user will see for the "off" or "inactive" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default.
         */
        "textOff": string;
        /**
          * Defines the text the user will see for the "on" or "active" part of the checkbox when option is set to `onoff`.  Set to `ON` by default.
         */
        "textOn": string;
        /**
          * The value you want to pass to the parent component when the checkbox is checked.
         */
        "value": string;
    }
    interface SeChip {
        /**
          * Optional property that defines if the chip displays as a block in it's container. When set to true, the chip will be as wide as its container.
         */
        "block": boolean;
        /**
          * Indicates whether or not the chip has a close button.  Set to `false` by default.
         */
        "canClose": boolean;
        /**
          * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
         */
        "color": "standard" | "alternative";
        /**
          * Indicates whether or not the chip is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Indicates whether or not the chip is selected.  Set to `false` by default.
         */
        "selected": boolean;
        /**
          * Defines the size of the chip. `nano` sets the font to 14px and the height to 24px. `small` is the default option, with a 16px font and a 32px height.
         */
        "size": "nano" | "small";
        /**
          * The text you want to display in your chip.
         */
        "value": string;
    }
    interface SeContainer {
        /**
          * Defines the background color of the container. `none` has no background. `standard` is `se-background`, light gray. `alternative` is a white background.
         */
        "color": "none" | "standard" | "alternative";
        /**
          * When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there. Default is `350px`.
         */
        "columnSize": string;
        /**
          * Defines the direction of the flex element. `row` is the default direction. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction": "column" | "row";
        /**
          * Defines how to display the element. `flex` is the default display. `block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block".
         */
        "display": "flex" | "block" | "grid";
        /**
          * Defines the inner appearance of a container. `fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set. `widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set. `centered` centers the container so the content does not exceed a maximum width. `card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated. `inherited` will insure that no specific style is applied to the container.
         */
        "option": "fill" | "widget" | "card" | "card-old" | "centered" | "inherited";
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "padding": "none" | "small" | "medium" | "large" | "xlarge";
        /**
          * In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box. `relative` is the default position. This is perfect to use with flex content. `absolute` is useful in specific cases. Make sure you know what you are doing.
         */
        "position": "relative" | "absolute";
        /**
          * When in `display="grid"`, defines the height of each container.  Default is `300px`.
         */
        "rowSize": string;
    }
    interface SeDialog {
        /**
          * Emit the `backdrop` event from the dialog's parent component if `canBackdrop=true`. When the event is emitted, the dialog is automatically closed.
         */
        "backdropClicked": () => Promise<void>;
        /**
          * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`.
         */
        "canBackdrop": boolean;
        /**
          * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema and default setting.
         */
        "color": "alternative" | "primary";
        /**
          * Indicates whether or not the dialog is open or closed.  Default setting is `false`.
         */
        "open": boolean;
        /**
          * Defines the size of the modal. `small`: used in alerts and messages `medium`: default setting, used by other apps `fill`: takes the full space of the screen
         */
        "size": "small" | "medium" | "large" | "fill";
    }
    interface SeDialogContent {
        /**
          * Indicates an icon you want to display in your dialog.
         */
        "icon": string;
        /**
          * Indicates what color schema you want to render in your dialog.
         */
        "iconColor": "standard" | "alternative" | "primary" | "secondary";
        /**
          * When set to `fill`, the content will fill the whole space of the dialog.
         */
        "option": "fill";
    }
    interface SeDialogFooter {
    }
    interface SeDialogHeader {
        /**
          * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text. `primary`: Primary color schema.
         */
        "color": "primary" | "alternative";
    }
    interface SeDivider {
        /**
          * Indicates the color schema of your divider line. Default setting is `standard`, rendering a light gray colored line. The `alternative` property sets a white colored divider line.
         */
        "color": "standard" | "alternative";
        /**
          * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
         */
        "option": "horizontal" | "vertical" | "inset";
    }
    interface SeDropdown {
        /**
          * Defines how to align the dropdown container. `right`: Position the container with respect to the right side of the trigger element. `left`: Position the container with respect to the left side of the trigger element.
         */
        "alignment": "right" | "left";
        /**
          * Method to close the dropdown from outside its parent element.
         */
        "close": () => Promise<void>;
        /**
          * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        "maxHeight": string;
        /**
          * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        "maxWidth": string;
        /**
          * Method to open the dropdown from outside its parent element.
         */
        "open": () => Promise<void>;
        /**
          * Defines how to vertically align the dropdown container. `top`: Position the container with respect to the top side of the trigger element. `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        "verticalAlignment": "top" | "bottom";
    }
    interface SeFab {
        /**
          * Indicates the color of your main action button . The Default setting is `primary`, rendering a green background. The `alternative` setting renders a white background.
         */
        "color": "primary" | "alternative";
        /**
          * Property that determines if an icon is included in the main action button.
         */
        "icon": string;
        /**
          * Property that determines the functionality of the FAB. The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB. The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB.
         */
        "option": "speeddial" | "backtotop";
        /**
          * Property that determines the position of the component. The default setting is `bottom`, rendering a FAB at the bottom right corner. The `top` setting renders the FAB at the top right corner.
         */
        "position": "bottom" | "top";
        /**
          * Use this method to toggle (show/hide) the mini action buttons.
         */
        "toggleAction": () => Promise<void>;
    }
    interface SeFabItem {
        /**
          * Property that determines if an icon is included in the floating action button.
         */
        "icon": string;
    }
    interface SeFormField {
        /**
          * Optional property that defines if the field displays as a block in it's container. When set to true, the field will be as wide as its container. both field label auto adjust when it set to inline
         */
        "block": boolean;
        /**
          * Optional property that defines if the form field is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Defines the text value of the label in your form field.
         */
        "label": string;
        /**
          * Optional property to define the proportion of the label width. The content (input) will take the rest of if. Defaulted to 40%
         */
        "labelWidth": string;
        /**
          * Defines the layout of your form field. `inline` is the default option, and is always applied if the type is set to `checkbox`.  This sets the input or select field adjacent to the label. `stacked` option will render the input or select field below the label.
         */
        "option": "inline" | "stacked";
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px.
         */
        "padding": "none" | "small" | "medium";
        /**
          * Determines if the input is required by the application. Set to `false` by default. Setting this value to `true` will render a red asterisk next to your label.
         */
        "required": boolean;
        /**
          * Sets a red border on an input field if there's an error, an orange border if there's a warning, and a green border if a successful input.
         */
        "status": "error" | "warning" | "success";
        /**
          * Defines whether the form field's input is a text field (`input`), a checkbox (`checkbox`), a radio button (`radio`), or a dropdown menu (`select`). `input` is the default type.
         */
        "type": "input" | "checkbox" | "radio" | "select";
        /**
          * Defines the value of your form field to get passed to the parent component. When the type is set to "input", this value will be the default placeholder in your input field.
         */
        "value": string;
    }
    interface SeHeader {
        /**
          * Sets the title of your application.
         */
        "appTitle": string;
        /**
          * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
         */
        "domain": string;
        /**
          * Defines the project name (useful for small projects) that can be used for versioning as well. It will be placed at the right side of the title.
         */
        "project": string;
    }
    interface SeIcon {
        /**
          * Optional property that defines the background color of the button. The default color will be inherited from its parent.
         */
        "color": "standard" | "alternative" | "primary" | "secondary" | "success" | "warning" | "error";
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Optional property to define if the icon should act as a button (clickable).
         */
        "option": "button";
        /**
          * Defines the size of an icon. `nano` sets the size to 14px. `small` sets the size to 24px.(default setting) `medium` sets the size to 32px. `large` sets the size to 52px. `xlarge` sets the size to 62px.
         */
        "size": "nano" | "small" | "medium" | "large" | "xlarge";
    }
    interface SeIconEcostruxure {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color": "standard" | "inherited";
        /**
          * Sets the size of the EcoStruxure icon.  The default setting is `small`.
         */
        "size": "small" | "medium";
    }
    interface SeIconLifeison {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color": "standard" | "inherited";
    }
    interface SeIconSchneider {
    }
    interface SeLink {
        /**
          * Determines whether or not the link is disabled.
         */
        "disabled": boolean;
        /**
          * Adds visual and function properties to your link component. The default setting is `internal`, which redirects you to the specified URL in the same page. The `external` setting adds an underline and ">" icon to the link, and opens the link in a new web browser tab.
         */
        "option": "internal" | "external";
        /**
          * Defines the url the user should get redirected to when clicking on the link.
         */
        "url": string;
    }
    interface SeList {
        /**
          * Defines if list groups can be collapsed.  The default setting is `true`.
         */
        "canCollapse": boolean;
        /**
          * Defines the style of the list.  The default setting is `classic`.
         */
        "option": "nav" | "classic" | "dropdown" | "treeview" | "headline";
    }
    interface SeListGroup {
        /**
          * Defines if list groups can be collapsed, true by default.
         */
        "canCollapse": boolean;
        /**
          * Defines if the item group is collapsed/closed. The default setting is `false`.
         */
        "collapsed": boolean;
        /**
          * Defines the description of the item, placed under its title.
         */
        "description": string;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon": string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor": "primary" | "secondary";
        /**
          * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        "indentation": number;
        /**
          * Defines the title of the item.
         */
        "item": string;
        /**
          * Defines the style of the list. The default setting is `classic`, and the style will be handled and modified by the parent element.
         */
        "option": "nav" | "classic" | "dropdown" | "treeview" | "headline";
        /**
          * Defines if the list group should be displayed as selected (if one of its child elements is selected when collapsed).
         */
        "selected": boolean;
        "selectedChild": boolean;
    }
    interface SeListItem {
        /**
          * Defines the description of the item, placed under its title.
         */
        "description": string;
        /**
          * Determines if se-item configures an `a` tag with an `href` attibute. Default when href is blank configures as a `button` tag.
         */
        "href": string;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon": string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor": "standard" | "alternative" | "primary" | "secondary" | "success" | "warning" | "error";
        /**
          * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        "indentation": number;
        /**
          * Defines the title of the item.
         */
        "item": string;
        /**
          * Defines the style of the list. The default setting is `classic`, and the style will be handled and modified by the parent element.
         */
        "option": "nav" | "classic" | "dropdown" | "treeview" | "headline";
        /**
          * Defines if the list element should be selected or not.
         */
        "selected": boolean;
    }
    interface SeLoading {
        /**
          * Displays the loading icon on screen when set to `true`.
         */
        "loading": boolean;
        /**
          * Defines the visual display of the loader. `standard` is the default option, and displays a spinning green circle. `dialog` gives the loading icon a look-and-feel that it is within a popup dialog box.
         */
        "option": "standard" | "dialog";
    }
    interface SeRadio {
        /**
          * Defines the color of the checkbox. The default setting is `primary`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color": "primary" | "secondary";
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Defines the label that will display next to the radio button.
         */
        "label": string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right`.
         */
        "labelPos": "left" | "right";
        /**
          * Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`.
         */
        "required": boolean;
        /**
          * Determines whether or not the checkbox is checked when you initialize it.  The default setting is `false`.  Checked if set to `true`.
         */
        "selected": boolean;
        /**
          * Sets the required property on the radio button element.
         */
        "setRequired": () => Promise<void>;
        /**
          * Defines the value you want to pass to the parent component when the radio button is checked.
         */
        "value": string;
    }
    interface SeRadioGroup {
        /**
          * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
         */
        "color": "standard" | "alternative" | "primary" | "secondary";
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled": boolean;
        /**
          * Defines the height of each button in the group. `small` is the default setting, rendering a 32px height and a 14px font size. `nano` sets the height to 24px and the font size to 12px.
         */
        "size": "small" | "nano";
        /**
          * Defines the selected values of the array.
         */
        "value": string;
    }
    interface SeSidemenu {
        /**
          * Defines the text displayed in the header of the Sidemenu. The default value is `Menu`.
         */
        "label": string;
        "link": string;
        /**
          * Toggle the sidemenu. Optionally, pass the `item` or `id` of a sidemenu-item to open that particular menu item.  ex: `document.getElementById("main-sidemenu").toggle("side-about");`
         */
        "toggle": (itemName?: string) => Promise<void>;
    }
    interface SeSidemenuItem {
        /**
          * Defines if the menu item is active or not. The default setting is `false`.
         */
        "active": boolean;
        /**
          * Defines the title of the menu item.
         */
        "item": string;
    }
    interface SeSlider {
        /**
          * Indicates if your slider is disabled. The default setting is `false`.
         */
        "disabled": boolean;
        /**
          * The label of the slider that will be attached to the input.
         */
        "label": string;
        /**
          * Indicates the maximum value of your slider. The default value is `100`.
         */
        "max": number;
        /**
          * Indicates the minimum value of your slider. The default value is `0`.
         */
        "min": number;
        /**
          * Sets the disabled property for slider component.
          * @param val : boolean, `true` or `false`.
         */
        "setDisabled": (val: boolean) => Promise<void>;
        /**
          * Indicates the initial value of your slider component when it loads. The default value is `0`.
         */
        "value": any;
    }
    interface SeSnackbar {
        /**
          * Defines the text you want your custom action button to read.
         */
        "actionText": string;
        /**
          * Displays a "button" to close the snackbar. The default setting is `false`. This will be visible if set to `true`.
         */
        "canClose": boolean;
        /**
          * Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false. The default setting is 5000.
         */
        "duration": number;
        /**
          * The name of the icon you wish to display.  The default icon is an information circle.
         */
        "icon": string | "none";
        /**
          * The content of the message you want the snackbar to display.
         */
        "message": string;
        /**
          * Indicates if the snackbar is open.  Set to `false` (closed) by default.
         */
        "open": boolean;
        /**
          * Indicates the background color of your snackbar. `success`: green `warning`: orange `error`: red `information`: dark grey, default setting
         */
        "type": "success" | "error" | "warning" | "information";
    }
    interface SeStepper {
        /**
          * Sets the background color of your stepper. The default setting is `primary`, implementing a green background for the stepper visual items. The `alternative` setting implements a white background for the stepper visual items.  This setting is best used against a gray background.
         */
        "color": "primary" | "alternative";
        /**
          * Defines if the stepper items must be completed sequentially. The default setting is `true`, each stepper item must be validated before advancing to the next step. `false` allows each step to be selected in any order.
         */
        "linear": boolean;
        /**
          * Call the `next` method to navigate to the next step from the step that is currently selected. This will not work in linear mode if the next step is not validated.
         */
        "next": (validate: boolean) => Promise<void>;
        /**
          * Call the `previous` method to navigate to the previous step from the step that is currently selected.
         */
        "previous": () => Promise<void>;
        /**
          * Call the `reset` method to reset the stepper to the indicated step.  This also invalidates any validated steps. It no step parameter is provided, it will reset to the first stepper item.
         */
        "reset": (step?: number) => Promise<void>;
    }
    interface SeStepperItem {
        /**
          * Indicates the content for the currently selected step in the stepper.
         */
        "active": boolean;
        /**
          * Indicates the label for your stepper item.
         */
        "label": string;
        /**
          * Indicates whether a required item's data has been validated.  Useful if using a form field. When the stepper component is set to linear mode, all stepper items will need to be validated before advancing the stpper.
         */
        "validated": boolean;
    }
    interface SeTabbar {
        /**
          * Indicates the color of your tab bar. Default setting is `primary`, rendering a green background for nav-bars and ultra-light-grey-1 for content. The `alternative` setting renders a white background.
         */
        "color": "primary" | "alternative";
        /**
          * Defines the function of the tabbar. Default `nav` creates a tab bar that functions as a nav-bar. `content` creates a ta bbar that functions as a content section tab bar.
         */
        "option": "nav" | "content";
        /**
          * Indicates the overflow behavior of your tab bar. Default setting is `scroll`, keeping all tabs in one horizontal row. The `stack` setting allows your tabbar content wrap to new lines. The `compact` setting allows your tabbar content to scroll, but all stack the text together as much as possible.
         */
        "overflow": "compact" | "stack" | "scroll";
    }
    interface SeTable {
    }
    interface SeTableGroup {
        /**
          * Indicates whether or not the `se-table-group` is selectable.  Set to `false` by default.
         */
        "selectable": boolean;
        /**
          * Indicates whether or not the `se-table-group` is selected.  Set to `false` by default.
         */
        "selected": boolean;
    }
    interface SeTableGroupHeader {
    }
    interface SeTableItem {
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable": boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex": string;
        /**
          * Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth": string;
        "option": "dropdown" | "text" | "custom";
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width": string;
    }
    interface SeTableItemHeader {
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable": boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex": string;
        /**
          * Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth": string;
        /**
          * Optional property that provides the arrow icon based on which string is provided, and also causes the `clickable` property to `true`. `asc` defines the icon as an upwards arrow in black. `desc` defines the icon as a downwards arrow in black. `none` defines the icon as an upwards arrow in grey.
         */
        "sort": "asc" | "desc" | "none";
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width": string;
    }
    interface SeTooltip {
        /**
          * Indicates the action of your tooltip. The default setting is `hover`, triggering the tooltip when hovering over the parent element. The `click` action triggers the tooltip when you click on the parent element.
         */
        "action": "click" | "hover";
        /**
          * Method to close the tooltip separate from hovering or clicking the parent element.
         */
        "close": () => Promise<void>;
        /**
          * Method to open the tooltip separate from hovering or clicking the parent element.
         */
        "open": () => Promise<void>;
        /**
          * Indicates the position of your tooltip. The default setting is `bottom`, rendering the tooltip below its parent.
         */
        "position": "top" | "bottom" | "left" | "right";
    }
    interface SeTooltipContent {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon": string;
    }
    interface SeTooltipFooter {
    }
    interface SeTooltipHeader {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon": string;
    }
    interface SeVisualLinear {
        /**
          * Defines the text value of the label in your component.
         */
        "label": string;
        /**
          * Defines the layout of your component. `inline` is the default option.  This sets the "progress bar" adjacent to the label. `stacked` option will render the "progress bar" below the label.
         */
        "option": "inline" | "stacked";
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage": number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor": string;
        /**
          * Defines the value of your component.
         */
        "value": string;
    }
    interface SeVisualRadial {
        /**
          * Defines the text value of the label in your component.
         */
        "label": string;
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage": number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor": string;
        /**
          * Determines the visual size of your circular progress bar.  The default setting is `large`.
         */
        "size": "small" | "large";
        /**
          * Defines the value of your component.
         */
        "value": string;
    }
}
declare global {
    interface HTMLSeAboutElement extends Components.SeAbout, HTMLStencilElement {
    }
    var HTMLSeAboutElement: {
        prototype: HTMLSeAboutElement;
        new (): HTMLSeAboutElement;
    };
    interface HTMLSeAppElement extends Components.SeApp, HTMLStencilElement {
    }
    var HTMLSeAppElement: {
        prototype: HTMLSeAppElement;
        new (): HTMLSeAppElement;
    };
    interface HTMLSeAuthenticationElement extends Components.SeAuthentication, HTMLStencilElement {
    }
    var HTMLSeAuthenticationElement: {
        prototype: HTMLSeAuthenticationElement;
        new (): HTMLSeAuthenticationElement;
    };
    interface HTMLSeBannerElement extends Components.SeBanner, HTMLStencilElement {
    }
    var HTMLSeBannerElement: {
        prototype: HTMLSeBannerElement;
        new (): HTMLSeBannerElement;
    };
    interface HTMLSeBannerItemElement extends Components.SeBannerItem, HTMLStencilElement {
    }
    var HTMLSeBannerItemElement: {
        prototype: HTMLSeBannerItemElement;
        new (): HTMLSeBannerItemElement;
    };
    interface HTMLSeBlockElement extends Components.SeBlock, HTMLStencilElement {
    }
    var HTMLSeBlockElement: {
        prototype: HTMLSeBlockElement;
        new (): HTMLSeBlockElement;
    };
    interface HTMLSeBlockContentElement extends Components.SeBlockContent, HTMLStencilElement {
    }
    var HTMLSeBlockContentElement: {
        prototype: HTMLSeBlockContentElement;
        new (): HTMLSeBlockContentElement;
    };
    interface HTMLSeBlockFooterElement extends Components.SeBlockFooter, HTMLStencilElement {
    }
    var HTMLSeBlockFooterElement: {
        prototype: HTMLSeBlockFooterElement;
        new (): HTMLSeBlockFooterElement;
    };
    interface HTMLSeBlockHeaderElement extends Components.SeBlockHeader, HTMLStencilElement {
    }
    var HTMLSeBlockHeaderElement: {
        prototype: HTMLSeBlockHeaderElement;
        new (): HTMLSeBlockHeaderElement;
    };
    interface HTMLSeBreadcrumbElement extends Components.SeBreadcrumb, HTMLStencilElement {
    }
    var HTMLSeBreadcrumbElement: {
        prototype: HTMLSeBreadcrumbElement;
        new (): HTMLSeBreadcrumbElement;
    };
    interface HTMLSeBreadcrumbItemElement extends Components.SeBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLSeBreadcrumbItemElement: {
        prototype: HTMLSeBreadcrumbItemElement;
        new (): HTMLSeBreadcrumbItemElement;
    };
    interface HTMLSeButtonElement extends Components.SeButton, HTMLStencilElement {
    }
    var HTMLSeButtonElement: {
        prototype: HTMLSeButtonElement;
        new (): HTMLSeButtonElement;
    };
    interface HTMLSeCheckboxElement extends Components.SeCheckbox, HTMLStencilElement {
    }
    var HTMLSeCheckboxElement: {
        prototype: HTMLSeCheckboxElement;
        new (): HTMLSeCheckboxElement;
    };
    interface HTMLSeChipElement extends Components.SeChip, HTMLStencilElement {
    }
    var HTMLSeChipElement: {
        prototype: HTMLSeChipElement;
        new (): HTMLSeChipElement;
    };
    interface HTMLSeContainerElement extends Components.SeContainer, HTMLStencilElement {
    }
    var HTMLSeContainerElement: {
        prototype: HTMLSeContainerElement;
        new (): HTMLSeContainerElement;
    };
    interface HTMLSeDialogElement extends Components.SeDialog, HTMLStencilElement {
    }
    var HTMLSeDialogElement: {
        prototype: HTMLSeDialogElement;
        new (): HTMLSeDialogElement;
    };
    interface HTMLSeDialogContentElement extends Components.SeDialogContent, HTMLStencilElement {
    }
    var HTMLSeDialogContentElement: {
        prototype: HTMLSeDialogContentElement;
        new (): HTMLSeDialogContentElement;
    };
    interface HTMLSeDialogFooterElement extends Components.SeDialogFooter, HTMLStencilElement {
    }
    var HTMLSeDialogFooterElement: {
        prototype: HTMLSeDialogFooterElement;
        new (): HTMLSeDialogFooterElement;
    };
    interface HTMLSeDialogHeaderElement extends Components.SeDialogHeader, HTMLStencilElement {
    }
    var HTMLSeDialogHeaderElement: {
        prototype: HTMLSeDialogHeaderElement;
        new (): HTMLSeDialogHeaderElement;
    };
    interface HTMLSeDividerElement extends Components.SeDivider, HTMLStencilElement {
    }
    var HTMLSeDividerElement: {
        prototype: HTMLSeDividerElement;
        new (): HTMLSeDividerElement;
    };
    interface HTMLSeDropdownElement extends Components.SeDropdown, HTMLStencilElement {
    }
    var HTMLSeDropdownElement: {
        prototype: HTMLSeDropdownElement;
        new (): HTMLSeDropdownElement;
    };
    interface HTMLSeFabElement extends Components.SeFab, HTMLStencilElement {
    }
    var HTMLSeFabElement: {
        prototype: HTMLSeFabElement;
        new (): HTMLSeFabElement;
    };
    interface HTMLSeFabItemElement extends Components.SeFabItem, HTMLStencilElement {
    }
    var HTMLSeFabItemElement: {
        prototype: HTMLSeFabItemElement;
        new (): HTMLSeFabItemElement;
    };
    interface HTMLSeFormFieldElement extends Components.SeFormField, HTMLStencilElement {
    }
    var HTMLSeFormFieldElement: {
        prototype: HTMLSeFormFieldElement;
        new (): HTMLSeFormFieldElement;
    };
    interface HTMLSeHeaderElement extends Components.SeHeader, HTMLStencilElement {
    }
    var HTMLSeHeaderElement: {
        prototype: HTMLSeHeaderElement;
        new (): HTMLSeHeaderElement;
    };
    interface HTMLSeIconElement extends Components.SeIcon, HTMLStencilElement {
    }
    var HTMLSeIconElement: {
        prototype: HTMLSeIconElement;
        new (): HTMLSeIconElement;
    };
    interface HTMLSeIconEcostruxureElement extends Components.SeIconEcostruxure, HTMLStencilElement {
    }
    var HTMLSeIconEcostruxureElement: {
        prototype: HTMLSeIconEcostruxureElement;
        new (): HTMLSeIconEcostruxureElement;
    };
    interface HTMLSeIconLifeisonElement extends Components.SeIconLifeison, HTMLStencilElement {
    }
    var HTMLSeIconLifeisonElement: {
        prototype: HTMLSeIconLifeisonElement;
        new (): HTMLSeIconLifeisonElement;
    };
    interface HTMLSeIconSchneiderElement extends Components.SeIconSchneider, HTMLStencilElement {
    }
    var HTMLSeIconSchneiderElement: {
        prototype: HTMLSeIconSchneiderElement;
        new (): HTMLSeIconSchneiderElement;
    };
    interface HTMLSeLinkElement extends Components.SeLink, HTMLStencilElement {
    }
    var HTMLSeLinkElement: {
        prototype: HTMLSeLinkElement;
        new (): HTMLSeLinkElement;
    };
    interface HTMLSeListElement extends Components.SeList, HTMLStencilElement {
    }
    var HTMLSeListElement: {
        prototype: HTMLSeListElement;
        new (): HTMLSeListElement;
    };
    interface HTMLSeListGroupElement extends Components.SeListGroup, HTMLStencilElement {
    }
    var HTMLSeListGroupElement: {
        prototype: HTMLSeListGroupElement;
        new (): HTMLSeListGroupElement;
    };
    interface HTMLSeListItemElement extends Components.SeListItem, HTMLStencilElement {
    }
    var HTMLSeListItemElement: {
        prototype: HTMLSeListItemElement;
        new (): HTMLSeListItemElement;
    };
    interface HTMLSeLoadingElement extends Components.SeLoading, HTMLStencilElement {
    }
    var HTMLSeLoadingElement: {
        prototype: HTMLSeLoadingElement;
        new (): HTMLSeLoadingElement;
    };
    interface HTMLSeRadioElement extends Components.SeRadio, HTMLStencilElement {
    }
    var HTMLSeRadioElement: {
        prototype: HTMLSeRadioElement;
        new (): HTMLSeRadioElement;
    };
    interface HTMLSeRadioGroupElement extends Components.SeRadioGroup, HTMLStencilElement {
    }
    var HTMLSeRadioGroupElement: {
        prototype: HTMLSeRadioGroupElement;
        new (): HTMLSeRadioGroupElement;
    };
    interface HTMLSeSidemenuElement extends Components.SeSidemenu, HTMLStencilElement {
    }
    var HTMLSeSidemenuElement: {
        prototype: HTMLSeSidemenuElement;
        new (): HTMLSeSidemenuElement;
    };
    interface HTMLSeSidemenuItemElement extends Components.SeSidemenuItem, HTMLStencilElement {
    }
    var HTMLSeSidemenuItemElement: {
        prototype: HTMLSeSidemenuItemElement;
        new (): HTMLSeSidemenuItemElement;
    };
    interface HTMLSeSliderElement extends Components.SeSlider, HTMLStencilElement {
    }
    var HTMLSeSliderElement: {
        prototype: HTMLSeSliderElement;
        new (): HTMLSeSliderElement;
    };
    interface HTMLSeSnackbarElement extends Components.SeSnackbar, HTMLStencilElement {
    }
    var HTMLSeSnackbarElement: {
        prototype: HTMLSeSnackbarElement;
        new (): HTMLSeSnackbarElement;
    };
    interface HTMLSeStepperElement extends Components.SeStepper, HTMLStencilElement {
    }
    var HTMLSeStepperElement: {
        prototype: HTMLSeStepperElement;
        new (): HTMLSeStepperElement;
    };
    interface HTMLSeStepperItemElement extends Components.SeStepperItem, HTMLStencilElement {
    }
    var HTMLSeStepperItemElement: {
        prototype: HTMLSeStepperItemElement;
        new (): HTMLSeStepperItemElement;
    };
    interface HTMLSeTabbarElement extends Components.SeTabbar, HTMLStencilElement {
    }
    var HTMLSeTabbarElement: {
        prototype: HTMLSeTabbarElement;
        new (): HTMLSeTabbarElement;
    };
    interface HTMLSeTableElement extends Components.SeTable, HTMLStencilElement {
    }
    var HTMLSeTableElement: {
        prototype: HTMLSeTableElement;
        new (): HTMLSeTableElement;
    };
    interface HTMLSeTableGroupElement extends Components.SeTableGroup, HTMLStencilElement {
    }
    var HTMLSeTableGroupElement: {
        prototype: HTMLSeTableGroupElement;
        new (): HTMLSeTableGroupElement;
    };
    interface HTMLSeTableGroupHeaderElement extends Components.SeTableGroupHeader, HTMLStencilElement {
    }
    var HTMLSeTableGroupHeaderElement: {
        prototype: HTMLSeTableGroupHeaderElement;
        new (): HTMLSeTableGroupHeaderElement;
    };
    interface HTMLSeTableItemElement extends Components.SeTableItem, HTMLStencilElement {
    }
    var HTMLSeTableItemElement: {
        prototype: HTMLSeTableItemElement;
        new (): HTMLSeTableItemElement;
    };
    interface HTMLSeTableItemHeaderElement extends Components.SeTableItemHeader, HTMLStencilElement {
    }
    var HTMLSeTableItemHeaderElement: {
        prototype: HTMLSeTableItemHeaderElement;
        new (): HTMLSeTableItemHeaderElement;
    };
    interface HTMLSeTooltipElement extends Components.SeTooltip, HTMLStencilElement {
    }
    var HTMLSeTooltipElement: {
        prototype: HTMLSeTooltipElement;
        new (): HTMLSeTooltipElement;
    };
    interface HTMLSeTooltipContentElement extends Components.SeTooltipContent, HTMLStencilElement {
    }
    var HTMLSeTooltipContentElement: {
        prototype: HTMLSeTooltipContentElement;
        new (): HTMLSeTooltipContentElement;
    };
    interface HTMLSeTooltipFooterElement extends Components.SeTooltipFooter, HTMLStencilElement {
    }
    var HTMLSeTooltipFooterElement: {
        prototype: HTMLSeTooltipFooterElement;
        new (): HTMLSeTooltipFooterElement;
    };
    interface HTMLSeTooltipHeaderElement extends Components.SeTooltipHeader, HTMLStencilElement {
    }
    var HTMLSeTooltipHeaderElement: {
        prototype: HTMLSeTooltipHeaderElement;
        new (): HTMLSeTooltipHeaderElement;
    };
    interface HTMLSeVisualLinearElement extends Components.SeVisualLinear, HTMLStencilElement {
    }
    var HTMLSeVisualLinearElement: {
        prototype: HTMLSeVisualLinearElement;
        new (): HTMLSeVisualLinearElement;
    };
    interface HTMLSeVisualRadialElement extends Components.SeVisualRadial, HTMLStencilElement {
    }
    var HTMLSeVisualRadialElement: {
        prototype: HTMLSeVisualRadialElement;
        new (): HTMLSeVisualRadialElement;
    };
    interface HTMLElementTagNameMap {
        "se-about": HTMLSeAboutElement;
        "se-app": HTMLSeAppElement;
        "se-authentication": HTMLSeAuthenticationElement;
        "se-banner": HTMLSeBannerElement;
        "se-banner-item": HTMLSeBannerItemElement;
        "se-block": HTMLSeBlockElement;
        "se-block-content": HTMLSeBlockContentElement;
        "se-block-footer": HTMLSeBlockFooterElement;
        "se-block-header": HTMLSeBlockHeaderElement;
        "se-breadcrumb": HTMLSeBreadcrumbElement;
        "se-breadcrumb-item": HTMLSeBreadcrumbItemElement;
        "se-button": HTMLSeButtonElement;
        "se-checkbox": HTMLSeCheckboxElement;
        "se-chip": HTMLSeChipElement;
        "se-container": HTMLSeContainerElement;
        "se-dialog": HTMLSeDialogElement;
        "se-dialog-content": HTMLSeDialogContentElement;
        "se-dialog-footer": HTMLSeDialogFooterElement;
        "se-dialog-header": HTMLSeDialogHeaderElement;
        "se-divider": HTMLSeDividerElement;
        "se-dropdown": HTMLSeDropdownElement;
        "se-fab": HTMLSeFabElement;
        "se-fab-item": HTMLSeFabItemElement;
        "se-form-field": HTMLSeFormFieldElement;
        "se-header": HTMLSeHeaderElement;
        "se-icon": HTMLSeIconElement;
        "se-icon-ecostruxure": HTMLSeIconEcostruxureElement;
        "se-icon-lifeison": HTMLSeIconLifeisonElement;
        "se-icon-schneider": HTMLSeIconSchneiderElement;
        "se-link": HTMLSeLinkElement;
        "se-list": HTMLSeListElement;
        "se-list-group": HTMLSeListGroupElement;
        "se-list-item": HTMLSeListItemElement;
        "se-loading": HTMLSeLoadingElement;
        "se-radio": HTMLSeRadioElement;
        "se-radio-group": HTMLSeRadioGroupElement;
        "se-sidemenu": HTMLSeSidemenuElement;
        "se-sidemenu-item": HTMLSeSidemenuItemElement;
        "se-slider": HTMLSeSliderElement;
        "se-snackbar": HTMLSeSnackbarElement;
        "se-stepper": HTMLSeStepperElement;
        "se-stepper-item": HTMLSeStepperItemElement;
        "se-tabbar": HTMLSeTabbarElement;
        "se-table": HTMLSeTableElement;
        "se-table-group": HTMLSeTableGroupElement;
        "se-table-group-header": HTMLSeTableGroupHeaderElement;
        "se-table-item": HTMLSeTableItemElement;
        "se-table-item-header": HTMLSeTableItemHeaderElement;
        "se-tooltip": HTMLSeTooltipElement;
        "se-tooltip-content": HTMLSeTooltipContentElement;
        "se-tooltip-footer": HTMLSeTooltipFooterElement;
        "se-tooltip-header": HTMLSeTooltipHeaderElement;
        "se-visual-linear": HTMLSeVisualLinearElement;
        "se-visual-radial": HTMLSeVisualRadialElement;
    }
}
declare namespace LocalJSX {
    interface SeAbout {
        /**
          * The title of your about screen.
         */
        "appTitle"?: string;
        /**
          * The copyright you would like to display.
         */
        "copyright"?: string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain"?: string;
        /**
          * Sets the background image for your about page.
         */
        "imageUrl"?: string;
        /**
          * The version number you want to display.
         */
        "version"?: string;
    }
    interface SeApp {
        /**
          * Define the type of application. updating the option will impact the font used. - `technical`: For technical application (i.e. EcoStuxure), the font used will be `Nunito`. - `website` or `dcx`: For `se.com` application, the font used will be `Arial Rounded`.
         */
        "option"?: "technical" | "website" | "dcx";
    }
    interface SeAuthentication {
        /**
          * The title of your authentication screen.
         */
        "appTitle"?: string;
        /**
          * The copyright you would like to display.
         */
        "copyright"?: string;
        /**
          * The domain you want to display.  If set to `ecostruxure`, it renders an EcoStruxure icon.
         */
        "domain"?: string;
        /**
          * If set to `true`, this will hide the authentication screen.
         */
        "hide"?: boolean;
        /**
          * Sets the background image for your authentication screen.
         */
        "imageUrl"?: string;
        /**
          * The version number you want to display.
         */
        "version"?: string;
    }
    interface SeBanner {
        /**
          * Set the duration (in ms) that the banner will automatically switch slides. Default is `6000`.
         */
        "duration"?: number;
    }
    interface SeBannerItem {
        /**
          * Indicates the active banner item in your banner component.
         */
        "active"?: boolean;
        /**
          * Sets the background image for your banner item.
         */
        "imageUrl"?: string;
        /**
          * Send an event when the banner item changes
         */
        "onDidChange"?: (event: CustomEvent<any>) => void;
    }
    interface SeBlock {
        /**
          * Defines the se-block item's ability to appear clickable / selectable. Default setting is `false`, resulting in no hover effects on the block level. `true` adds a hover effect on the se-block. The cursor will change to `pointer`, a box-shadow will appear, and a `$se-life-green` bar will appear at the top of the block.
         */
        "clickable"?: boolean;
        /**
          * Defines clickable se-block item's bar on hover. Default setting is `false`. `true` renders a `$se-life-green` colored bar on a hover.
         */
        "clickableBar"?: boolean;
        /**
          * Optional property that defines the background color of the block. Default setting is `alternative`, rendering the "alternative" theme background. `none` has no background. `standard` renders the "standard" theme background.
         */
        "color"?: "none" | "standard" | "alternative";
        /**
          * Defines the se-block corner radius. Default setting is `small`, rendering a rounded, 4px rounded corner. `none` is for a sharp, 90 degree corner. `nano` is for a slightly rounded, 2px rounded corner.
         */
        "corner"?: "none" | "nano" | "small";
        /**
          * Defines how to display the element. `flex` is the default display. `block` helps in specific cases. Make sure you know what you are doing.
         */
        "display"?: "flex" | "block" | "grid";
        /**
          * Defines whether or not a divider will be applied to the se-block header and footer. `true` will add a divider to the se-block-header and se-block-footer, if they are present. `false` will remove dividers on the se-block header and se-block-footer, if they are present.
         */
        "divider"?: boolean;
        /**
          * When the display is set to `grid`, this property determines if the block should have double the width and height of a standard grid item. Default setting is `false`, spanning 1 row and 1 column (1/1). `true` spans 2 rows and 2 columns (2/2). `vertical` spans 2 rows (2/1). `horizontal` spans 2 columns (1/2).
         */
        "enlarged"?: "vertical" | "horizontal" | boolean;
        /**
          * Defines the specific height of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "height"?: string;
        /**
          * Displays the loading icon if set to `true`.  Default setting is `false`.
         */
        "loading"?: boolean;
        /**
          * Defines the spacing around the outside edge of a block. Default `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "margin"?: "none" | "small" | "medium" | "large" | "xlarge";
        /**
          * Defines the visual appearance of a block. Default setting is `basic`, which will remove any spacing. `widget` will create a flat widget look and feel with a `medium` margin around it. `card` will create a card look and feel with rounded corners, and with a `large` margin around it. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated.
         */
        "option"?: "basic" | "card" | "card-old" | "widget";
        /**
          * Defines the se-block outline. Default setting is `false`. Setting this property to `true` will add a 1px border.
         */
        "outline"?: boolean;
        /**
          * Defines the se-block outline color. Default setting is `standard`, which renders the outline with the `$se-super-light-grey` color. `primary` defines the outline color as `$se-life-green`, used primarily for technical applications when the block is selected. `secondary` defines the outline color as `$se-sky-blue`.
         */
        "outlineColor"?: "standard" | "secondary" | "primary";
        /**
          * Defines the specific width of a block.  Useful to create easy layouts under `se-container` which uses `flex` by default.
         */
        "width"?: string;
    }
    interface SeBlockContent {
        /**
          * The block-content component will add 8px padding on the top and bottom, and 16px padding on the left and right by default. When the option is set to `fill`, the content will fill the whole space of the block-content with no padding.
         */
        "option"?: "card" | "widget" | "basic" | "fill";
    }
    interface SeBlockFooter {
        /**
          * Defines the direction of the flex element. Default setting is `row`. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction"?: "row" | "column";
        /**
          * Defines whether or not a divider will be applied to the se-block-footer. The se-block component's divider property will be applied to the se-block-footer component.
         */
        "divider"?: boolean;
        /**
          * Defines the visual appearance of a footer. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the footer with respect to the card design.
         */
        "option"?: "card" | "widget" | "basic";
    }
    interface SeBlockHeader {
        /**
          * Defines whether or not a divider will be applied to the se-block-header. The se-block component's divider property will be applied to the se-block-header component.
         */
        "divider"?: boolean;
        /**
          * Defines the visual appearance of a header. Updated automatically by the `se-block` component when the option is set to `card`, which will update the design of the header with respect to the card design. `fill` removes all spacing, for example with use of the `se-tabbar` option `content`.
         */
        "option"?: "card" | "widget" | "basic" | "fill";
    }
    interface SeBreadcrumb {
    }
    interface SeBreadcrumbItem {
        /**
          * Indicates the URL you wish to navigate to when clicking on your breadcrumb item.
         */
        "href"?: string;
        /**
          * Indicates whether or not the breadcrumb item should be selected.  The default setting is `false`.
         */
        "isLast"?: boolean;
    }
    interface SeButton {
        /**
          * Optional property that defines if the button displays as a block in it's container. When set to true, the button will be as wide as its container.
         */
        "block"?: boolean;
        /**
          * Optional property that defines if the button has a caption or tooltip text.
         */
        "caption"?: string;
        /**
          * Defines the background color of the button. The default setting is `standard`.
         */
        "color"?: "standard" | "alternative" | "primary" | "secondary";
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Optional property that determines if your button includes an icon.
         */
        "icon"?: string;
        /**
          * Optional property to change the color of the icon when needed. For example, the user dropdown in the header component.
         */
        "iconColor"?: "standard" | "alternative" | "primary" | "secondary";
        /**
          * Property to specify if the button should only display an icon (no extra spacing).
         */
        "iconOnly"?: boolean;
        /**
          * Passes button data to the parent component on a click.
         */
        "onDidClick"?: (event: CustomEvent<any>) => void;
        /**
          * Defines the visual appearance of the button. `flat` is the default option, which includes a gray background. `raised` adds a box shadow to the button. `outline` adds a border to the button. `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application.
         */
        "option"?: "flat" | "raised" | "outline" | "login" | "signup" | "inherit" | "fab" | "minifab";
        /**
          * Optional property that defines if the button should be shown as selected. Used with the `se-radio-group` component.
         */
        "selected"?: boolean;
        /**
          * Defines the size of the button. `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component. `small` is the default option, with a 14px font and a 32px height. `medium` sets the font to 16px and the height to 40px. `large` sets the font to 18px and the height to 48px.
         */
        "size"?: "nano" | "small" | "medium" | "large";
        /**
          * Optional property. `button`	is the default setting, creating a clickable button. `submit`	creates a "submit" button (useful to submit form-data). `reset`	creates a reset button (useful to reset form-data to its initial values).
         */
        "type"?: "button" | "submit" | "reset";
        /**
          * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
         */
        "value"?: string;
    }
    interface SeCheckbox {
        /**
          * Defines the color schema of the checkbox when the option is set to `onoff`. The default value is `standard`.
         */
        "background"?: "standard" | "alternative";
        /**
          * Defines the color of the checkbox for when the option is set to `checkbox` or `switch`. The default value is `success`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color"?: "primary" | "secondary" | "success";
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Reduces the visual height of the checkbox when the option is set to `onoff`. Useful if the on/off checkbox is within a header element.
         */
        "header"?: boolean;
        /**
          * The label of the checkbox that will be attached to the box.
         */
        "label"?: string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right` when the option is set to `checkbox`. The default setting is `left` when the option is set to `switch`.
         */
        "labelPos"?: "left" | "right";
        /**
          * Send the checkbox value to the parent component when clicking on the checkbox.
         */
        "onDidChange"?: (event: CustomEvent<any>) => void;
        /**
          * Determines the visual appearance of the component. `checkbox` is the default option, which will render the component like a standard HTML checkbox. `switch` renders the component like a toggle switch. `onoff` renders the component like an "on/off" switch, with a red "off" button and a green "on" button.
         */
        "option"?: "checkbox" | "onoff" | "switch";
        /**
          * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
         */
        "required"?: boolean;
        /**
          * The "checked" state of the checkbox, `false` by default.
         */
        "selected"?: boolean;
        /**
          * Defines the text the user will see for the "off" or "inactive" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default.
         */
        "textOff"?: string;
        /**
          * Defines the text the user will see for the "on" or "active" part of the checkbox when option is set to `onoff`.  Set to `ON` by default.
         */
        "textOn"?: string;
        /**
          * The value you want to pass to the parent component when the checkbox is checked.
         */
        "value"?: string;
    }
    interface SeChip {
        /**
          * Optional property that defines if the chip displays as a block in it's container. When set to true, the chip will be as wide as its container.
         */
        "block"?: boolean;
        /**
          * Indicates whether or not the chip has a close button.  Set to `false` by default.
         */
        "canClose"?: boolean;
        /**
          * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
         */
        "color"?: "standard" | "alternative";
        /**
          * Indicates whether or not the chip is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Send the chip value to the parent component when clicking the close button of a chip.
         */
        "onDidClose"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether or not the chip is selected.  Set to `false` by default.
         */
        "selected"?: boolean;
        /**
          * Defines the size of the chip. `nano` sets the font to 14px and the height to 24px. `small` is the default option, with a 16px font and a 32px height.
         */
        "size"?: "nano" | "small";
        /**
          * The text you want to display in your chip.
         */
        "value"?: string;
    }
    interface SeContainer {
        /**
          * Defines the background color of the container. `none` has no background. `standard` is `se-background`, light gray. `alternative` is a white background.
         */
        "color"?: "none" | "standard" | "alternative";
        /**
          * When in `display="grid"`, defines the mininimum width of a column. It automatically figures out the appropriate number of columns from there. Default is `350px`.
         */
        "columnSize"?: string;
        /**
          * Defines the direction of the flex element. `row` is the default direction. This is perfect to use with flex content. `column` is useful in specific cases. Make sure you know what you are doing.
         */
        "direction"?: "column" | "row";
        /**
          * Defines how to display the element. `flex` is the default display. `block` will set each container to be as large and high as it's content. Selecting this display will automatically configure each child element to have "display: block".
         */
        "display"?: "flex" | "block" | "grid";
        /**
          * Defines the inner appearance of a container. `fill` is the default option, taking the full space of the container. This option automatically sets the color property to `standard` (gray) if color has not been set. `widget` adds a `small` padding around the container to equally space all child elements. This option automatically sets the color property to `standard` (gray) if color has not been set. `centered` centers the container so the content does not exceed a maximum width. `card` adds a `medium` padding around each child element.  This option automatically sets the color property to `alternative` (white) if color has not been set. Pending deprecation - `card-old` follows a prior design pattern with a box-shadow and will be deprecated. `inherited` will insure that no specific style is applied to the container.
         */
        "option"?: "fill" | "widget" | "card" | "card-old" | "centered" | "inherited";
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px. `large` is 16px. `xlarge` is 32px.
         */
        "padding"?: "none" | "small" | "medium" | "large" | "xlarge";
        /**
          * In specific cases, it may be necessary to define the container with an absolute position (such as inside an angular router-container). Most of the time, the default position will work perfectly with CSS flex box. `relative` is the default position. This is perfect to use with flex content. `absolute` is useful in specific cases. Make sure you know what you are doing.
         */
        "position"?: "relative" | "absolute";
        /**
          * When in `display="grid"`, defines the height of each container.  Default is `300px`.
         */
        "rowSize"?: string;
    }
    interface SeDialog {
        /**
          * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`.
         */
        "canBackdrop"?: boolean;
        /**
          * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text `primary`: Primary color schema and default setting.
         */
        "color"?: "alternative" | "primary";
        /**
          * Send data to the parent component when the backdrop is clicked.
         */
        "onBackdrop"?: (event: CustomEvent<any>) => void;
        /**
          * Send data to the parent component when clicking an element within the dialog to close it. The modal can then be safely removed from the DOM.
         */
        "onDidClose"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether or not the dialog is open or closed.  Default setting is `false`.
         */
        "open"?: boolean;
        /**
          * Defines the size of the modal. `small`: used in alerts and messages `medium`: default setting, used by other apps `fill`: takes the full space of the screen
         */
        "size"?: "small" | "medium" | "large" | "fill";
    }
    interface SeDialogContent {
        /**
          * Indicates an icon you want to display in your dialog.
         */
        "icon"?: string;
        /**
          * Indicates what color schema you want to render in your dialog.
         */
        "iconColor"?: "standard" | "alternative" | "primary" | "secondary";
        /**
          * When set to `fill`, the content will fill the whole space of the dialog.
         */
        "option"?: "fill";
    }
    interface SeDialogFooter {
    }
    interface SeDialogHeader {
        /**
          * Defines the color of the dialog header. `alternative`: Alternative background with primary color for the text. `primary`: Primary color schema.
         */
        "color"?: "primary" | "alternative";
    }
    interface SeDivider {
        /**
          * Indicates the color schema of your divider line. Default setting is `standard`, rendering a light gray colored line. The `alternative` property sets a white colored divider line.
         */
        "color"?: "standard" | "alternative";
        /**
          * Indicates the visual appearance of your divider line.  Default setting is `horizontal`.
         */
        "option"?: "horizontal" | "vertical" | "inset";
    }
    interface SeDropdown {
        /**
          * Defines how to align the dropdown container. `right`: Position the container with respect to the right side of the trigger element. `left`: Position the container with respect to the left side of the trigger element.
         */
        "alignment"?: "right" | "left";
        /**
          * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        "maxHeight"?: string;
        /**
          * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        "maxWidth"?: string;
        /**
          * Event emitted when the dropdown has been touched. Every dropdown listen to this event to avoid avoid multiple dropdown open at the same time.
         */
        "onCancelAllDropdown"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when the dropdown has been closed.
         */
        "onDidClose"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when the dropdown has been opened.
         */
        "onDidOpen"?: (event: CustomEvent<any>) => void;
        /**
          * Defines how to vertically align the dropdown container. `top`: Position the container with respect to the top side of the trigger element. `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        "verticalAlignment"?: "top" | "bottom";
    }
    interface SeFab {
        /**
          * Indicates the color of your main action button . The Default setting is `primary`, rendering a green background. The `alternative` setting renders a white background.
         */
        "color"?: "primary" | "alternative";
        /**
          * Property that determines if an icon is included in the main action button.
         */
        "icon"?: string;
        /**
          * Property that determines the functionality of the FAB. The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB. The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB.
         */
        "option"?: "speeddial" | "backtotop";
        /**
          * Property that determines the position of the component. The default setting is `bottom`, rendering a FAB at the bottom right corner. The `top` setting renders the FAB at the top right corner.
         */
        "position"?: "bottom" | "top";
    }
    interface SeFabItem {
        /**
          * Property that determines if an icon is included in the floating action button.
         */
        "icon"?: string;
        /**
          * Send the value of the caption to the parent when clicking on the item.
         */
        "onDidClick"?: (event: CustomEvent<any>) => void;
    }
    interface SeFormField {
        /**
          * Optional property that defines if the field displays as a block in it's container. When set to true, the field will be as wide as its container. both field label auto adjust when it set to inline
         */
        "block"?: boolean;
        /**
          * Optional property that defines if the form field is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Defines the text value of the label in your form field.
         */
        "label"?: string;
        /**
          * Optional property to define the proportion of the label width. The content (input) will take the rest of if. Defaulted to 40%
         */
        "labelWidth"?: string;
        /**
          * Passes form data to the parent component on a click (`checkbox` or `radio`), menu change (`select`), or when the input field loses focus.
         */
        "onDidSubmit"?: (event: CustomEvent<any>) => void;
        /**
          * Defines the layout of your form field. `inline` is the default option, and is always applied if the type is set to `checkbox`.  This sets the input or select field adjacent to the label. `stacked` option will render the input or select field below the label.
         */
        "option"?: "inline" | "stacked";
        /**
          * Defines the spacing around the inside edge of a container. `none` is 0px. `small` is 4px. `medium` is 8px.
         */
        "padding"?: "none" | "small" | "medium";
        /**
          * Determines if the input is required by the application. Set to `false` by default. Setting this value to `true` will render a red asterisk next to your label.
         */
        "required"?: boolean;
        /**
          * Sets a red border on an input field if there's an error, an orange border if there's a warning, and a green border if a successful input.
         */
        "status"?: "error" | "warning" | "success";
        /**
          * Defines whether the form field's input is a text field (`input`), a checkbox (`checkbox`), a radio button (`radio`), or a dropdown menu (`select`). `input` is the default type.
         */
        "type"?: "input" | "checkbox" | "radio" | "select";
        /**
          * Defines the value of your form field to get passed to the parent component. When the type is set to "input", this value will be the default placeholder in your input field.
         */
        "value"?: string;
    }
    interface SeHeader {
        /**
          * Sets the title of your application.
         */
        "appTitle"?: string;
        /**
          * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
         */
        "domain"?: string;
        /**
          * Defines the project name (useful for small projects) that can be used for versioning as well. It will be placed at the right side of the title.
         */
        "project"?: string;
    }
    interface SeIcon {
        /**
          * Optional property that defines the background color of the button. The default color will be inherited from its parent.
         */
        "color"?: "standard" | "alternative" | "primary" | "secondary" | "success" | "warning" | "error";
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Optional property to define if the icon should act as a button (clickable).
         */
        "option"?: "button";
        /**
          * Defines the size of an icon. `nano` sets the size to 14px. `small` sets the size to 24px.(default setting) `medium` sets the size to 32px. `large` sets the size to 52px. `xlarge` sets the size to 62px.
         */
        "size"?: "nano" | "small" | "medium" | "large" | "xlarge";
    }
    interface SeIconEcostruxure {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color"?: "standard" | "inherited";
        /**
          * Sets the size of the EcoStruxure icon.  The default setting is `small`.
         */
        "size"?: "small" | "medium";
    }
    interface SeIconLifeison {
        /**
          * Defines the color of the logo. `standard`: displays a light green / dark green conventional SE logo. `inherited`: default option, which takes the color from it's parent.
         */
        "color"?: "standard" | "inherited";
    }
    interface SeIconSchneider {
    }
    interface SeLink {
        /**
          * Determines whether or not the link is disabled.
         */
        "disabled"?: boolean;
        /**
          * Adds visual and function properties to your link component. The default setting is `internal`, which redirects you to the specified URL in the same page. The `external` setting adds an underline and ">" icon to the link, and opens the link in a new web browser tab.
         */
        "option"?: "internal" | "external";
        /**
          * Defines the url the user should get redirected to when clicking on the link.
         */
        "url"?: string;
    }
    interface SeList {
        /**
          * Defines if list groups can be collapsed.  The default setting is `true`.
         */
        "canCollapse"?: boolean;
        /**
          * Defines the style of the list.  The default setting is `classic`.
         */
        "option"?: "nav" | "classic" | "dropdown" | "treeview" | "headline";
    }
    interface SeListGroup {
        /**
          * Defines if list groups can be collapsed, true by default.
         */
        "canCollapse"?: boolean;
        /**
          * Defines if the item group is collapsed/closed. The default setting is `false`.
         */
        "collapsed"?: boolean;
        /**
          * Defines the description of the item, placed under its title.
         */
        "description"?: string;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon"?: string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor"?: "primary" | "secondary";
        /**
          * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        "indentation"?: number;
        /**
          * Defines the title of the item.
         */
        "item"?: string;
        /**
          * Emitted when the group item is clicked.
         */
        "onDidGroupClick"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the group item is collapsed/uncollapsed.
         */
        "onDidGroupCollapse"?: (event: CustomEvent<any>) => void;
        /**
          * Defines the style of the list. The default setting is `classic`, and the style will be handled and modified by the parent element.
         */
        "option"?: "nav" | "classic" | "dropdown" | "treeview" | "headline";
        /**
          * Defines if the list group should be displayed as selected (if one of its child elements is selected when collapsed).
         */
        "selected"?: boolean;
        "selectedChild"?: boolean;
    }
    interface SeListItem {
        /**
          * Defines the description of the item, placed under its title.
         */
        "description"?: string;
        /**
          * Determines if se-item configures an `a` tag with an `href` attibute. Default when href is blank configures as a `button` tag.
         */
        "href"?: string;
        /**
          * Places an icon on the left side of the item list.
         */
        "icon"?: string;
        /**
          * Optional property to define the color of the icon. The default color will be inherited from it's parent.
         */
        "iconColor"?: "standard" | "alternative" | "primary" | "secondary" | "success" | "warning" | "error";
        /**
          * Defines the group indentation to add paddings to the list item (used with multiple list groups).
         */
        "indentation"?: number;
        /**
          * Defines the title of the item.
         */
        "item"?: string;
        /**
          * Event emitted to notify the list-group component that the selected state has changed.
         */
        "onDidSelectedChange"?: (event: CustomEvent<void>) => void;
        /**
          * Defines the style of the list. The default setting is `classic`, and the style will be handled and modified by the parent element.
         */
        "option"?: "nav" | "classic" | "dropdown" | "treeview" | "headline";
        /**
          * Defines if the list element should be selected or not.
         */
        "selected"?: boolean;
    }
    interface SeLoading {
        /**
          * Displays the loading icon on screen when set to `true`.
         */
        "loading"?: boolean;
        /**
          * Defines the visual display of the loader. `standard` is the default option, and displays a spinning green circle. `dialog` gives the loading icon a look-and-feel that it is within a popup dialog box.
         */
        "option"?: "standard" | "dialog";
    }
    interface SeRadio {
        /**
          * Defines the color of the checkbox. The default setting is `primary`, rendering a green color. The `secondary` setting renders a blue color.
         */
        "color"?: "primary" | "secondary";
        /**
          * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Defines the label that will display next to the radio button.
         */
        "label"?: string;
        /**
          * Sets the position of the label for your checkbox component. The default setting is `right`.
         */
        "labelPos"?: "left" | "right";
        /**
          * Send the checkbox value to the parent component when clicking on the checkbox.
         */
        "onDidCheck"?: (event: CustomEvent<any>) => void;
        /**
          * Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`.
         */
        "required"?: boolean;
        /**
          * Determines whether or not the checkbox is checked when you initialize it.  The default setting is `false`.  Checked if set to `true`.
         */
        "selected"?: boolean;
        /**
          * Defines the value you want to pass to the parent component when the radio button is checked.
         */
        "value"?: string;
    }
    interface SeRadioGroup {
        /**
          * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
         */
        "color"?: "standard" | "alternative" | "primary" | "secondary";
        /**
          * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        "disabled"?: boolean;
        /**
          * Passes the selected button value to the parent component when clicking on a button in the group.
         */
        "onDidChange"?: (event: CustomEvent<any>) => void;
        /**
          * Defines the height of each button in the group. `small` is the default setting, rendering a 32px height and a 14px font size. `nano` sets the height to 24px and the font size to 12px.
         */
        "size"?: "small" | "nano";
        /**
          * Defines the selected values of the array.
         */
        "value"?: string;
    }
    interface SeSidemenu {
        /**
          * Defines the text displayed in the header of the Sidemenu. The default value is `Menu`.
         */
        "label"?: string;
        "link"?: string;
        /**
          * When the menu is opened, it will trigger a `toggled` event with `event.detail.state` set to `open`. When the menu is closed, it will trigger a `toggled` event with `event.detail.state` set to `closed`.
         */
        "onToggled"?: (event: CustomEvent<any>) => void;
    }
    interface SeSidemenuItem {
        /**
          * Defines if the menu item is active or not. The default setting is `false`.
         */
        "active"?: boolean;
        /**
          * Defines the title of the menu item.
         */
        "item"?: string;
        /**
          * Send an event when the sidemenu item changes
         */
        "onDidClick"?: (event: CustomEvent<any>) => void;
    }
    interface SeSlider {
        /**
          * Indicates if your slider is disabled. The default setting is `false`.
         */
        "disabled"?: boolean;
        /**
          * The label of the slider that will be attached to the input.
         */
        "label"?: string;
        /**
          * Indicates the maximum value of your slider. The default value is `100`.
         */
        "max"?: number;
        /**
          * Indicates the minimum value of your slider. The default value is `0`.
         */
        "min"?: number;
        /**
          * Event emitted when the slider has been changed.
         */
        "onDidChange"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates the initial value of your slider component when it loads. The default value is `0`.
         */
        "value"?: any;
    }
    interface SeSnackbar {
        /**
          * Defines the text you want your custom action button to read.
         */
        "actionText"?: string;
        /**
          * Displays a "button" to close the snackbar. The default setting is `false`. This will be visible if set to `true`.
         */
        "canClose"?: boolean;
        /**
          * Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false. The default setting is 5000.
         */
        "duration"?: number;
        /**
          * The name of the icon you wish to display.  The default icon is an information circle.
         */
        "icon"?: string | "none";
        /**
          * The content of the message you want the snackbar to display.
         */
        "message"?: string;
        /**
          * Sends information to the parent component when clicking a custom action button.
         */
        "onActionClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Sends information to the parent component when closing the snackbar.
         */
        "onDidClose"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates if the snackbar is open.  Set to `false` (closed) by default.
         */
        "open"?: boolean;
        /**
          * Indicates the background color of your snackbar. `success`: green `warning`: orange `error`: red `information`: dark grey, default setting
         */
        "type"?: "success" | "error" | "warning" | "information";
    }
    interface SeStepper {
        /**
          * Sets the background color of your stepper. The default setting is `primary`, implementing a green background for the stepper visual items. The `alternative` setting implements a white background for the stepper visual items.  This setting is best used against a gray background.
         */
        "color"?: "primary" | "alternative";
        /**
          * Defines if the stepper items must be completed sequentially. The default setting is `true`, each stepper item must be validated before advancing to the next step. `false` allows each step to be selected in any order.
         */
        "linear"?: boolean;
    }
    interface SeStepperItem {
        /**
          * Indicates the content for the currently selected step in the stepper.
         */
        "active"?: boolean;
        /**
          * Indicates the label for your stepper item.
         */
        "label"?: string;
        /**
          * Event to send to the parent component when a stepper item's data is validated. The boolean validated property is passed to the parent.
         */
        "onDidValidate"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether a required item's data has been validated.  Useful if using a form field. When the stepper component is set to linear mode, all stepper items will need to be validated before advancing the stpper.
         */
        "validated"?: boolean;
    }
    interface SeTabbar {
        /**
          * Indicates the color of your tab bar. Default setting is `primary`, rendering a green background for nav-bars and ultra-light-grey-1 for content. The `alternative` setting renders a white background.
         */
        "color"?: "primary" | "alternative";
        /**
          * Defines the function of the tabbar. Default `nav` creates a tab bar that functions as a nav-bar. `content` creates a ta bbar that functions as a content section tab bar.
         */
        "option"?: "nav" | "content";
        /**
          * Indicates the overflow behavior of your tab bar. Default setting is `scroll`, keeping all tabs in one horizontal row. The `stack` setting allows your tabbar content wrap to new lines. The `compact` setting allows your tabbar content to scroll, but all stack the text together as much as possible.
         */
        "overflow"?: "compact" | "stack" | "scroll";
    }
    interface SeTable {
    }
    interface SeTableGroup {
        /**
          * Indicates whether or not the `se-table-group` is selectable.  Set to `false` by default.
         */
        "selectable"?: boolean;
        /**
          * Indicates whether or not the `se-table-group` is selected.  Set to `false` by default.
         */
        "selected"?: boolean;
    }
    interface SeTableGroupHeader {
    }
    interface SeTableItem {
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable"?: boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex"?: string;
        /**
          * Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth"?: string;
        "option"?: "dropdown" | "text" | "custom";
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width"?: string;
    }
    interface SeTableItemHeader {
        /**
          * Optional property defines the tag type within the `se-table-item`. Default value `false` defines the tag type as `div`. `true` defines the tag type as a `button`.
         */
        "clickable"?: boolean;
        /**
          * Defines the specific flex-basis of a block.
         */
        "flex"?: string;
        /**
          * Defines the  min-width of a block to insure that a scroll appear if too many column are in the table. Only necessary if using flex.
         */
        "minWidth"?: string;
        /**
          * Optional property that provides the arrow icon based on which string is provided, and also causes the `clickable` property to `true`. `asc` defines the icon as an upwards arrow in black. `desc` defines the icon as a downwards arrow in black. `none` defines the icon as an upwards arrow in grey.
         */
        "sort"?: "asc" | "desc" | "none";
        /**
          * Defines the specific width of a block, for items that should not be flexible.
         */
        "width"?: string;
    }
    interface SeTooltip {
        /**
          * Indicates the action of your tooltip. The default setting is `hover`, triggering the tooltip when hovering over the parent element. The `click` action triggers the tooltip when you click on the parent element.
         */
        "action"?: "click" | "hover";
        /**
          * Closes the tooltip when another tooltip is opened.
         */
        "onCloseTooltips"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when the tooltip has been closed.
         */
        "onDidClose"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when the tooltip has been opened.
         */
        "onDidOpen"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates the position of your tooltip. The default setting is `bottom`, rendering the tooltip below its parent.
         */
        "position"?: "top" | "bottom" | "left" | "right";
    }
    interface SeTooltipContent {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon"?: string;
    }
    interface SeTooltipFooter {
    }
    interface SeTooltipHeader {
        /**
          * Indicates an icon you want to display in your tooltip.
         */
        "icon"?: string;
    }
    interface SeVisualLinear {
        /**
          * Defines the text value of the label in your component.
         */
        "label"?: string;
        /**
          * Defines the layout of your component. `inline` is the default option.  This sets the "progress bar" adjacent to the label. `stacked` option will render the "progress bar" below the label.
         */
        "option"?: "inline" | "stacked";
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage"?: number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor"?: string;
        /**
          * Defines the value of your component.
         */
        "value"?: string;
    }
    interface SeVisualRadial {
        /**
          * Defines the text value of the label in your component.
         */
        "label"?: string;
        /**
          * Set the percentage of the "progress bar" to be "filled".
         */
        "percentage"?: number;
        /**
          * Sets the color of the visual "progress bar". The string should be a 6-digit hexadecimal color with a hashtag (example: #3dcd58). By default, the progress bar will have a green color.
         */
        "secolor"?: string;
        /**
          * Determines the visual size of your circular progress bar.  The default setting is `large`.
         */
        "size"?: "small" | "large";
        /**
          * Defines the value of your component.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "se-about": SeAbout;
        "se-app": SeApp;
        "se-authentication": SeAuthentication;
        "se-banner": SeBanner;
        "se-banner-item": SeBannerItem;
        "se-block": SeBlock;
        "se-block-content": SeBlockContent;
        "se-block-footer": SeBlockFooter;
        "se-block-header": SeBlockHeader;
        "se-breadcrumb": SeBreadcrumb;
        "se-breadcrumb-item": SeBreadcrumbItem;
        "se-button": SeButton;
        "se-checkbox": SeCheckbox;
        "se-chip": SeChip;
        "se-container": SeContainer;
        "se-dialog": SeDialog;
        "se-dialog-content": SeDialogContent;
        "se-dialog-footer": SeDialogFooter;
        "se-dialog-header": SeDialogHeader;
        "se-divider": SeDivider;
        "se-dropdown": SeDropdown;
        "se-fab": SeFab;
        "se-fab-item": SeFabItem;
        "se-form-field": SeFormField;
        "se-header": SeHeader;
        "se-icon": SeIcon;
        "se-icon-ecostruxure": SeIconEcostruxure;
        "se-icon-lifeison": SeIconLifeison;
        "se-icon-schneider": SeIconSchneider;
        "se-link": SeLink;
        "se-list": SeList;
        "se-list-group": SeListGroup;
        "se-list-item": SeListItem;
        "se-loading": SeLoading;
        "se-radio": SeRadio;
        "se-radio-group": SeRadioGroup;
        "se-sidemenu": SeSidemenu;
        "se-sidemenu-item": SeSidemenuItem;
        "se-slider": SeSlider;
        "se-snackbar": SeSnackbar;
        "se-stepper": SeStepper;
        "se-stepper-item": SeStepperItem;
        "se-tabbar": SeTabbar;
        "se-table": SeTable;
        "se-table-group": SeTableGroup;
        "se-table-group-header": SeTableGroupHeader;
        "se-table-item": SeTableItem;
        "se-table-item-header": SeTableItemHeader;
        "se-tooltip": SeTooltip;
        "se-tooltip-content": SeTooltipContent;
        "se-tooltip-footer": SeTooltipFooter;
        "se-tooltip-header": SeTooltipHeader;
        "se-visual-linear": SeVisualLinear;
        "se-visual-radial": SeVisualRadial;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "se-about": LocalJSX.SeAbout & JSXBase.HTMLAttributes<HTMLSeAboutElement>;
            "se-app": LocalJSX.SeApp & JSXBase.HTMLAttributes<HTMLSeAppElement>;
            "se-authentication": LocalJSX.SeAuthentication & JSXBase.HTMLAttributes<HTMLSeAuthenticationElement>;
            "se-banner": LocalJSX.SeBanner & JSXBase.HTMLAttributes<HTMLSeBannerElement>;
            "se-banner-item": LocalJSX.SeBannerItem & JSXBase.HTMLAttributes<HTMLSeBannerItemElement>;
            "se-block": LocalJSX.SeBlock & JSXBase.HTMLAttributes<HTMLSeBlockElement>;
            "se-block-content": LocalJSX.SeBlockContent & JSXBase.HTMLAttributes<HTMLSeBlockContentElement>;
            "se-block-footer": LocalJSX.SeBlockFooter & JSXBase.HTMLAttributes<HTMLSeBlockFooterElement>;
            "se-block-header": LocalJSX.SeBlockHeader & JSXBase.HTMLAttributes<HTMLSeBlockHeaderElement>;
            "se-breadcrumb": LocalJSX.SeBreadcrumb & JSXBase.HTMLAttributes<HTMLSeBreadcrumbElement>;
            "se-breadcrumb-item": LocalJSX.SeBreadcrumbItem & JSXBase.HTMLAttributes<HTMLSeBreadcrumbItemElement>;
            "se-button": LocalJSX.SeButton & JSXBase.HTMLAttributes<HTMLSeButtonElement>;
            "se-checkbox": LocalJSX.SeCheckbox & JSXBase.HTMLAttributes<HTMLSeCheckboxElement>;
            "se-chip": LocalJSX.SeChip & JSXBase.HTMLAttributes<HTMLSeChipElement>;
            "se-container": LocalJSX.SeContainer & JSXBase.HTMLAttributes<HTMLSeContainerElement>;
            "se-dialog": LocalJSX.SeDialog & JSXBase.HTMLAttributes<HTMLSeDialogElement>;
            "se-dialog-content": LocalJSX.SeDialogContent & JSXBase.HTMLAttributes<HTMLSeDialogContentElement>;
            "se-dialog-footer": LocalJSX.SeDialogFooter & JSXBase.HTMLAttributes<HTMLSeDialogFooterElement>;
            "se-dialog-header": LocalJSX.SeDialogHeader & JSXBase.HTMLAttributes<HTMLSeDialogHeaderElement>;
            "se-divider": LocalJSX.SeDivider & JSXBase.HTMLAttributes<HTMLSeDividerElement>;
            "se-dropdown": LocalJSX.SeDropdown & JSXBase.HTMLAttributes<HTMLSeDropdownElement>;
            "se-fab": LocalJSX.SeFab & JSXBase.HTMLAttributes<HTMLSeFabElement>;
            "se-fab-item": LocalJSX.SeFabItem & JSXBase.HTMLAttributes<HTMLSeFabItemElement>;
            "se-form-field": LocalJSX.SeFormField & JSXBase.HTMLAttributes<HTMLSeFormFieldElement>;
            "se-header": LocalJSX.SeHeader & JSXBase.HTMLAttributes<HTMLSeHeaderElement>;
            "se-icon": LocalJSX.SeIcon & JSXBase.HTMLAttributes<HTMLSeIconElement>;
            "se-icon-ecostruxure": LocalJSX.SeIconEcostruxure & JSXBase.HTMLAttributes<HTMLSeIconEcostruxureElement>;
            "se-icon-lifeison": LocalJSX.SeIconLifeison & JSXBase.HTMLAttributes<HTMLSeIconLifeisonElement>;
            "se-icon-schneider": LocalJSX.SeIconSchneider & JSXBase.HTMLAttributes<HTMLSeIconSchneiderElement>;
            "se-link": LocalJSX.SeLink & JSXBase.HTMLAttributes<HTMLSeLinkElement>;
            "se-list": LocalJSX.SeList & JSXBase.HTMLAttributes<HTMLSeListElement>;
            "se-list-group": LocalJSX.SeListGroup & JSXBase.HTMLAttributes<HTMLSeListGroupElement>;
            "se-list-item": LocalJSX.SeListItem & JSXBase.HTMLAttributes<HTMLSeListItemElement>;
            "se-loading": LocalJSX.SeLoading & JSXBase.HTMLAttributes<HTMLSeLoadingElement>;
            "se-radio": LocalJSX.SeRadio & JSXBase.HTMLAttributes<HTMLSeRadioElement>;
            "se-radio-group": LocalJSX.SeRadioGroup & JSXBase.HTMLAttributes<HTMLSeRadioGroupElement>;
            "se-sidemenu": LocalJSX.SeSidemenu & JSXBase.HTMLAttributes<HTMLSeSidemenuElement>;
            "se-sidemenu-item": LocalJSX.SeSidemenuItem & JSXBase.HTMLAttributes<HTMLSeSidemenuItemElement>;
            "se-slider": LocalJSX.SeSlider & JSXBase.HTMLAttributes<HTMLSeSliderElement>;
            "se-snackbar": LocalJSX.SeSnackbar & JSXBase.HTMLAttributes<HTMLSeSnackbarElement>;
            "se-stepper": LocalJSX.SeStepper & JSXBase.HTMLAttributes<HTMLSeStepperElement>;
            "se-stepper-item": LocalJSX.SeStepperItem & JSXBase.HTMLAttributes<HTMLSeStepperItemElement>;
            "se-tabbar": LocalJSX.SeTabbar & JSXBase.HTMLAttributes<HTMLSeTabbarElement>;
            "se-table": LocalJSX.SeTable & JSXBase.HTMLAttributes<HTMLSeTableElement>;
            "se-table-group": LocalJSX.SeTableGroup & JSXBase.HTMLAttributes<HTMLSeTableGroupElement>;
            "se-table-group-header": LocalJSX.SeTableGroupHeader & JSXBase.HTMLAttributes<HTMLSeTableGroupHeaderElement>;
            "se-table-item": LocalJSX.SeTableItem & JSXBase.HTMLAttributes<HTMLSeTableItemElement>;
            "se-table-item-header": LocalJSX.SeTableItemHeader & JSXBase.HTMLAttributes<HTMLSeTableItemHeaderElement>;
            "se-tooltip": LocalJSX.SeTooltip & JSXBase.HTMLAttributes<HTMLSeTooltipElement>;
            "se-tooltip-content": LocalJSX.SeTooltipContent & JSXBase.HTMLAttributes<HTMLSeTooltipContentElement>;
            "se-tooltip-footer": LocalJSX.SeTooltipFooter & JSXBase.HTMLAttributes<HTMLSeTooltipFooterElement>;
            "se-tooltip-header": LocalJSX.SeTooltipHeader & JSXBase.HTMLAttributes<HTMLSeTooltipHeaderElement>;
            "se-visual-linear": LocalJSX.SeVisualLinear & JSXBase.HTMLAttributes<HTMLSeVisualLinearElement>;
            "se-visual-radial": LocalJSX.SeVisualRadial & JSXBase.HTMLAttributes<HTMLSeVisualRadialElement>;
        }
    }
}
