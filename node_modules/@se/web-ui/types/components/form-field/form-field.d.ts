import { EventEmitter } from '../../stencil-public-runtime';
export declare class FormFieldComponent {
    el: HTMLElement;
    /**
     * Defines the layout of your form field.
     * `inline` is the default option, and is always applied if the type is set to `checkbox`.  This sets the input or select field adjacent to the label.
     * `stacked` option will render the input or select field below the label.
     */
    option: 'inline' | 'stacked';
    /**
     * Defines the spacing around the inside edge of a container.
     * `none` is 0px.
     * `small` is 4px.
     * `medium` is 8px.
     */
    padding: 'none' | 'small' | 'medium';
    /**
     * Optional property that defines if the field displays as a block in it's container.
     * When set to true, the field will be as wide as its container.
     * both field label auto adjust when it set to inline
     */
    block: boolean;
    /**
     * Optional property to define the proportion of the label width. The content (input) will take the rest of if. Defaulted to 40%
     */
    labelWidth: string;
    /**
     * Defines whether the form field's input is a text field (`input`), a checkbox (`checkbox`), a radio button (`radio`), or a dropdown menu (`select`).
     * `input` is the default type.
     */
    type: 'input' | 'checkbox' | 'radio' | 'select';
    /**
     * Sets a red border on an input field if there's an error, an orange border if there's a warning, and a green border if a successful input.
     */
    status: 'error' | 'warning' | 'success';
    /**
     * Defines the text value of the label in your form field.
     */
    label: string;
    /**
     * Defines the value of your form field to get passed to the parent component.
     * When the type is set to "input", this value will be the default placeholder in your input field.
     */
    value: string;
    /**
     * Determines if the input is required by the application.
     * Set to `false` by default.
     * Setting this value to `true` will render a red asterisk next to your label.
     */
    required: boolean;
    /**
     * Optional property that defines if the form field is disabled.  Set to `false` by default.
     */
    disabled: boolean;
    /**
     * Passes form data to the parent component on a click (`checkbox` or `radio`), menu change (`select`), or when the input field loses focus.
     */
    didSubmit: EventEmitter;
    inputSelectListenerHandler(event: any): void;
    checkboxListenerHandler(event: any): void;
    radioListenerHandler(event: any): void;
    disabledDidChange(): void;
    typeDidChange(): void;
    initLabel(): void;
    componentDidLoad(): void;
    handleEvent(event: any): void;
    render(): any;
}
