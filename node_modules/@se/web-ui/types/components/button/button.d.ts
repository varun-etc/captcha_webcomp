import { EventEmitter } from '../../stencil-public-runtime';
export declare class ButtonComponent {
    el: HTMLElement;
    /**
     * Defines the visual appearance of the button.
     * `flat` is the default option, which includes a gray background.
     * `raised` adds a box shadow to the button.
     * `outline` adds a border to the button.
     * `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application.
     */
    option: 'flat' | 'raised' | 'outline' | 'login' | 'signup' | 'inherit' | 'fab' | 'minifab';
    optionDidChange(): void;
    /**
     * Defines the size of the button.
     * `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component.
     * `small` is the default option, with a 14px font and a 32px height.
     * `medium` sets the font to 16px and the height to 40px.
     * `large` sets the font to 18px and the height to 48px.
     */
    size: 'nano' | 'small' | 'medium' | 'large';
    /**
     * Defines the background color of the button. The default setting is `standard`.
     */
    color: 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
     * Optional property that defines the value of your button, which gets passed to the parent component when clicking the button.
     */
    value: string;
    /**
     * Optional property that determines if your button includes an icon.
     */
    icon: string;
    /**
     * Optional property to change the color of the icon when needed. For example, the user dropdown in the header component.
     */
    iconColor: 'standard' | 'alternative' | 'primary' | 'secondary';
    /**
     * Property to specify if the button should only display an icon (no extra spacing).
     */
    iconOnly: boolean;
    /**
    * Optional property.
    * `button`	is the default setting, creating a clickable button.
    * `submit`	creates a "submit" button (useful to submit form-data).
    * `reset`	creates a reset button (useful to reset form-data to its initial values).
    */
    type: 'button' | 'submit' | 'reset';
    /**
    * Optional property that defines if the button is disabled.  Set to `false` by default.
    */
    disabled: boolean;
    /**
     * Optional property that defines if the button should be shown as selected. Used with the `se-radio-group` component.
     */
    selected: boolean;
    /**
    * Optional property that defines if the button has a caption or tooltip text.
    */
    caption: string;
    /**
     * Optional property that defines if the button displays as a block in it's container.
     * When set to true, the button will be as wide as its container.
     */
    block: boolean;
    grouped: boolean;
    /**
     * Passes button data to the parent component on a click.
     */
    didClick: EventEmitter<any>;
    /**
     * Sets the disabled property for your button from the parent component.
     * @param val set to `true` or `false`.
     */
    setDisabled(val: boolean): Promise<void>;
    /**
     * Indicates if the button is part of a group of buttons within the `se-radio-group` component.
     */
    setGrouped(): Promise<void>;
    buttonClickedHandler(ev: Event): void;
    innerId: any;
    setButtonId(): void;
    toggle(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    render(): any;
}
