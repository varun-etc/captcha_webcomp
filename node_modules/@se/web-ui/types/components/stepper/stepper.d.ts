export declare class StepperComponent {
    el: HTMLElement;
    stepperItems: HTMLSeStepperItemElement[];
    selectedItem: HTMLSeStepperItemElement;
    validatedChanged: boolean;
    /**
     * Sets the background color of your stepper.
     * The default setting is `primary`, implementing a green background for the stepper visual items.
     * The `alternative` setting implements a white background for the stepper visual items.  This setting is best used against a gray background.
     */
    color: 'primary' | 'alternative';
    /**
     * Defines if the stepper items must be completed sequentially.
     * The default setting is `true`, each stepper item must be validated before advancing to the next step.
     * `false` allows each step to be selected in any order.
     */
    linear: boolean;
    /**
     * Call the `reset` method to reset the stepper to the indicated step.  This also invalidates any validated steps.
     * It no step parameter is provided, it will reset to the first stepper item.
     */
    reset(step?: number): Promise<void>;
    /**
     * Call the `previous` method to navigate to the previous step from the step that is currently selected.
     */
    previous(): Promise<void>;
    /**
     * Call the `next` method to navigate to the next step from the step that is currently selected.
     * This will not work in linear mode if the next step is not validated.
     */
    next(validate: boolean): Promise<void>;
    selectStep(item: any): void;
    itemValidated(value: any): void;
    getItemStep(item: any): number;
    checkIfPreviousItemValidated(item: any): boolean;
    renderList(): any[][];
    componentDidLoad(): void;
    render(): any[];
}
