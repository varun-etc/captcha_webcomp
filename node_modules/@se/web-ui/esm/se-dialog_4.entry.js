import { r as registerInstance, c as createEvent, h, g as getElement } from './index-8c7316b3.js';

const dialogCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}:host{display:none !important;z-index:550;background-color:transparent !important;line-height:1.4}:host(.show-dialog){display:block !important}.small .dialog{width:400px;max-height:70%}.medium .dialog{width:550px;max-height:80%}.large .dialog{width:800px;max-height:90%}.fill .dialog{width:100%;max-height:100%}.dialog-wrapper{position:fixed !important;z-index:550;position:absolute;top:0;bottom:0;left:0;right:0;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.dialog{z-index:550;position:relative;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}.dialog.show-dialog{-webkit-animation-name:fadeIn;animation-name:fadeIn}.dialog.hide-dialog{-webkit-animation-name:fadeOut;animation-name:fadeOut}.dialog-background{position:fixed !important;position:absolute;top:0;bottom:0;left:0;right:0;-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;background-color:rgba(255, 255, 255, 0.6);z-index:500}.dialog-background.show-dialog{-webkit-animation-name:fadeIn;animation-name:fadeIn}.dialog-background.hide-dialog{-webkit-animation-name:fadeOut;animation-name:fadeOut}";

const SHOW = "show-dialog";
const HIDE = "hide-dialog";
const DialogComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the size of the modal.
         * `small`: used in alerts and messages
         * `medium`: default setting, used by other apps
         * `fill`: takes the full space of the screen
         */
        this.size = "medium";
        /**
         * Defines the color of the dialog header.
         * `alternative`: Alternative background with primary color for the text
         * `primary`: Primary color schema and default setting.
         */
        this.color = 'primary';
        /**
         * Indicates whether or not the dialog is open or closed.  Default setting is `false`.
         */
        this.open = false;
        /**
         * Option to enable clicking on the dialog's backdrop. Will automatically close the modal.  Default setting is `true`.
         */
        this.canBackdrop = true;
        this.backdrop = createEvent(this, "backdrop", 7);
        this.didClose = createEvent(this, "didClose", 7);
    }
    openDidChange() {
        if (this.open) {
            this.addAnimation(null);
        }
        else {
            this.removeAnimation(() => {
                this.didClose.emit();
            });
        }
    }
    /**
     * Emit the `backdrop` event from the dialog's parent component if `canBackdrop=true`. When the event is emitted, the dialog is automatically closed.
     */
    async backdropClicked() {
        if (this.canBackdrop) {
            // Only emit if canBackdrop was clicked
            this.backdrop.emit();
            this.open = false;
        }
    }
    assignDialogHeaderColor() {
        Array.from(this.el.querySelectorAll('se-dialog-header')).forEach((item) => {
            if (!item.color) {
                item.color = this.color;
            }
        });
    }
    /**
     * Emit the `backdrop` event from the dialog's parent component if the escape key is clicked and if `canBackdrop=true`.
     */
    handleKeyDown(ev) {
        if (ev.key === 'Escape' && this.open) {
            this.backdropClicked();
        }
    }
    addAnimation(callback) {
        this.el.classList.add(SHOW);
        if (this.menuInnerEl && this.backdropEl) {
            this.menuInnerEl.classList.add(SHOW);
            this.backdropEl.classList.add(SHOW);
        }
        setTimeout(() => {
            this.menuInnerEl.classList.remove(SHOW);
            this.backdropEl.classList.remove(SHOW);
            callback && callback();
        }, 500);
    }
    removeAnimation(callback) {
        this.menuInnerEl.classList.add(HIDE);
        this.backdropEl.classList.add(HIDE);
        setTimeout(() => {
            this.menuInnerEl.classList.remove(HIDE);
            this.backdropEl.classList.remove(HIDE);
            this.el.classList.remove(SHOW);
            callback && callback();
        }, 500);
    }
    componentDidLoad() {
        this.assignDialogHeaderColor();
        this.openDidChange();
    }
    render() {
        return (h("div", { class: `${this.size} dialog-wrapper` }, h("div", { class: "dialog-background", onClick: () => this.backdropClicked(), ref: el => this.backdropEl = el }), h("div", { class: "dialog", ref: el => (this.menuInnerEl = el) }, h("slot", null))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "open": ["openDidChange"]
    }; }
};
DialogComponent.style = dialogCss;

const dialogContentCss = ":host{overflow-x:auto}.se-icon-wrapper{height:60px}.inner-content{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;margin:0 8px}.se-dialog-content{padding:16px 8px;padding-bottom:0;position:relative;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.se-dialog-content.full-content{padding:0}.se-dialog-content.full-content .inner-content{margin:0}";

const DialogContentComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return (h("div", { class: ['se-dialog-content', this.option === 'fill' ? 'full-content' : ''].join(' ') }, h("span", { class: "se-icon-wrapper" }, this.icon ? h("se-icon", { size: "large", color: this.iconColor }, h("span", { innerHTML: this.icon })) : '', h("slot", { name: "icon" })), h("div", { class: "inner-content" }, h("slot", null))));
    }
};
DialogContentComponent.style = dialogContentCss;

const dialogFooterCss = ":host{position:relative;padding:8px;font-size:20px;min-height:40px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.flex{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}";

const DialogFooterComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    render() {
        return [
            h("div", { class: "flex" }, h("slot", { name: "start" })),
            h("slot", null)
        ];
    }
};
DialogFooterComponent.style = dialogFooterCss;

const dialogHeaderCss = ".se-dialog-header{position:relative;padding:4px 4px 4px 16px;font-size:20px;-moz-align-items:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.se-dialog-header .flex{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}.se-dialog-header div.middle{font-weight:300;line-height:30px;font-size:22px;margin:8px}.se-dialog-header.primary{min-height:44px;background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}.se-dialog-header.alternative{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#3DCD58;color:var(--se-primary, #3DCD58);margin-bottom:-16px}::slotted(h1),::slotted(h2),::slotted(h3),::slotted(h4),::slotted(h5),::slotted(h6){margin-top:0 !important;margin-bottom:0 !important}";

const DialogHeaderComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the color of the dialog header.
         * `alternative`: Alternative background with primary color for the text.
         * `primary`: Primary color schema.
         */
        this.color = 'primary';
    }
    render() {
        return (h("div", { class: ['se-dialog-header', this.color].join(' ') }, h("div", { class: "flex middle" }, h("slot", null)), h("slot", { name: "end" })));
    }
};
DialogHeaderComponent.style = dialogHeaderCss;

export { DialogComponent as se_dialog, DialogContentComponent as se_dialog_content, DialogFooterComponent as se_dialog_footer, DialogHeaderComponent as se_dialog_header };
