import { r as registerInstance, h, g as getElement, c as createEvent, H as Host } from './index-8c7316b3.js';

const stepperCss = "nav{color:#3DCD58;color:var(--se-primary, #3DCD58)}ol{display:-ms-flexbox;display:flex;padding:16px;margin-bottom:0;height:24px}.stepper-item-wrapper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}.indicator{text-align:center;font-size:14px;line-height:24px;font-weight:700;width:24px;height:24px;border-radius:100%;color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.indicator.se-icon{font-family:\"se-icon\";font-size:24px;font-weight:400}.indicator.se-icon:after{content:\"notification_ok\";font-size:32px;position:relative;right:28px}@supports (-ms-ime-align: auto){.indicator.se-icon:after{top:1px}}@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){.indicator.se-icon:after{top:1px}}.stepper-item{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;white-space:nowrap}.stepper-item:hover{cursor:pointer}.stepper-item.disabled{pointer-events:none}.stepper-item-label{display:inline;color:#CBCBCB;color:var(--se-hover-standard, #CBCBCB);font-size:16px;font-weight:700;line-height:19px;margin:0 8px}.stepper-item-label:hover{font-weight:400}se-divider{width:25px;margin-right:8px}.primary .selected .indicator{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}.primary .selected .stepper-item-label{color:#434343;color:var(--se-focus, #434343)}.alternative .selected .indicator{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#3DCD58;color:var(--se-primary, #3DCD58)}.alternative .selected .stepper-item-label{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}";

const StepperComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.stepperItems = [];
        /**
         * Sets the background color of your stepper.
         * The default setting is `primary`, implementing a green background for the stepper visual items.
         * The `alternative` setting implements a white background for the stepper visual items.  This setting is best used against a gray background.
         */
        this.color = 'primary';
        /**
         * Defines if the stepper items must be completed sequentially.
         * The default setting is `true`, each stepper item must be validated before advancing to the next step.
         * `false` allows each step to be selected in any order.
         */
        this.linear = true;
    }
    /**
     * Call the `reset` method to reset the stepper to the indicated step.  This also invalidates any validated steps.
     * It no step parameter is provided, it will reset to the first stepper item.
     */
    async reset(step = 1) {
        if (step >= this.getItemStep(this.selectedItem)) {
            return; // don't advance the stepper when clicking the reset button
        }
        this.stepperItems.forEach((item) => {
            if (this.getItemStep(item) >= step) {
                item.validated = false;
            }
        });
        this.selectStep(this.stepperItems[step - 1]);
    }
    /**
     * Call the `previous` method to navigate to the previous step from the step that is currently selected.
     */
    async previous() {
        // do not trigger this method when the first stepper item is the active item
        if (this.getItemStep(this.selectedItem) > 1) {
            const index = this.stepperItems.indexOf(this.selectedItem);
            this.selectStep(this.stepperItems[index - 1]);
        }
    }
    /**
     * Call the `next` method to navigate to the next step from the step that is currently selected.
     * This will not work in linear mode if the next step is not validated.
     */
    async next(validate) {
        if (validate) {
            this.selectedItem.validated = true;
        }
        if (!this.linear || this.selectedItem.validated) {
            const index = this.stepperItems.indexOf(this.selectedItem);
            this.selectStep(this.stepperItems[index + 1]);
        }
    }
    selectStep(item) {
        this.selectedItem.active = false;
        this.selectedItem = item;
        this.selectedItem.active = true;
    }
    itemValidated(value) {
        this.validatedChanged = value;
    }
    getItemStep(item) {
        return this.stepperItems.indexOf(item) + 1;
    }
    checkIfPreviousItemValidated(item) {
        if (this.getItemStep(item) > 1 && this.linear) {
            return !this.stepperItems[this.stepperItems.indexOf(item) - 1].validated;
        }
        return false;
    }
    renderList() {
        return this.stepperItems.map((item) => {
            return [
                h("li", { class: ["stepper-item-wrapper", (this.getItemStep(this.selectedItem) === this.getItemStep(item) || item.validated) ? "selected" : ''].join(' ') }, h("div", { class: ["stepper-item", this.checkIfPreviousItemValidated(item) ? "disabled" : ''].join(' '), onClick: () => this.selectStep(item) }, h("span", { class: ["indicator", item.validated && !item.active ? "se-icon" : ''].join(' ') }, this.getItemStep(item)), h("span", { class: "stepper-item-label" }, item.label)), this.getItemStep(item) !== this.stepperItems.length ? h("se-divider", null) : '')
            ];
        });
    }
    componentDidLoad() {
        this.stepperItems = Array.from(this.el.querySelectorAll('se-stepper-item'));
        this.stepperItems.forEach((item) => {
            if (this.linear && !item.validated) {
                item.validated = false;
            }
        });
        this.selectedItem = this.stepperItems[0];
        this.selectedItem.active = true;
    }
    render() {
        return [
            h("nav", { class: this.color }, h("ol", null, this.renderList())),
            h("slot", null)
        ];
    }
    get el() { return getElement(this); }
};
StepperComponent.style = stepperCss;

const stepperItemCss = ":host(.navitem-hidden){display:none !important}";

const StepperItemComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.didValidate = createEvent(this, "didValidate", 7);
    }
    validatedDidChange() {
        this.didValidate.emit(this.validated);
    }
    render() {
        return (h(Host, { class: [this.active ? 'active' : 'navitem-hidden'].join(' ') }, h("slot", null)));
    }
    static get watchers() { return {
        "validated": ["validatedDidChange"]
    }; }
};
StepperItemComponent.style = stepperItemCss;

export { StepperComponent as se_stepper, StepperItemComponent as se_stepper_item };
