import { r as registerInstance, h, g as getElement, c as createEvent, H as Host } from './index-8c7316b3.js';
import { A as AppInfo, g as getFullTitle } from './appInfo-46118859.js';

const burgerMenu = `<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.2, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 1024 1024" style="enable-background:new 0 0 1024 1024;" xml:space="preserve">
<rect x="128" y="468.8" width="768" height="86.4"/>
<rect x="128" y="211" width="768" height="86"/>
<rect x="128" y="726.8" width="768" height="86.4"/>
</svg>
`;

const headerCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}:host{-webkit-box-sizing:border-box;box-sizing:border-box;height:auto;padding:0;width:100%;min-height:64px;max-height:64px;z-index:5;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-moz-align-items:center;-ms-flex-align:center;align-items:center;white-space:nowrap;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}::slotted([slot=end]){display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.fill-space{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}.d-flex{-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}.d-flex-column{-moz-align-items:left;-ms-flex-align:left;align-items:left;display:-ms-flexbox;display:flex;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column}.header-title-wrapper{margin-right:16px}.project-section{color:#626469;margin:0 16px;font-size:16px;font-weight:300;line-height:24px;text-align:left}.header-menu-button{margin-left:6px}.menu-sidenav{cursor:pointer;margin-right:-17px;padding:8px 16px}.menu-sidenav se-icon{vertical-align:-webkit-baseline-middle;vertical-align:-moz-middle-with-baseline}.header-title{color:#3DCD58;color:var(--se-primary, #3DCD58);padding-left:18px;font-size:20px;line-height:20px;margin:0}.header-title .light{font-weight:300}.header-title-type{color:#3DCD58;color:var(--se-primary, #3DCD58);line-height:24px;padding-left:18px;font-size:12px;margin:1px 0 -4px 0}.mat-toolbar-single-row{padding:0}.font-lighter{font-weight:100}se-icon-schneider{width:140px;padding-left:9px !important;margin-top:5px}se-icon-ecostruxure{margin-bottom:-5px}.padding-container.link-container{font-size:13px}@media (max-width: 599px){se-icon-schneider{display:none}.mat-toolbar-single-row{height:64px}}";

const HeaderComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Sets the title of your application.
         */
        this.appTitle = "";
        /**
         * Defines the domain of the application. By default, the domain is `ecostruxure`. If `none`, then no domain will be displayed.
         */
        this.domain = AppInfo.domain;
    }
    onClickMenu() {
        this.elLeftNav.toggle();
    }
    async componentWillLoad() {
        this.elLeftNav = this.el.querySelector("se-sidemenu");
        this.hasMenu = !!this.elLeftNav;
    }
    render() {
        const title = getFullTitle(this.appTitle);
        let domain;
        if (this.domain.toLowerCase() === `ecostruxure`) {
            domain = h("se-icon-ecostruxure", { class: "header-title-type" });
        }
        else if (this.domain.toLowerCase() !== "none") {
            domain = h("span", { class: "header-title-type" }, this.domain);
        }
        return [
            h("div", { class: "d-flex" }, this.hasMenu ?
                h("span", { class: "menu-sidenav", onClick: () => this.onClickMenu() }, h("se-icon", { size: "medium", color: "primary" }, h("span", { innerHTML: burgerMenu })))
                : '', h("div", { class: "d-flex-column header-title-wrapper" }, domain, h("h1", { class: "header-title no-margin" }, h("span", null, title.first), h("span", { class: "light" }, "\u00A0", title.last))), this.project ? h("span", { class: "project-section" }, this.project) : ''),
            h("div", { class: "padding-container d-flex" }, h("slot", { name: "start" })),
            h("div", { class: "fill-space center-header-container" }, h("slot", null)),
            h("div", { class: "padding-container d-flex" }, h("slot", { name: "end" }), h("se-icon-schneider", { class: "header-title-type" }))
        ];
    }
    get el() { return getElement(this); }
};
HeaderComponent.style = headerCss;

const test_results_nok = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M542 512l134 134c8 9 8 22 0 30-4 5-9 7-15 7-5 0-11-2-15-7L512 542 378 676c-5 5-10 7-16 7-5 0-11-2-15-7-8-8-8-21 0-30l134-134-134-134c-8-9-8-22 0-30 9-9 22-9 31 0l134 134 134-134c8-9 22-9 30 0 8 8 8 21 0 30z"/></svg>`;

const sidemenuCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}:host{display:none;position:absolute;top:0;left:0;height:100%;width:100%;z-index:160;background-color:transparent !important}:host(.show-menu){display:block}:host(.show-menu) .menu-background{background:rgba(255, 255, 255, 0.6);height:100%;position:absolute;top:0;right:0;bottom:0;left:0;width:100%;z-index:100}:host(.show-menu) .actual-menu{background-color:#FFFFFF;-webkit-box-shadow:rgba(0, 0, 0, 0.3) 1px 1px 4px 0px;box-shadow:rgba(0, 0, 0, 0.3) 1px 1px 4px 0px;height:100vh;max-height:100%;overflow:hidden;position:relative;width:250px;max-width:80%;z-index:150}:host(.open-item) .actual-menu{width:80%}.menu-background.show-menu{-webkit-animation-name:fadeIn;animation-name:fadeIn}.menu-background.hide-menu{-webkit-animation-name:fadeOut;animation-name:fadeOut}.actual-menu.show-menu{-webkit-animation-name:slideInLeft;animation-name:slideInLeft}.actual-menu.hide-menu{-webkit-animation-name:slideOutLeft;animation-name:slideOutLeft}.animated{-webkit-animation-duration:0.2s;animation-duration:0.2s;animation-duration:0.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both}.flex{display:-ms-flexbox;display:flex;-moz-flex:0 1 auto;-ms-flex:0 1 auto;flex:0 1 auto;width:100%}.flex.d-flex-center{-ms-flex-align:center;align-items:center}.menu-sidenav{margin-right:-6px;cursor:pointer}.menu-sidenav se-icon{vertical-align:-webkit-baseline-middle;vertical-align:-moz-middle-with-baseline}.header-title{margin:0}.footer-icon{text-align:center}.footer-icon:last-child{margin-bottom:3px}.external-link{background-color:#F7F7F7;padding:16px;text-align:center}";

const SHOW_MENU = 'show-menu';
const HIDE_MENU = 'hide-menu';
const OPEN_ITEM = 'open-item';
const SidemenuComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.open = false;
        this.items = [];
        /**
         * Defines the text displayed in the header of the Sidemenu.
         * The default value is `Menu`.
         */
        this.label = 'Menu';
        /*
        * Defines the link to be uses in the external-link element of the Sidemenu.
        * The default value is www.se.com, which will generate if no link is defined.
        * If a different url is provided it will replace the default value.
        * If an empty string is provided the external link element will not be generated.
       */
        this.link = 'www.se.com';
        this.toggled = createEvent(this, "toggled", 7);
    }
    /**
     * Toggle the sidemenu. Optionally, pass the `item` or `id` of a sidemenu-item to open that particular menu item.
     *
     * ex: `document.getElementById("main-sidemenu").toggle("side-about");`
     */
    async toggle(itemName) {
        // Only perform toggle if no item name is passed or menu is closed
        if (!this.open || !itemName || itemName && !this.open) {
            // Only perform open animation if menu is closed
            if (!this.open) {
                this.el.classList.add(SHOW_MENU);
                this.addAnimation(null);
            }
            this.open = !this.open;
        }
        else if (this.selectedItem && this.isItemElement(this.selectedItem, itemName)) {
            // Deselect the active item if a new item name is passed
            this.unselectAll();
        }
        if (this.open) {
            if (itemName) {
                // If an item name was provided, open that item in the menu (#228)
                const itemElement = this.getItemElement(itemName);
                if (itemElement) {
                    // Select the new active element
                    this.setActive(itemElement);
                }
            }
            else {
                try {
                    if (this.items.find(x => x.classList.contains('active'))) {
                        this.el.classList.add(OPEN_ITEM);
                    }
                }
                catch (error) {
                    console.log(error);
                }
            }
            // Dispatch the 'opened' event
            this.toggled.emit({ state: 'open' });
        }
        else {
            // Remove css classes and unselect the active element
            this.removeAnimation(() => {
                this.el.classList.remove(SHOW_MENU);
            });
            this.unselectAll();
            // Dispatch the 'closed' event
            this.toggled.emit({ state: 'closed' });
        }
    }
    noSelectedItem() {
        return !this.items.find(x => x === this.selectedItem);
    }
    unselectAll() {
        this.el.classList.remove(OPEN_ITEM);
        if (this.selectedItem && !this.selectedItem.childElementCount) {
            this.selectedItem = undefined;
            this.items.forEach((item) => {
                item.active = false;
            });
        }
    }
    getItemElement(name) {
        return this.items.find(i => this.isItemElement(i, name));
    }
    isItemElement(elm, name) {
        return elm.getAttribute('item') === name || elm.getAttribute('id') === name;
    }
    setActive(item) {
        if (this.items.length) {
            this.items.forEach((item) => {
                item.active = false;
            });
            setTimeout(() => {
                item.active = true;
                this.selectedItem = item;
                this.el.classList.add(OPEN_ITEM);
            }, 100);
        }
    }
    addAnimation(callback) {
        try {
            this.menuInnerEl.classList.add(SHOW_MENU);
            this.backdropEl.classList.add(SHOW_MENU);
            setTimeout(() => {
                this.menuInnerEl.classList.remove(SHOW_MENU);
                this.backdropEl.classList.remove(SHOW_MENU);
                callback && callback();
            }, 200);
        }
        catch (error) {
            console.log(error);
        }
    }
    removeAnimation(callback) {
        try {
            this.menuInnerEl.classList.add(HIDE_MENU);
            this.backdropEl.classList.add(HIDE_MENU);
            setTimeout(() => {
                this.menuInnerEl.classList.remove(HIDE_MENU);
                this.backdropEl.classList.remove(HIDE_MENU);
                callback && callback();
            }, 200);
        }
        catch (error) {
            console.log(error);
        }
    }
    watchItemList() {
        this.observer = new MutationObserver((mutations) => {
            let activeItem = false;
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    this.setItemsArray();
                }
                if (mutation.removedNodes.length) {
                    this.setItemsArray();
                    this.items.forEach((item) => {
                        if (item.active) {
                            activeItem = true;
                        }
                    });
                    if (!activeItem && this.selectedItem) {
                        // console.log(this.selectedItem);
                        this.selectedItem = undefined;
                    }
                }
            });
        });
        this.observer.observe(this.el, { childList: true });
    }
    setItemsArray() {
        this.items = Array.from(this.el.querySelectorAll('se-sidemenu-item'));
    }
    renderList() {
        return this.items.map((item) => {
            return [
                h("se-list-item", { class: [!item.childElementCount ? 'hide-nav-icon' : '', 'sidemenu-list-item'].join(' '), option: "nav", onClick: () => this.setActive(item), selected: item.active, item: item.item, id: item.id ? `list-${item.id}` : '' }),
            ];
        });
    }
    componentWillLoad() {
        this.setItemsArray();
        this.watchItemList();
    }
    componentDidUnload() {
        this.items.length = 0;
        this.selectedItem = undefined;
        this.observer.disconnect();
    }
    render() {
        return [
            h("div", { class: "menu-background animated d-flex-row flex", onClick: () => this.toggle(), ref: el => this.backdropEl = el }),
            h("div", { class: "actual-menu animated full-content d-flex-column flex", ref: el => this.menuInnerEl = el }, h("div", { class: "d-flex flex" }, h("se-block", { width: "250px" }, h("div", { class: "d-flex-center flex" }, h("span", { class: "menu-sidenav", onClick: () => this.toggle() }, h("se-icon", { size: "large", color: "primary" }, h("span", { innerHTML: test_results_nok }))), h("h3", { class: "header-title" }, this.label)), h("se-divider", null), h("se-block-content", { option: "fill" }, h("se-list", { option: "nav" }, this.renderList())), h("se-icon-lifeison", { class: "footer-icon", color: "standard" }), this.link ?
                h("div", { class: "external-link" }, h("se-link", { class: "sidemenu-link", url: `http://${this.link}` }, this.link)) : ''), h("se-divider", { option: "vertical" }), h("se-block", { ref: el => this.menuItemInnerEl = el }, h("slot", null))))
        ];
    }
    get el() { return getElement(this); }
};
SidemenuComponent.style = sidemenuCss;

const sidemenuItemCss = "@-webkit-keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadeOut{from{opacity:1}to{opacity:0}}@keyframes fadeOut{from{opacity:1}to{opacity:0}}@-webkit-keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@keyframes slideInLeft{from{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0);visibility:visible}to{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}}@-webkit-keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@keyframes slideOutLeft{from{-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);visibility:visible}to{-webkit-transform:translate3d(-100%, 0, 0);transform:translate3d(-100%, 0, 0)}}@-webkit-keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@keyframes slideCollapseDown{from{-webkit-transform:scaleY(0);transform:scaleY(0);visibility:visible}to{-webkit-transform:scaleY(1);transform:scaleY(1)}}@-webkit-keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}@keyframes slideCollapseUp{from{-webkit-transform:scaleY(1);transform:scaleY(1)}to{-webkit-transform:scaleY(0);transform:scaleY(0)}}:host{height:100%;width:100%}:host [role=sidenavpanel]{height:100%}:host(.navitem-hidden){display:none !important;height:0}";

const SidemenuItemComponent = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines if the menu item is active or not.
         * The default setting is `false`.
         */
        this.active = false;
        this.didClick = createEvent(this, "didClick", 7);
    }
    activeDidChange() {
        if (this.active) {
            this.didClick.emit();
        }
    }
    render() {
        return (h(Host, { role: 'sidenavpanel', "aria-hidden": { 'true': !this.active }, class: [this.active ? 'active' : 'navitem-hidden'].join(' ') }, h("slot", null)));
    }
    static get watchers() { return {
        "active": ["activeDidChange"]
    }; }
};
SidemenuItemComponent.style = sidemenuItemCss;

export { HeaderComponent as se_header, SidemenuComponent as se_sidemenu, SidemenuItemComponent as se_sidemenu_item };
