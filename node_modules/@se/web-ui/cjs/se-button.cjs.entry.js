'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-fec6655d.js');

const buttonCss = ":host{min-width:0;display:-ms-inline-flexbox;display:inline-flex}:host(.disabled){pointer-events:none}:host(.display-block){display:-ms-flexbox;display:flex}:host(.display-block) button{width:100%;margin-top:8px;margin-left:0;margin-right:0}:host(.banner-child) button{height:40px;margin-right:16px}@media screen and (max-width: 767px){:host(.banner-child){display:-ms-flexbox;display:flex}:host(.banner-child) button{width:100%}}@media screen and (min-width: 900px){:host(.banner-child) button.outline{color:#FFFFFF;border-color:#FFFFFF}}:host(.grouped) button{margin:4px 0;height:32px;font-size:16px;padding:0 8px;font-weight:300;line-height:1.2 !important;font-size:12px;border-radius:0;border-left:1px solid #333333}:host(.grouped) button.iconOnly{padding:0 4px}:host(.grouped:first-child) button{margin-left:4px;border-left:none;border-top-left-radius:2px;border-bottom-left-radius:2px}:host(.grouped:last-child) button{margin-right:4px;border-top-right-radius:2px;border-bottom-right-radius:2px}:host(.backtotop) button.fab{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#333333}:host(.backtotop) button.fab:hover{background-color:#0F0F0F;background-color:var(--se-standard-contrast, #0F0F0F)}:host([slot=trigger]) button{padding-right:22px}:host([slot=trigger]) button:after{content:\"\";position:absolute;top:50%;right:12px;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid}::slotted(se-icon[slot=icon]),se-icon{margin-right:8px}:host[icon-only] ::slotted(se-icon[slot=icon]){margin-right:0}button{padding:0 16px;margin:4px;border:none;border-radius:2px;outline:none;-webkit-transition:0.2s;transition:0.2s;cursor:pointer;font-family:inherit;font-weight:300;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-ms-flex-pack:center;justify-content:center}button.iconOnly{padding:0 4px}button.iconOnly ::slotted(se-icon[slot=icon]),button.iconOnly se-icon{margin-right:0}button[disabled]{cursor:default;opacity:0.5}button.raised{-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3)}button.inherit{background-color:transparent !important;color:inherit !important}button.nano{height:24px}button.nano .text{font-size:12px}button.small{height:32px}button.small .text{font-size:16px}button.medium{height:40px}button.medium .text{font-size:16px}button.large{height:48px}button.large .text{font-size:18px}button.standard{color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}button.standard:hover,button.standard:focus{color:#0F0F0F;color:var(--se-hover-standard-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}button.standard.outline{border:1px solid;border-color:#333333;background-color:transparent}button.standard.outline:hover,button.standard.outline:focus{background-color:rgba(203, 203, 203, 0.2)}button.alternative{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}button.alternative:hover,button.alternative:focus{color:#0F0F0F;color:var(--se-hover-alternative-contrast, #0F0F0F);background-color:#CBCBCB;background-color:var(--se-hover-alternative, #CBCBCB)}button.alternative.outline{border:1px solid;background-color:transparent;color:#FFFFFF;color:var(--se-alternative, #FFFFFF);border-color:#FFFFFF;border-color:var(--se-alternative, #FFFFFF)}button.alternative.outline:hover,button.alternative.outline:focus{background-color:rgba(203, 203, 203, 0.6)}button.primary{color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF);background-color:#3DCD58;background-color:var(--se-primary, #3DCD58)}button.primary:hover,button.primary:focus{color:#FFFFFF;color:var(--se-hover-primary-contrast, #FFFFFF);background-color:#32AD3C;background-color:var(--se-hover-primary, #32AD3C)}button.primary.outline{border:1px solid;background-color:transparent;color:#3DCD58;color:var(--se-primary, #3DCD58);border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}button.primary.outline:hover,button.primary.outline:focus{background-color:rgba(61, 205, 88, 0.3)}button.primary.outline[disabled]{background-color:transparent}button.secondary{color:#FFFFFF;color:var(--se-secondary-contrast, #FFFFFF);background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6)}button.secondary:hover,button.secondary:focus{color:#FFFFFF;color:var(--se-hover-secondary-contrast, #FFFFFF);background-color:#0087CD;background-color:var(--se-hover-secondary, #0087CD)}button.secondary.outline{background-color:transparent;border:1px solid;color:#42B4E6;color:var(--se-secondary, #42B4E6);border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}button.secondary.outline:hover,button.secondary.outline:focus{background-color:rgba(66, 180, 230, 0.3)}button.secondary.outline[disabled]{background-color:transparent}button.selected,button.selected:focus,button.outline.selected,button.outline.selected:focus{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}button.login,button.signup{height:32px;font-size:18px;line-height:22px}button.fab{cursor:pointer;border-radius:50%;font-size:24px;width:56px;height:56px;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28)}button.fab:hover,button.fab:focus{-webkit-box-shadow:0 0 8px rgba(0, 0, 0, 0.14), 0 8px 16px rgba(0, 0, 0, 0.28);box-shadow:0 0 8px rgba(0, 0, 0, 0.14), 0 8px 16px rgba(0, 0, 0, 0.28)}button.fab.alternative{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#3DCD58;color:var(--se-primary, #3DCD58)}button.minifab{width:40px;height:40px;border-radius:50%;margin:0 20px 20px 0px;padding:0;margin:0 0 15px 0;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}button.minifab:hover,button.minifab:focus{-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}button.minifab[data-tooltip]{overflow:visible}button.minifab[data-tooltip]:before{font-weight:300;border-radius:23.27px;content:attr(data-tooltip);font-size:12px;padding:5px 7px;margin-right:12px;position:absolute;right:100%;white-space:nowrap;color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}button.standard:active,button.alternative:active,button.primary:active,button.secondary:active,button.outline:active,button.minifab:active{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469)}button.outline:active,button.outline.selected{border-color:#626469;border-color:var(--se-selected, #626469)}";

const ButtonComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Defines the visual appearance of the button.
         * `flat` is the default option, which includes a gray background.
         * `raised` adds a box shadow to the button.
         * `outline` adds a border to the button.
         * `login` and `signup` are specific options for "Login" and "Sign Up" buttons in your application.
         */
        this.option = 'flat';
        /**
         * Defines the size of the button.
         * `nano` sets the font to 12px font and a 24px height.  Used primarily with the `se-radio-group` component.
         * `small` is the default option, with a 14px font and a 32px height.
         * `medium` sets the font to 16px and the height to 40px.
         * `large` sets the font to 18px and the height to 48px.
         */
        this.size = 'small';
        /**
         * Defines the background color of the button. The default setting is `standard`.
         */
        this.color = 'standard';
        /**
         * Property to specify if the button should only display an icon (no extra spacing).
         */
        this.iconOnly = false;
        /**
        * Optional property.
        * `button`	is the default setting, creating a clickable button.
        * `submit`	creates a "submit" button (useful to submit form-data).
        * `reset`	creates a reset button (useful to reset form-data to its initial values).
        */
        this.type = 'button';
        /**
        * Optional property that defines if the button is disabled.  Set to `false` by default.
        */
        this.disabled = false;
        this.didClick = index.createEvent(this, "didClick", 7);
    }
    optionDidChange() {
        if (this.option === 'login') {
            this.color = 'primary';
            this.block = true;
        }
        if (this.option === 'signup') {
            this.color = 'secondary';
            this.block = true;
        }
    }
    /**
     * Sets the disabled property for your button from the parent component.
     * @param val set to `true` or `false`.
     */
    async setDisabled(val) {
        this.disabled = val;
    }
    /**
     * Indicates if the button is part of a group of buttons within the `se-radio-group` component.
     */
    async setGrouped() {
        this.grouped = true;
    }
    buttonClickedHandler(ev) {
        if (this.type !== 'button') {
            // this button wants to specifically submit a form
            // climb up the dom to see if we're in a <form>
            // and if so, then use JS to submit it
            // https://github.com/ionic-team/ionic/blob/master/core/src/components/button/button.tsx
            const form = this.el.closest('form');
            if (form) {
                ev.preventDefault();
                const fakeButton = window.document.createElement('button');
                fakeButton.type = this.type;
                fakeButton.style.display = 'none';
                form.appendChild(fakeButton);
                fakeButton.click();
                fakeButton.remove();
            }
        }
    }
    setButtonId() {
        const id = this.el.getAttribute('id');
        if (id) {
            this.innerId = `wc-${id}`;
        }
    }
    toggle() {
        if (this.disabled)
            return;
        if (this.grouped) {
            this.selected = !this.selected;
            this.didClick.emit({ selected: this.selected, value: this.value });
        }
        if (this.option === 'minifab') {
            this.didClick.emit({ value: this.caption });
        }
    }
    componentWillLoad() {
        this.optionDidChange();
    }
    componentDidLoad() {
        this.setButtonId();
    }
    render() {
        const { color, size, option, icon, iconColor, iconOnly, selected } = this;
        const isIconOnly = iconOnly || option && option.includes('fab');
        return (index.h(index.Host, { class: { 'disabled': this.disabled, 'grouped': this.grouped, 'display-block': this.block, 'minifab': this.option === 'minifab' } }, index.h("button", { disabled: this.disabled, "data-tooltip": this.caption, type: this.type, id: this.innerId, onClick: () => this.toggle(), class: {
                [color]: true,
                [size]: true,
                [option]: true,
                'selected': selected,
                'iconOnly': isIconOnly
            } }, icon && index.h("se-icon", { size: this.grouped && this.size !== 'nano' ? 'medium' : 'small', color: iconColor }, icon), index.h("slot", { name: "icon" }), !isIconOnly && index.h("span", { class: "text" }, index.h("slot", null)))));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "option": ["optionDidChange"]
    }; }
};
ButtonComponent.style = buttonCss;

exports.se_button = ButtonComponent;
