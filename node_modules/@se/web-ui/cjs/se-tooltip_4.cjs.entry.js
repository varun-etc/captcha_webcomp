'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-fec6655d.js');

const tooltipCss = ":host{position:relative;display:inline-block}:host .tooltip{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6);max-width:260px;width:-moz-max-content;width:-webkit-max-content;width:max-content;visibility:hidden;position:absolute;padding:8px 8px;font-size:12px;display:inline-table;line-height:14px;z-index:-1;border-radius:2px px;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);opacity:0;-webkit-transition:0.2s;transition:0.2s}:host .tooltip::after{content:\"\";position:absolute;border:5px solid}:host .tooltip.show{opacity:1;visibility:visible;z-index:10}:host .tooltip-top .tooltip{margin-bottom:8px;bottom:100%;left:50%;transform:translateX(-50%) translateY(0%);-webkit-transform:translateX(-50%) translateY(0%);-moz-transform:translateX(-50%) translateY(0%);-ms-transform:translateX(-50%) translateY(0%);-o-transform:translateX(-50%) translateY(0%)}:host .tooltip-top .tooltip::after{top:100%;left:50%;margin-left:-5px;border-color:#42B4E6 transparent transparent transparent;border-color:var(--se-secondary, #42B4E6) transparent transparent transparent}:host .tooltip-bottom .tooltip{margin-top:8px;top:100%;left:50%;transform:translateX(-50%) translateY(0%);-webkit-transform:translateX(-50%) translateY(0%);-moz-transform:translateX(-50%) translateY(0%);-ms-transform:translateX(-50%) translateY(0%);-o-transform:translateX(-50%) translateY(0%)}:host .tooltip-bottom .tooltip::after{bottom:100%;left:50%;margin-left:-5px;border-color:transparent transparent #42B4E6 transparent;border-color:transparent transparent var(--se-secondary, #42B4E6) transparent}:host .tooltip-left .tooltip{left:-8px;top:50%;transform:translateX(-100%) translateY(-50%);-webkit-transform:translateX(-100%) translateY(-50%);-moz-transform:translateX(-100%) translateY(-50%);-ms-transform:translateX(-100%) translateY(-50%);-o-transform:translateX(-100%) translateY(-50%)}:host .tooltip-left .tooltip::after{top:50%;left:100%;margin-top:-5px;border-color:transparent transparent transparent #42B4E6;border-color:transparent transparent transparent var(--se-secondary, #42B4E6)}:host .tooltip-right .tooltip{margin-left:8px;left:100%;top:50%;transform:translateX(0%) translateY(-50%);-webkit-transform:translateX(0%) translateY(-50%);-moz-transform:translateX(0%) translateY(-50%);-ms-transform:translateX(0%) translateY(-50%);-o-transform:translateX(0%) translateY(-50%)}:host .tooltip-right .tooltip::after{top:50%;right:100%;margin-top:-5px;border-color:transparent #42B4E6 transparent transparent;border-color:transparent var(--se-secondary, #42B4E6) transparent transparent}:host([hidden]){display:none}.tooltip-fab .tooltip,.tooltip-fab-top .tooltip{position:fixed}.tooltip-fab.tooltip-top .tooltip,.tooltip-fab.tooltip-left .tooltip{top:auto;left:auto;-webkit-transform:none;transform:none}.tooltip-fab.tooltip-left .tooltip{right:104px;bottom:calc((56px / 2) + 16px);-webkit-transform:translateY(50%);transform:translateY(50%)}.tooltip-fab.tooltip-top .tooltip{right:16px;bottom:72px;min-width:80px}.tooltip-fab-top.tooltip-top .tooltip,.tooltip-fab-top.tooltip-left .tooltip,.tooltip-fab-top.tooltip-bottom .tooltip{left:auto;-webkit-transform:none;transform:none}.tooltip-fab-top.tooltip-left .tooltip{top:calc(-100vh + 64px + 48px);right:104px;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.tooltip-fab-top.tooltip-top .tooltip{top:auto;right:16px;bottom:calc(100vh - 64px - 16px);min-width:80px}.tooltip-fab-top.tooltip-bottom .tooltip{top:calc(-100vh + 64px + 24px + 56px);right:16px;min-width:80px}";

const TooltipComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Indicates the position of your tooltip.
         * The default setting is `bottom`, rendering the tooltip below its parent.
         */
        this.position = "bottom";
        /**
         * Indicates the action of your tooltip.
         * The default setting is `hover`, triggering the tooltip when hovering over the parent element.
         * The `click` action triggers the tooltip when you click on the parent element.
         */
        this.action = "hover";
        this.opened = false;
        this.didOpen = index.createEvent(this, "didOpen", 7);
        this.didClose = index.createEvent(this, "didClose", 7);
        this.closeTooltips = index.createEvent(this, "closeTooltips", 7);
    }
    /**
     * Method to open the tooltip separate from hovering or clicking the parent element.
     */
    async open() {
        this.opened = true;
    }
    /**
     * Method to close the tooltip separate from hovering or clicking the parent element.
     */
    async close() {
        this.opened = false;
    }
    handleTouchstart(ev) {
        this._toggle(ev);
    }
    handleTouchEnd(ev) {
        this._toggle(ev);
    }
    handleMouseOver(ev) {
        if (this.action === "hover") {
            this._toggle(ev);
        }
    }
    handleMouseLeave(ev) {
        if (this.action === "hover" && this.opened) {
            this._toggle(ev);
        }
    }
    handleMouseClick(ev) {
        if (this.action === "click" && this.opened) {
            this._toggle(ev);
        }
    }
    handleCloseTooltip() {
        this.close();
    }
    _toggle(ev) {
        ev.stopPropagation();
        if (this.opened) {
            this.close();
            this.didClose.emit(ev);
        }
        else {
            this.closeTooltips.emit(); // close other tooltips before opening target tooltip
            this.open();
            this.didOpen.emit(ev);
        }
    }
    render() {
        const containsFab = this.el.querySelector("se-fab");
        const tooltipPosition = this.el.getAttribute("position");
        if (!!this.el.shadowRoot.querySelector("div .tooltip") && containsFab && containsFab.getAttribute("position") === "top") {
            const fabButtonHeight = this.el.querySelector("se-fab").shadowRoot.querySelector("se-button").shadowRoot.querySelector("button");
            const fabHeight = this.el.querySelector("se-fab").shadowRoot.querySelector("div").offsetTop;
            if (!!tooltipPosition && tooltipPosition === "left") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `top: calc(${fabHeight}px + ${fabButtonHeight.offsetTop}px + (${fabButtonHeight.offsetHeight}px / 2))`);
            }
            else if (!!tooltipPosition && tooltipPosition === "top") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `bottom: calc(100vh - ${fabHeight}px - 8px `);
            }
            else if (tooltipPosition === null || tooltipPosition === "bottom") {
                this.el.shadowRoot.querySelector(".tooltip").setAttribute("style", `top: calc(${fabHeight}px + ${fabButtonHeight.offsetHeight}px + 8px`);
            }
        }
        return (index.h("div", { class: [
                this.position ? `tooltip-${this.position}` : 'tooltip-bottom',
                containsFab ? `tooltip-fab${containsFab.getAttribute("position") === "top" ? '-top' : ''}` : ''
            ]
                .join(' ') }, index.h("div", { onClick: this.action == "click" ? ev => { this._toggle(ev); } : () => { } }, index.h("slot", { name: "tooltip" })), index.h("div", { class: `${this.opened ? "show" : ""} tooltip` }, index.h("slot", null))));
    }
    get el() { return index.getElement(this); }
};
TooltipComponent.style = tooltipCss;

const tooltipContentCss = ":host{position:relative}.tooltip-content{position:relative;font-size:14px;line-height:17px;display:-ms-flexbox;display:flex}.se-icon{font-family:\"se-icon\";padding-top:4px;padding-right:5px}";

const TooltipContentComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
    }
    render() {
        return (index.h("div", { class: "tooltip-content" }, this.icon && index.h("se-icon", { class: "se-icon", size: "small" }, this.icon), index.h("slot", { name: "icon" }), index.h("slot", null)));
    }
};
TooltipContentComponent.style = tooltipContentCss;

const tooltipFooterCss = ":host{position:relative;display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-moz-align-items:center;-ms-flex-align:center;align-items:center;font-size:14px;line-height:17px}.flex{display:-ms-flexbox;display:flex;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}";

const TooltipFooterComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
    }
    render() {
        return [
            index.h("div", { class: "flex" }, index.h("slot", { name: "start" })),
            index.h("slot", null)
        ];
    }
};
TooltipFooterComponent.style = tooltipFooterCss;

const tooltipHeaderCss = ":host{position:relative}.tooltip-header{-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;display:-ms-flexbox;display:flex;position:relative;font-weight:600;font-size:14px;line-height:17px}.se-icon{font-family:\"se-icon\";padding-right:5px}";

const TooltipHeaderComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
    }
    render() {
        return [
            index.h("div", { class: "tooltip-header" }, this.icon && index.h("se-icon", { class: "se-icon", size: "small" }, this.icon), index.h("slot", { name: "icon" }), index.h("slot", null)),
            index.h("slot", { name: "end" })
        ];
    }
};
TooltipHeaderComponent.style = tooltipHeaderCss;

exports.se_tooltip = TooltipComponent;
exports.se_tooltip_content = TooltipContentComponent;
exports.se_tooltip_footer = TooltipFooterComponent;
exports.se_tooltip_header = TooltipHeaderComponent;
