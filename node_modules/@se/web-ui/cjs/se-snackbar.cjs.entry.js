'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-fec6655d.js');
const action_delete_cross = require('./action_delete_cross-1a62a9ae.js');

const information_circle = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M896 512c0 70-18 134-52 192s-82 106-140 140-122 52-192 52-134-18-192-52-106-82-140-140-52-122-52-192 18-134 52-192 82-106 140-140 122-52 192-52 134 18 192 52 106 82 140 140 52 122 52 192zM652 322c0-18-6-34-20-48s-30-20-48-20-34 6-48 20-20 30-20 48 6 34 20 48 30 20 48 20 34-6 48-20 20-30 20-48zm-70 362v-6c0-4-2-8-4-10-4-2-8-4-12-4-10 10-24 22-42 34s-30 18-36 18c-2 0-4-2-4-4s0-6 2-8l86-206c6-20 10-32 10-36 0-10-4-18-12-26-8-6-16-10-26-10-22 0-50 10-84 28s-62 42-84 68v2c0 4 2 8 4 10 2 4 6 6 10 8 8-8 20-18 38-30s30-18 36-18c4 0 4 4 2 12l-86 208c-6 14-10 26-10 36 0 6 4 12 12 20s16 12 26 12c30 0 62-10 96-32 34-20 60-42 78-66z"/></svg>`;

const snackbarCss = ":host{position:fixed;bottom:20px;display:none;-ms-flex-item-align:center;align-self:center;z-index:600;opacity:0;-webkit-transition:0.2s;transition:0.2s;-webkit-animation:slideDown 0.2s linear;animation:slideDown 0.2s linear}@-webkit-keyframes slideDown{0%{bottom:20px}100%{bottom:0px}}@keyframes slideDown{0%{bottom:20px}100%{bottom:0px}}:host(.show-snackbar){display:block;opacity:1;-webkit-animation:slideUp 0.2s linear;animation:slideUp 0.2s linear}@-webkit-keyframes slideUp{0%{bottom:0px}100%{bottom:20px}}@keyframes slideUp{0%{bottom:0px}100%{bottom:20px}}@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){:host(.show-snackbar){left:0}}.information{background-color:#434343;background-color:var(--se-focus, #434343)}.success{background-color:#3DCD58;background-color:var(--se-success, #3DCD58);color:#FFFFFF;color:var(--se-success-contrast, #FFFFFF)}.warning{background-color:#E47F00;background-color:var(--se-warning, #E47F00);color:#0F0F0F;color:var(--se-warning-contrast, #0F0F0F)}.error{background-color:#DC0A0A;background-color:var(--se-error, #DC0A0A);color:#FFFFFF;color:var(--se-error-contrast, #FFFFFF)}.snackbar{height:48px;line-height:48px;display:-ms-flexbox;display:flex;color:#FFFFFF;color:var(--se-primary-contrast, #FFFFFF)}.snackbar-icon{padding-left:10px;margin-right:-6px;display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center}.snackbar-icon se-icon{top:1px}.message{font-size:16px;padding-right:16px;margin-left:16px}.action{cursor:pointer;font-size:14px;border:1px solid #FFFFFF;padding:8px 16px;margin:8px 12px 8px 0;line-height:16px;-webkit-transition:0.2s;transition:0.2s}.action:hover{background:rgba(255, 255, 255, 0.2)}.close{cursor:pointer;padding-right:10px;margin-left:-2px}.close se-icon{vertical-align:middle;top:0}";

const SHOW_SNACKBAR = 'show-snackbar';
const SnackbarComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Indicates the background color of your snackbar.
         * `success`: green
         * `warning`: orange
         * `error`: red
         * `information`: dark grey, default setting
         */
        this.type = 'information';
        /**
         * The name of the icon you wish to display.  The default icon is an information circle.
         */
        this.icon = 'information_circle';
        /**
         * Displays a "button" to close the snackbar.
         * The default setting is `false`.
         * This will be visible if set to `true`.
         */
        this.canClose = false;
        /**
         * Indicates if the snackbar is open.  Set to `false` (closed) by default.
         */
        this.open = false;
        /**
         * Indicates the duration (in milliseconds) that the snackbar will display on screen before auto-closing, if `canClose` is set to false.
         * The default setting is 5000.
         */
        this.duration = 5000;
        this.didClose = index.createEvent(this, "didClose", 7);
        this.actionClicked = index.createEvent(this, "actionClicked", 7);
    }
    openDidChange() {
        if (this.open) {
            this.el.classList.add(SHOW_SNACKBAR);
            setTimeout(() => {
                if (!this.canClose) {
                    this.closeSnackbar();
                }
            }, this.duration);
        }
    }
    closeSnackbar() {
        this.open = false;
        this.el.classList.remove(SHOW_SNACKBAR);
        this.didClose.emit();
    }
    submitData() {
        this.actionClicked.emit();
    }
    componentDidLoad() {
        this.openDidChange();
    }
    render() {
        let renderIcon = this.icon === 'information_circle' ? information_circle : this.icon;
        if (this.icon === "none") {
            renderIcon = false;
        }
        return (index.h("div", { class: this.type }, index.h("div", { class: "snackbar", role: "alert" }, index.h("span", { class: "snackbar-icon" }, renderIcon && index.h("se-icon", null, index.h("span", { innerHTML: renderIcon })), index.h("slot", { name: "icon" })), index.h("span", { class: "message" }, this.message, index.h("slot", null)), this.actionText ? index.h("span", { class: "action", onClick: () => this.submitData() }, this.actionText) : '', this.canClose ? index.h("span", { class: "close" }, index.h("se-icon", { onClick: () => this.closeSnackbar() }, index.h("span", { innerHTML: action_delete_cross.action_delete_cross }))) : '')));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "open": ["openDidChange"]
    }; }
};
SnackbarComponent.style = snackbarCss;

exports.se_snackbar = SnackbarComponent;
