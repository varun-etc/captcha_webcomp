'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-fec6655d.js');

const dropdownCss = ".se-dropdown{display:-ms-inline-flexbox;display:inline-flex;position:relative}.se-dropdown[hidden]{display:none}.se-dropdown.left .dropdown-content{left:0}.se-dropdown.right .dropdown-content{right:0}.se-dropdown.top .dropdown-content{bottom:calc(100% + 4px)}.se-dropdown.bottom .dropdown-content{top:calc(100% + 4px)}.dropdown-toggle ::slotted(*){cursor:pointer}.dropdown-content{color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);min-width:100px;-webkit-box-shadow:0px 8px 16px 0px rgba(0, 0, 0, 0.2);box-shadow:0px 8px 16px 0px rgba(0, 0, 0, 0.2);visibility:hidden;opacity:0;position:absolute;overflow:auto;border-radius:2px;z-index:-1}.dropdown-content.show{visibility:visible;opacity:1;z-index:5}";

const DropdownComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Defines how to align the dropdown container.
         * `right`: Position the container with respect to the right side of the trigger element.
         * `left`: Position the container with respect to the left side of the trigger element.
         */
        this.alignment = 'left';
        /**
         * Defines how to vertically align the dropdown container.
         * `top`: Position the container with respect to the top side of the trigger element.
         * `bottom`: Position the container with respect to the bottom side of the trigger element.
         */
        this.verticalAlignment = 'bottom';
        /**
         * Sets the maximum width of the dropdown.  Default setting is "200px".
         */
        this.maxWidth = "200px";
        /**
         * Sets the maximum height of the dropdown.  Default setting is "400px".
         */
        this.maxHeight = "400px";
        this.opened = false;
        this.didOpen = index.createEvent(this, "didOpen", 7);
        this.didClose = index.createEvent(this, "didClose", 7);
        this.cancelAllDropdown = index.createEvent(this, "cancelAllDropdown", 5);
    }
    /**
     * Method to open the dropdown from outside its parent element.
     */
    async open() {
        this.opened = true;
        this.didOpen.emit();
    }
    /**
     * Method to close the dropdown from outside its parent element.
     */
    async close() {
        this.opened = false;
        this.didClose.emit();
    }
    handleClick() {
        if (this.opened) {
            this.close();
        }
    }
    handleTouchstart() {
        if (this.opened) {
            this.close();
        }
    }
    handleCancelAllDropdown() {
        if (!this.isActive && this.opened) {
            this.close();
        }
    }
    _toggle(ev) {
        ev.stopPropagation();
        this.isActive = true;
        if (this.opened) {
            this.close();
        }
        else {
            // close others only when trying to open one
            this.cancelAllDropdown.emit();
            this.open();
        }
        this.isActive = false;
        // console.log(ev)
    }
    render() {
        return (index.h("div", { class: ['se-dropdown', this.alignment, this.verticalAlignment].join(' ') }, index.h("div", { "aria-haspopup": "true", "aria-expanded": this.opened, onClick: (ev) => this._toggle(ev) }, index.h("slot", { name: "trigger" })), index.h("div", { class: `${this.opened ? 'show' : ''} dropdown-content`, style: { maxWidth: this.maxWidth, maxHeight: this.maxHeight } }, index.h("slot", null))));
    }
    get el() { return index.getElement(this); }
};
DropdownComponent.style = dropdownCss;

exports.se_dropdown = DropdownComponent;
