'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-fec6655d.js');
const arrow4_top = require('./arrow4_top-2fe51b6d.js');

const notificationError = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path d="M542 512l113 113c8 8 8 22 0 30-5 4-10 6-15 6-6 0-11-2-16-6L512 542 399 655c-5 4-10 6-15 6-6 0-11-2-16-6-8-8-8-22 0-30l113-113-113-113c-8-8-8-22 0-30 9-8 22-8 31 0l113 112 112-112c9-8 22-8 31 0 8 8 8 22 0 30z"/></svg>`;

const fabCss = ".se-fab{position:fixed}.se-fab.pos-top{top:76px;right:17px}.se-fab.pos-top .mini-action-button{top:70px;left:12px;text-align:center}.se-fab.pos-bottom{bottom:17px;right:17px}.se-fab.pos-bottom .mini-action-button{bottom:55px;left:12px;text-align:center}.se-fab .mini-action-button{cursor:pointer;position:absolute;display:none}.se-fab se-icon{margin-right:0}.se-fab .show{display:block}";

const SHOW_FAB = 'show';
const FabComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.error_icon = notificationError;
        this.arrow_up = arrow4_top.arrow4Top;
        /**
         * Property that determines the functionality of the FAB.
         * The default setting is `speeddial`, which will show/hide a dropdown menu when clicking on the FAB.
         * The `backtotop` setting returns you to the top of the page you are viewing when clicking on the FAB.
         */
        this.option = 'speeddial';
        /**
         *  Property that determines the position of the component.
         *  The default setting is `bottom`, rendering a FAB at the bottom right corner.
         *  The `top` setting renders the FAB at the top right corner.
         */
        this.position = 'bottom';
        /**
        * Indicates the color of your main action button .
        * The Default setting is `primary`, rendering a green background.
        * The `alternative` setting renders a white background.
        */
        this.color = 'primary';
        this.toggleIcon = true;
    }
    /**
     * Use this method to toggle (show/hide) the mini action buttons.
     */
    async toggleAction() {
        if (this.option == 'speeddial') {
            this.toggleIcon = !this.toggleIcon;
        }
    }
    getIcon() {
        let icon;
        switch (this.option) {
            case 'speeddial':
                icon = this.toggleIcon ? this.icon : this.error_icon;
                break;
            case 'backtotop':
                icon = this.arrow_up;
        }
        return icon;
    }
    render() {
        return (index.h("div", { class: ['se-fab', `pos-${this.position}`].join(' ') }, index.h("se-button", { color: this.color, "icon-only": "true", class: this.option == 'backtotop' ? 'backtotop' : '', option: 'fab', onClick: () => this.toggleAction() }, index.h("se-icon", { slot: "icon", size: "medium" }, index.h("span", { innerHTML: this.getIcon() }))), this.option === 'speeddial' ?
            index.h("div", { class: ['mini-action-button', !this.toggleIcon ? SHOW_FAB : ''].join(' ') }, index.h("slot", null)) : ''));
    }
};
FabComponent.style = fabCss;

const fabItemCss = ".se-fab-item{width:40px;height:40px;font-size:24px;border-radius:50%;padding:0;margin:0 0 15px 0;-ms-flex-align:center;align-items:center;position:relative;display:-ms-flexbox;display:flex;-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F)}.se-fab-item:hover,.se-fab-item:focus{-webkit-box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);box-shadow:0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);background-color:#CBCBCB;background-color:var(--se-hover-standard, #CBCBCB)}.se-fab-item:active{background-color:#626469;background-color:var(--se-selected, #626469);color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF)}.se-fab-item:after{content:\"\";display:block;position:absolute;top:0;right:0;bottom:0;left:0}.se-fab-item .description{font-weight:300;line-height:1;border-radius:23.27px;font-size:12px;padding:5px 7px;margin-right:12px;position:absolute;right:100%;overflow:visible;white-space:nowrap;color:#0F0F0F;color:var(--se-standard-contrast, #0F0F0F);background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}.se-fab-item se-icon{font-family:\"se-icon\";padding:0 8px}::slotted(se-icon[slot=icon]){font-family:\"se-icon\";padding:0 8px}@media all and (-ms-high-contrast: none){.description{top:10px}}";

const FabItemComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.didClick = index.createEvent(this, "didClick", 7);
    }
    toggle() {
        this.didClick.emit(this.el.innerText);
    }
    render() {
        return (index.h("div", { class: "se-fab-item", onClick: () => this.toggle() }, index.h("span", { class: "description" }, index.h("slot", null)), this.icon ? index.h("se-icon", null, this.icon) : index.h("slot", { name: "icon" })));
    }
    get el() { return index.getElement(this); }
};
FabItemComponent.style = fabItemCss;

exports.se_fab = FabComponent;
exports.se_fab_item = FabItemComponent;
