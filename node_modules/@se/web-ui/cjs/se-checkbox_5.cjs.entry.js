'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-fec6655d.js');
const action_delete_cross = require('./action_delete_cross-1a62a9ae.js');

const checkboxCss = "div{display:inline-block}.required{color:#DC0A0A;color:var(--se-error, #DC0A0A);padding-left:3px}.checkbox-label{font-weight:300;padding-left:8px}.checkbox{-moz-align-items:center;-ms-flex-align:center;align-items:center}.checkbox .checkbox-container{position:relative;padding-left:16px;font-weight:300;line-height:1.2 !important;font-size:14px;margin:8px;margin-right:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.checkbox .checkbox-container input{height:0;width:0;opacity:0;margin:0;position:absolute;clip:rect(1px, 1px, 1px, 1px)}.checkbox .checkbox-container input:checked~.checkmark[data-color=primary]{background-color:#3DCD58;background-color:var(--se-primary, #3DCD58);border:1px solid;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}.checkbox .checkbox-container input:checked~.checkmark[data-color=secondary]{background-color:#42B4E6;background-color:var(--se-secondary, #42B4E6);border:1px solid;border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}.checkbox .checkbox-container input:checked~.checkmark[data-color=success]{background-color:#3DCD58;background-color:var(--se-success, #3DCD58);border:1px solid;border-color:#3DCD58;border-color:var(--se-success, #3DCD58)}.checkbox .checkbox-container input:checked~.checkmark:after{display:block}.checkbox .checkbox-container input[disabled]:checked~.checkmark{opacity:0.5}.checkbox .checkbox-container .checkmark{position:absolute;top:1px;left:-8px;height:14px;width:14px;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border:1px solid;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);border-radius:2px;-webkit-transition:0.2s;transition:0.2s}.checkbox .checkbox-container .checkmark:after{content:\"\";position:absolute;display:none;bottom:3px;left:5px;width:3px;height:9px;border:solid #FFFFFF;border-width:0 1px 1px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.checkbox .checkbox-container.checkbox-label-left{padding-left:0;margin:0}.checkbox .checkbox-container.checkbox-label-left .checkmark{left:auto}.checkbox .checkbox-container[data-disabled] .checkmark{opacity:0.5}.switch .checkbox-label{padding-left:0;vertical-align:middle}.switch .checkbox-container{text-align:left;vertical-align:middle;width:44px;height:26px;border-radius:13px;border:none;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);display:inline-block;position:relative;cursor:pointer}.switch .checkbox-container.checkbox-label-right{margin-left:0}.switch .checkbox-container.checkbox-label-right~.checkbox-label{padding-left:6px}.switch .checkbox-container .checkmark{display:block;width:100%;height:100%;border-radius:100%}.switch .checkbox-container .checkmark:before,.switch .checkbox-container .checkmark:after{content:\"\";cursor:pointer;position:absolute}.switch .checkbox-container .checkmark:before{width:100%;height:100%;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;border:1px solid #E6E6E6;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border-radius:13px;-webkit-transition:all 0.2s ease-out 0.1s;transition:all 0.2s ease-out 0.1s;-webkit-transform:scale(1);transform:scale(1)}.switch .checkbox-container .checkmark:after{top:50%;left:1px;z-index:3;-webkit-transition:-webkit-transform 0.1s linear;transition:-webkit-transform 0.1s linear;transition:transform 0.1s linear;transition:transform 0.1s linear, -webkit-transform 0.1s linear;width:24px;height:24px;-webkit-transform:translate3d(0, -50%, 0);transform:translate3d(0, -50%, 0);background-color:#fff;border-radius:100%;-webkit-box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3);box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.3)}.switch .checkbox-container input{opacity:0;display:none}.switch .checkbox-container input:checked~span:before{border:1px solid;background-color:#3DCD58;background-color:var(--se-success, #3DCD58);border-color:#3DCD58;border-color:var(--se-success, #3DCD58)}.switch .checkbox-container input:checked~span:after{-webkit-transform:translate3d(75%, -50%, 0);transform:translate3d(75%, -50%, 0)}.switch .checkbox-container input[disabled]:checked~span:before{opacity:0.5}.switch .checkbox-container[data-disabled] .checkmark{cursor:default}.switch .checkbox-container[data-disabled] .checkmark:before{cursor:default}.switch .checkbox-container[data-disabled] .checkmark:after{cursor:default}.onoff .on-off-wrapper{display:-ms-inline-flexbox;display:inline-flex}.onoff button{color:#333333;padding:6px 8px;border:none;outline:none;height:32px;font-size:14px;font-family:inherit;line-height:13px;font-weight:300;cursor:pointer;-webkit-transition:0.2s;transition:0.2s}.onoff button.active{border-top-left-radius:2px;border-bottom-left-radius:2px;margin-right:0}.onoff button.active.selected{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#3DCD58;background-color:var(--se-success, #3DCD58)}.onoff button.inactive{border-top-right-radius:2px;border-bottom-right-radius:2px;margin-left:0}.onoff button.inactive.selected{color:#FFFFFF;color:var(--se-alternative, #FFFFFF);background-color:#DC0A0A;background-color:var(--se-error, #DC0A0A)}.header button{height:24px;font-size:12px}.standard button{background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}.alternative button{background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF)}.disabled button{cursor:default;color:#CBCBCB;opacity:0.5}.disabled button.active.selected,.disabled button.inactive.selected{color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}.disabled.standard button{background-color:#EDEDED;background-color:var(--se-standard, #EDEDED)}";

const CheckboxComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Determines the visual appearance of the component.
         * `checkbox` is the default option, which will render the component like a standard HTML checkbox.
         * `switch` renders the component like a toggle switch.
         * `onoff` renders the component like an "on/off" switch, with a red "off" button and a green "on" button.
         */
        this.option = 'checkbox';
        /**
         * Adds a red asterisk if the checkbox is required when used in a form field.  Default is `false`.
         */
        this.required = false;
        /**
         * Defines the color of the checkbox for when the option is set to `checkbox` or `switch`.
         * The default value is `success`, rendering a green color.
         * The `secondary` setting renders a blue color.
         */
        this.color = 'success';
        /**
         * Defines the color schema of the checkbox when the option is set to `onoff`.
         * The default value is `standard`.
         */
        this.background = 'standard';
        /**
         * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        /**
           * The "checked" state of the checkbox, `false` by default.
           */
        this.selected = false;
        /**
         * Defines the text the user will see for the "on" or "active" part of the checkbox when option is set to `onoff`.  Set to `ON` by default.
         */
        this.textOn = 'ON';
        /**
         * Defines the text the user will see for the "off" or "inactive" part of the checkbox when option is set to `onoff`.  Set to `OFF` by default.
         */
        this.textOff = 'OFF';
        /**
         * Reduces the visual height of the checkbox when the option is set to `onoff`.
         * Useful if the on/off checkbox is within a header element.
         */
        this.header = false;
        this.didChange = index.createEvent(this, "didChange", 7);
    }
    /**
     * Sets the required property on the checkbox element.  Used when the checkbox is within a form field.
     */
    async setRequired() {
        this.required = true;
    }
    setElementId() {
        let id = this.el.getAttribute('id');
        if (id && this.option === 'onoff') {
            this.el.shadowRoot.querySelector('button.active').setAttribute('id', 'wc-' + id + '-active');
            this.el.shadowRoot.querySelector('button.inactive').setAttribute('id', 'wc-' + id + '-inactive');
        }
        else if (id) {
            this.el.shadowRoot.querySelector('input').setAttribute('id', 'wc-' + id);
        }
    }
    handleClick() {
        if (!this.disabled) {
            this.selected = !this.selected;
            let checkboxObject = { value: this.value, selected: this.selected };
            this.didChange.emit(checkboxObject);
        }
    }
    componentDidLoad() {
        if (!this.labelPos) {
            this.labelPos = this.option === 'switch' ? 'left' : 'right';
        }
        this.setElementId();
    }
    render() {
        let markup, switchMarkup;
        if (this.option === 'switch' && this.required) {
            switchMarkup = [
                index.h("span", { class: "checkbox-label" }, this.label),
                index.h("span", { class: "required" }, "*")
            ];
        }
        else if (this.option === 'switch' && !this.required) {
            switchMarkup = index.h("span", { class: "checkbox-label" }, this.label);
        }
        if (this.option === 'onoff') {
            markup = (index.h("div", { class: "on-off-wrapper" }, index.h("button", { class: ['active', this.selected ? ' selected' : ''].join(' '), onClick: () => this.handleClick() }, this.textOn), index.h("button", { class: ['inactive', !this.selected ? ' selected' : ''].join(' '), onClick: () => this.handleClick() }, this.textOff)));
        }
        else {
            markup = (index.h("div", { class: "checkbox-wrapper" }, this.option === 'switch' && this.labelPos === 'left' ? switchMarkup : '', index.h("label", { class: ["checkbox-container", `checkbox-label-${this.labelPos}`].join(' '), "data-disabled": this.disabled }, this.option === 'checkbox' ? this.label : '', this.option === 'checkbox' && this.required ? index.h("span", { class: "required" }, "*") : '', index.h("input", { type: "checkbox", checked: this.selected, disabled: this.disabled, onClick: () => this.handleClick(), value: this.value }), index.h("span", { class: "checkmark", "data-color": this.color })), this.option === 'switch' && this.labelPos === 'right' ? switchMarkup : ''));
        }
        return index.h("div", { class: [this.option, this.background, this.header ? 'header' : '', this.disabled ? 'disabled' : ''].join(' ') }, markup);
    }
    get el() { return index.getElement(this); }
};
CheckboxComponent.style = checkboxCss;

const chipCss = ".se-chip{cursor:pointer;display:-ms-inline-flexbox;display:inline-flex;margin:4px;min-height:30px;padding-left:8px;padding-right:8px;font-size:16px;font-weight:400;line-height:25px;text-align:left;background:transparent;outline:none;border-radius:16px;-moz-align-items:center;-ms-flex-align:center;align-items:center;-webkit-transition:0.2s;transition:0.2s}.se-chip.nano{min-height:22px;font-size:14px;line-height:17px}.se-chip.nano se-icon{font-size:22px;margin-right:-6px}.value.can-close{cursor:default;padding-right:4px}se-icon{margin-top:-1px;cursor:pointer;font-size:24px;margin-right:-4px}se-icon[data-hide]{display:none}@supports (-ms-ime-align: auto){.se-icon{top:0}}.standard{border:1px solid #434343;color:#333333}.standard:hover{border:1px solid #333333;background-color:rgba(203, 203, 203, 0.2)}.alternative{border:1px solid #FFFFFF;color:#FFFFFF;color:var(--se-alternative, #FFFFFF)}.alternative:hover{background-color:rgba(203, 203, 203, 0.6)}.standard:active,.standard.selected,.alternative:active,.alternative.selected{color:#FFFFFF;color:var(--se-selected-contrast, #FFFFFF);background-color:#626469;background-color:var(--se-selected, #626469);border:1px solid #626469}.standard:focus,.alternative:focus{color:#FFFFFF;color:var(--se-focus-contrast, #FFFFFF);background-color:#434343;background-color:var(--se-focus, #434343)}.disabled,.disabled.value,.disabled:hover,.disabled:focus{cursor:default;background-color:inherit;color:#CBCBCB;border:1px solid #CBCBCB}.disabled se-icon,.disabled.value se-icon,.disabled:hover se-icon,.disabled:focus se-icon{cursor:default}.display-block{width:100%;margin-top:8px;margin-left:0;margin-right:0;padding:0;cursor:pointer;display:-ms-flexbox;display:flex;-moz-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-pack:justify;justify-content:space-between}.display-block .value{padding-left:8px;width:100%}.display-block .value.can-close{cursor:default}.display-block se-icon{margin-right:-3px;padding-right:4px}";

const ChipComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
        * Defines the size of the chip.
        * `nano` sets the font to 14px and the height to 24px.
        * `small` is the default option, with a 16px font and a 32px height.
        */
        this.size = 'small';
        /**
        * Defines the background color of the chip.  The default setting is `standard`, which is a light gray color.
        */
        this.color = 'standard';
        /**
         * Indicates whether or not the chip has a close button.  Set to `false` by default.
         */
        this.canClose = false;
        /**
         * Indicates whether or not the chip is selected.  Set to `false` by default.
         */
        this.selected = false;
        /**
         * Indicates whether or not the chip is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        this.didClose = index.createEvent(this, "didClose", 7);
    }
    closeChip() {
        if (!this.disabled) {
            this.didClose.emit(this.value);
        }
    }
    render() {
        return (index.h("div", { class: [
                'se-chip',
                this.size,
                this.color,
                this.selected ? 'selected' : '',
                this.disabled ? 'disabled' : '',
                this.block ? 'display-block' : ''
            ].join(' ') }, index.h("div", { class: ['value', this.canClose ? 'can-close' : ''].join(' ') }, this.value), this.canClose ? index.h("se-icon", { class: "close", onClick: () => this.closeChip() }, index.h("span", { innerHTML: action_delete_cross.action_delete_cross })) : ''));
    }
    get el() { return index.getElement(this); }
};
ChipComponent.style = chipCss;

const formFieldCss = "se-form-field .form-field-wrapper{display:-ms-flexbox;display:flex;-moz-align-items:center;-ms-flex-align:center;align-items:center}se-form-field .ff-padding-small{padding:4px}se-form-field .ff-padding-medium{padding:8px}se-form-field .ff-padding-none{padding:0}se-form-field .with-label{padding-top:4px}se-form-field [data-disabled] .ff-wrapper{opacity:0.5}se-form-field label{width:100%;text-align:center;line-height:12px;font-weight:300;line-height:1.2 !important;font-size:14px;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-moz-align-items:center;-ms-flex-align:center;align-items:center}se-form-field label>span{text-align:right;min-width:140px}se-form-field label .required{color:#DC0A0A;color:var(--se-error, #DC0A0A);padding-left:3px}se-form-field .ff-wrapper{padding-left:16px;font-size:16px;width:100%}se-form-field .ff-wrapper-input{max-width:320px;-ms-flex-direction:column;flex-direction:column;width:100%;-moz-align-items:left;-ms-flex-align:left;align-items:left;text-align:left;display:-ms-flexbox;display:flex}se-form-field input,se-form-field select,se-form-field textarea{font-family:inherit;width:100%;font-size:16px;height:28px;line-height:20px;border:1px solid;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);color:#0F0F0F;color:var(--se-alternative-contrast, #0F0F0F);-webkit-transition:0.2s;transition:0.2s;padding:4px;font-size:inherit}se-form-field input:focus,se-form-field select:focus,se-form-field textarea:focus{outline:none;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}se-form-field textarea{resize:vertical;height:auto;cursor:auto}se-form-field select{border-radius:0;padding:10px 30px 10px 10px;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;appearance:none;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);border-radius:0;background-image:linear-gradient(45deg, transparent 50%, gray 50%), linear-gradient(135deg, gray 50%, transparent 50%);background-position:calc(100% - 20px) calc(1em + 2px), calc(100% - 15px) calc(1em + 2px);background-size:5px 5px, 5px 5px;background-repeat:no-repeat}se-form-field input[type=search],se-form-field select{height:40px;width:103%}@media screen and (min--moz-device-pixel-ratio: 0){se-form-field input[type=date]{padding-top:6px;padding-bottom:4px}}se-form-field .with-icon{display:block;position:relative}se-form-field .with-icon input{padding-right:36px}se-form-field .with-icon input:not([type=search]){width:calc(100% - 32px)}se-form-field .with-icon se-icon{position:absolute;top:50%;right:0px;margin-right:-4px;-webkit-transform:translateY(-50%);transform:translateY(-50%)}se-form-field .ff-block label>span{text-align:right}se-form-field .ff-block label.ff-stacked>span{text-align:left}se-form-field .ff-block .ff-wrapper{max-width:100%}se-form-field .ff-block .ff-wrapper-input{max-width:100%}se-form-field .ff-block select,se-form-field .ff-block input[type=search]{width:100%}se-form-field .ff-block input:not([type=search]),se-form-field .ff-block textarea{width:calc(100% - 10px)}se-form-field .ff-block .with-icon input:not([type=search]){width:calc(100% - 32px - 10px)}se-form-field .ff-block .with-icon se-icon{margin-right:4px}se-form-field .ff-stacked .form-field-wrapper{-ms-flex-direction:column;flex-direction:column;-moz-align-items:start;-ms-flex-align:start;align-items:start}@media all and (-ms-high-contrast: none), (-ms-high-contrast: active){se-form-field .ff-stacked .form-field-wrapper{display:block}}se-form-field .ff-stacked label{text-align:left;width:100%;display:block}se-form-field .ff-stacked label>span{display:block;max-width:none;text-align:left;line-height:1.5}se-form-field .ff-stacked .ff-wrapper{max-width:100%;margin-left:0;padding-left:0}se-form-field .ff-error input{border-color:#DC0A0A;border-color:var(--se-error, #DC0A0A)}se-form-field .ff-warning input{border-color:#E47F00;border-color:var(--se-warning, #E47F00)}se-form-field .ff-success input{border-color:#3DCD58;border-color:var(--se-success, #3DCD58)}";

const FormFieldComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Defines the layout of your form field.
         * `inline` is the default option, and is always applied if the type is set to `checkbox`.  This sets the input or select field adjacent to the label.
         * `stacked` option will render the input or select field below the label.
         */
        this.option = 'inline';
        /**
         * Defines the spacing around the inside edge of a container.
         * `none` is 0px.
         * `small` is 4px.
         * `medium` is 8px.
         */
        this.padding = 'small';
        /**
         * Optional property to define the proportion of the label width. The content (input) will take the rest of if. Defaulted to 40%
         */
        this.labelWidth = '35%';
        /**
         * Defines whether the form field's input is a text field (`input`), a checkbox (`checkbox`), a radio button (`radio`), or a dropdown menu (`select`).
         * `input` is the default type.
         */
        this.type = 'input';
        /**
         * Determines if the input is required by the application.
         * Set to `false` by default.
         * Setting this value to `true` will render a red asterisk next to your label.
         */
        this.required = false;
        /**
         * Optional property that defines if the form field is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        this.didSubmit = index.createEvent(this, "didSubmit", 7);
    }
    inputSelectListenerHandler(event) {
        this.handleEvent(event);
    }
    checkboxListenerHandler(event) {
        this.handleEvent(event);
    }
    radioListenerHandler(event) {
        this.handleEvent(event);
    }
    disabledDidChange() {
        this.initLabel();
    }
    typeDidChange() {
        this.initLabel();
    }
    initLabel() {
        Array.from(this.el.querySelectorAll('input, select, textarea, se-checkbox, se-radio')).forEach((item) => {
            item.disabled = this.disabled;
        });
    }
    componentDidLoad() {
        this.initLabel();
    }
    handleEvent(event) {
        if (!this.disabled) {
            this.value = event.detail ? event.detail.selected : event.target.value;
            this.didSubmit.emit(this.value);
        }
    }
    render() {
        return (index.h("div", { class: {
                [`ff-${this.status}`]: true,
                'ff-stacked': this.option === 'stacked',
                'ff-block': this.block,
                [`ff-padding-${this.padding}`]: true,
                'form-field-wrapper': true
            } }, index.h("label", { "data-disabled": this.disabled }, index.h("span", { style: {
                width: this.option !== 'stacked' ? this.labelWidth : 'auto'
            }, class: { 'with-label': !!this.label } }, this.label, this.required ? index.h("span", { class: "required" }, "*") : ''), index.h("div", { class: "ff-wrapper" }, index.h("div", { class: "ff-wrapper-input" }, index.h("slot", null))))));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "disabled": ["disabledDidChange"],
        "type": ["typeDidChange"]
    }; }
};
FormFieldComponent.style = formFieldCss;

const radioCss = ":host{-moz-align-items:center;-ms-flex-align:center;align-items:center}:host .se-radio{display:inline-block}:host .se-radio .required{color:#DC0A0A;color:var(--se-error, #DC0A0A);padding-left:3px}:host .se-radio .radio-label{font-weight:300;line-height:1.2 !important;font-size:14px;padding-left:6px}:host .se-radio .radio-container{position:relative;padding-left:16px;font-weight:300;line-height:1.2 !important;font-size:14px;margin:8px;margin-right:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host .se-radio .radio-container input{height:0;width:0;opacity:0;margin:0;position:absolute;clip:rect(1px, 1px, 1px, 1px)}:host .se-radio .radio-container input:checked~.checkdot{height:8px;width:8px;border:4px solid;border-color:#3DCD58;border-color:var(--se-primary, #3DCD58)}:host .se-radio .radio-container input:checked~.checkdot[data-color=secondary]{border-color:#42B4E6;border-color:var(--se-secondary, #42B4E6)}:host .se-radio .radio-container input:checked~.checkdot:after{display:block}:host .se-radio .radio-container input[disabled]:checked~.checkdot{opacity:0.5}:host .se-radio .radio-container .checkdot{position:absolute;top:1px;left:-8px;height:14px;width:14px;background-color:#FFFFFF;background-color:var(--se-alternative, #FFFFFF);border:1px solid;border-color:#CBCBCB;border-color:var(--se-hover-standard, #CBCBCB);border-radius:50%}:host .se-radio .radio-container.checkdot-label-left{padding-left:0;margin:0}:host .se-radio .radio-container.checkdot-label-left .checkdot{left:auto}:host .se-radio .radio-container[data-disabled] .checkdot{opacity:0.5}";

const RadioComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Adds a red asterisk if the radio button is required when used in a form field.  Default setting is `false`.
         */
        this.required = false;
        /**
         * Defines the color of the checkbox.
         * The default setting is `primary`, rendering a green color.
         * The `secondary` setting renders a blue color.
         */
        this.color = 'primary';
        /**
         * Optional property that defines if the checkbox is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        /**
           * Determines whether or not the checkbox is checked when you initialize it.
         * The default setting is `false`.
         * Checked if set to `true`.
           */
        this.selected = false;
        /**
         * Sets the position of the label for your checkbox component.
         * The default setting is `right`.
         */
        this.labelPos = 'right';
        this.didCheck = index.createEvent(this, "didCheck", 7);
    }
    /**
     * Sets the required property on the radio button element.
     */
    async setRequired() {
        this.required = true;
    }
    setInputId() {
        const id = this.el.getAttribute('id');
        if (id) {
            const input = this.el.shadowRoot.querySelector('input');
            input.setAttribute('id', 'wc-' + id);
        }
    }
    handleClick() {
        this.selected = !this.selected;
        const checkboxObject = { value: this.value, selected: this.selected };
        this.didCheck.emit(checkboxObject);
    }
    componentDidLoad() {
        this.setInputId();
    }
    render() {
        return (index.h("div", { class: "se-radio" }, index.h("label", { class: ["radio-container", `checkdot-label-${this.labelPos}`].join(' '), "data-disabled": this.disabled }, this.label, this.required ? index.h("span", { class: "required" }, "*") : '', index.h("input", { type: "radio", checked: this.selected, disabled: this.disabled, onClick: () => this.handleClick() }), index.h("span", { class: "checkdot", "data-color": this.color }))));
    }
    get el() { return index.getElement(this); }
};
RadioComponent.style = radioCss;

const radioGroupCss = ":host{font-size:0}::slotted(se-radio){display:block;padding:4px 0}";

const RadioGroupComponent = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Defines the background color of each button in the group.  The default setting is `standard`, rendering a light gray background.
         */
        this.color = 'standard';
        /**
         * Defines the height of each button in the group.
         * `small` is the default setting, rendering a 32px height and a 14px font size.
         * `nano` sets the height to 24px and the font size to 12px.
         */
        this.size = 'small';
        /**
         * Optional property that defines if the button is disabled.  Set to `false` by default.
         */
        this.disabled = false;
        this.didChange = index.createEvent(this, "didChange", 7);
    }
    disabledDidChange() {
        this.updateItemMode();
    }
    valueDidChange(value) {
        this.selectChild(this.children, value);
        this.didChange.emit(this.value);
    }
    buttonClickedHandler(event) {
        this.handleChildClicked(event);
    }
    radioButtonCheckedHandler(event) {
        this.handleChildClicked(event);
    }
    updateItemMode() {
        this.children.forEach((child) => {
            if (child.localName == 'se-button') {
                child.setGrouped();
                if (child.icon) {
                    child.iconOnly = true;
                }
            }
            if (this.disabled) {
                child.disabled = true;
            }
            child.size = this.size;
            child.color = this.color;
        });
    }
    handleChildClicked(event) {
        let buttonInfo = event.detail;
        this.value = buttonInfo.value;
        this.selectChild(this.children, this.value);
        this.didChange.emit(this.value);
    }
    selectChild(children, value) {
        children.forEach((child) => {
            child.selected = child.value === value;
        });
    }
    componentDidLoad() {
        this.children = this.el.querySelectorAll('se-button, se-radio');
        this.updateItemMode();
        this.selectChild(this.children, this.value);
    }
    render() {
        return (index.h("slot", null));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "disabled": ["disabledDidChange"],
        "value": ["valueDidChange"]
    }; }
};
RadioGroupComponent.style = radioGroupCss;

exports.se_checkbox = CheckboxComponent;
exports.se_chip = ChipComponent;
exports.se_form_field = FormFieldComponent;
exports.se_radio = RadioComponent;
exports.se_radio_group = RadioGroupComponent;
